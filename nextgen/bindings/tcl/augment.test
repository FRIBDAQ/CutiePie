#
#   Tests for ::spectcl::augment command.
#
package require tcltest
package require sqlite3

load .libs/libSpecTclExperiment.so

exec rm -rf databases;		# Get rid of any old databases left lingering by bad exits.

namespace import ::tcltest::*
#
# much of the setup/cleanup is standard...
# Create an experiment database, and put run 1 in it.
#
#
# much of the setup/cleanup is standard...
# Create an experiment database, and put run 1 in it.
#
proc setup {} {
    set tmpdir  [makeDirectory databases]
    set expfile [file join $tmpdir exp.db]
    set evtfile [file join $tmpdir evt.db]

    set exphandle [::spectcl::expcreate $expfile]
    ::spectcl::run create $exphandle 1 {This is a test title}
    set evthandle [::spectcl::evtcreate $exphandle 1 $evtfile]

    ::spectcl::parameter create $exphandle p1
    ::spectcl::parameter create $exphandle p2

    return [list $exphandle $expfile $evthandle $evtfile]

}

proc cleanup {exphandle expfile evthandle evtfile} {
    catch {::spectcl::expclose $exphandle}
    catch {::spectcl::evtclose $evthandle}
    
    file delete $expfile
    file delete $evtfile
    set dir [file dirname $expfile]


}

#
#  Callback proc to multiply parameter p1 by 2.0 and return it as p2
#  event:
#    
proc p1by2 event {
    set trigger [lindex $event 0]
    array set parameters [lindex $event 1]
    if {[array names parameters p1] eq "p1"} {
  	set value [expr $parameters(p1) * 2.0]
	return [list $trigger [list p2 $value]]
    }
    return [list]
}

#
#  Callback proc with an error message:
#
proc badcallback event {
    george;			# illegal command.
}

#----------------------- The tests: 


test augment-exists {Augment command must exist} \
    -body {
	info command ::spectcl::augment
    } -result ::spectcl::augment

test augment-argcount {Augment command must supply the correct number of command parameters} \
    -body {
	lappend result [catch {::spectcl::augment}];            # no args.
	lappend result [catch {::spectcl::augment junk1}];      #  experiment arg.
	lappend result [catch {::spectcl::augment junk1 junk2}]; # experiment and events (no script).
    } -result [list 1 1 1]
	
test augment-handles {The handle parameters must be findable in the handle table} \
    -body {
	catch {::spectcl::augment junk1 junk2 [list]}
    } -result 1

test augment-righthandles {The handles must be  for the right type of databases and related} \
    -setup {
	set info [setup]
	set exphandle [lindex $info 0]
	set expfile   [lindex $info 1]
	set evthandle [lindex $info 2]
	set evtfile   [lindex $info 3]
    }                \
    -cleanup {
	cleanup $exphandle $expfile $evthandle $evtfile
    }                \
    -body {
	catch {::spectcl::augment $evthandle $exphandle [list]}; # swapped types.
    } -result 1

test augment-ok0 {Process an empty events table, with no errors.} \
    -setup {
	set info [setup]
	set exphandle [lindex $info 0]
	set expfile   [lindex $info 1]
	set evthandle [lindex $info 2]
	set evtfile   [lindex $info 3]
    }                \
    -cleanup {
	cleanup $exphandle $expfile $evthandle $evtfile
    }                \
    -body {
	::spectcl::augment  $exphandle $evthandle [list p1by2]
	sqlite3 db $evtfile
	set result [db eval {SELECT COUNT(*) from events where param_id = 2}]
	db close
	set result
    } -result 0

test augment-ok1 {Process an events table with a single event to create it's p2} \
    -setup {
	set info [setup]
	set exphandle [lindex $info 0]
	set expfile   [lindex $info 1]
	set evthandle [lindex $info 2]
	set evtfile   [lindex $info 3]
    }                \
    -cleanup {
	cleanup $exphandle $expfile $evthandle $evtfile
    }                \
    -body {
	::spectcl::loadevents $exphandle $evthandle [list [list 1 [list p1 1.0]]]
	::spectcl::augment    $exphandle $evthandle [list p1by2]
	
	sqlite3 db $evtfile
	set result [db eval {SELECT value from events where trigger = '1' and param_id = 2 }]
	db close
	set result
    } -result 2.0


test augment-badproc {Process an events table with callback that has an error} \
    -setup {
	set info [setup]
	set exphandle [lindex $info 0]
	set expfile   [lindex $info 1]
	set evthandle [lindex $info 2]
	set evtfile   [lindex $info 3]
    }                \
    -cleanup {
	cleanup $exphandle $expfile $evthandle $evtfile
    }                \
    -body {
	::spectcl::loadevents $exphandle $evthandle [list [list 1 [list p1 1.0]]]
	set status [catch {::spectcl::augment    $exphandle $evthandle [list badcallback]} msg]
	set result [list $status $msg]
    } \
    -result {1 {Augment Callback script error: invalid command name "george"}}

#--------------------- Tally test results:

cleanupTests