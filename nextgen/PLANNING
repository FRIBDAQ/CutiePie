This version of SpecTcl is intended as a complete departure from prior versions.
Specifically SpecTcl will now become a set of very loosely coupled tools that
are connected via sqlite databases.  I would anticipate the following databases
would be present:
- experiment-definition - This would contain parameter definitions and run definitions.
- workspace             - This would contain spectrum definitions, conditions and spectrum instances...and might be 
                          dependent on who is analyzing the data.
- events                - Each of these would contain the event data from a specific run, unpacked.

The experiment definition will contain a UUID in a single element table. 
event files workspaces when created from an experiment definition will have the same uuid.  All database
accesses will ensure that the uuid's match.

database utilities will support creating experiments/workspaces from existing prototypes (changing the uuid)
so that similar experiments can be created from prior existing experiments.


The commands that make up spectcl will be a command ensemble.  The command name is 'spectcl'  the subcommand
is the function to perform. A 'SpecTcl shell' will also exist that can be run for direct access to the 
spectcl command.  The entire package will be implemented as  Tcl loadable package called 'SpecTcl'.



Experiment Commands:

experiment -create experiment-definition-database
experiment -copy   old-dexperiment new-experiment
experiment -use    experiment-definition-database  # only meaningful in shell.

parameter -create name -units units -low low -high hi
parameter -list   pattern
parameter -alter  name -low low -high hi'

run -create number title
run -end    number


C API:

  Database:

spectcl_experiment spectcl_experiment_create(const char* new-database)
spectcl_experiment spectcl_experiment_copy(const char*   old-database, const char* new-database)
spectcl_experiment spectcl_experiment_open(const char*   database)


  Parameters:

int spectcl_parameter_create(spectcl_expermient experiment,
    		             const char* name, const char* units,
                             const double* low,  const double* hi);
parameter_list spectcl_parameter_list(spectcl_experiment experiment,
                                      const char* pattern)
int spectcl_parameter_alter(spectcl_experiment experiment,
                    const char* name,
                    const double* low, const double* hi)
int spectcl_paramter_alter_byid(spectcl_experiment experiment,
                                int id, 
                    const double* low, const double* hi)


   Runs:

int spectcl_run_create(spectcl_experiment, unsigned int run_number,
                       const char* title)
int spectcl_run_end(spectcl_experiment, unsigned run_number,
    	            const time_t* endTime);

		    
   Configuration:

   UUIDS:

bool spectcl_correct_experiment(spectcl_experiment experiment, uuid_t* uuid);
uuid_t spectcl_experiment_uuid(spectcl_experiment experiment);



The paramter and run commands require knowledge of an experiment definition database.
This is gotten from the Environment variable:  'SPECTCL_EXPERIMENT' for 'individual commands'
the experiment database is established in the shell by -create, -copy and -use commands.



Schema for an experiment:

configuration_values:
  id            : integer primary key
  config-item   : varchar
  config-value  : varchar

  Currently defined configuration items:
    version  - Version of Schema
    uuid     - uuid of the experiment.
    type     - "experiment"   - The database is an experiment database.

parameters:
   id           : integer primary key
   name         : varchar
   units        : varchar
   lowest       : real
   highest      : real 

runs
   id           : integer primary key
   title        : varchar
   start        : timestamp
   stop         : timestamp
   database     : varchar



Some description is in order:

configuration_values say something about the database as a whole.  the uuid ensures that 
realated databases really are related.  The version allows us to detect ad deal with 
schema changes in a transparent(?) way.

parameter_values:
  These define the set of parameters that may appear in event databases.  The lowest/highest
values define the range of values a specific parameter may cover.

runs:
  Relate specific runs to event databases. This gets filled in by the online system.
At creation time, the title and start time are known.  When the run ends, the stop time
is known.  The database if any is set from the online analysis and may represent a subset
of the data from the actual run.


Establishing the experiment database:


Dependent software:
sqlite3, sqlite3tcl
tcllib, libuuid

----------------------------------------------------------------------------------------------

Schema and API for run data:

configuration_values:
  id         : integer primary key
  config_item: name of configuration item.	
  config_value:value of configuration item.

   Defined configuration items:
   version  - schema version.
   uuid     - Experiment uuid
   type     - 'run-data'
   run      - FK to experiment's runs table.

events:
   id      - PK
   trigger - Trigger number.
   param_id- Id of parameter -FK to experiment.parameters.
   value   - Value of the parameter.

NOTE: Later add scaler data support here and in experiment database.


Want to be able to:
- Bulk load  new run data.
- Add new (computed) parameters to run data.
- Attach events to experiment database for use in workspace computatinos.


Spectcl Event database files:

spectcl_events spectcl_events_create(spectcl_experiment exp, int run, path);
spectcl_events spectcl_events_open(spectcl_experiment exp, path)
int            spectcl_events_close(spectcl_events)

Attachment to experiment data bases:

int spectcl_events_attach(spectcl_experiment exp, path, name)
int spectcl_events_detach(name)

int spectcl_events_load(spectcl_experiment exp, size_t nEvents, const pEvent* pData)
int spectcl_events_augment(spectcl_experiment exp, callback)

callback gets a const pEvent as input and must provide a pEvent as output containing
the new values.


Each pEvent as input is gauranteed to contain all of the data so far from only one trigger.

Inquiries: When these come in two flavors.  One to inquire of an independent
           database, the other to inquire of an attached database

int spectcl_events_run(spectcl_events handle)
pRunInfo spectcl_experiment_eventsrun(spectcl_experiment handle, 
	 const char* name)
void spectcl_experiment_free_run_info(pRunInfo p)

int spectcl_events_uuid(spectcl_events handle)


commands:
spectcl::evcreate exphandle run path;    # Returns evhandle
spectcl::evopen   exphandle path;    # returns evhandle
spectcl::evclose  evhandle

spectcl::evattach exphandle path ?name?;  # Name defaults to "Events"

spectcl::evload evhandle data;    Data is list of {trigger param_id value}'s.
spectcl::evaugment evhandle augmentproc

augment proc gets the following parametesr:
  - trigger - Number of trigger being processed.
  - data - list of paramid value (suitable for array set).

must provide  list similar to data as output.

------------------------------------------------------------------------------------------------

Schema and API for the workspace;

configuration_values:  Configuration parameters for this database:
   id          : integar primary key
   config_item : varchar (name of configuration item)
   config_value: varchar (value of configuration item)

   Configuration items currently defined:
    version    - Schema version
    uuid       - UUID of experiment this scheme is part of.
    type       - workspace

spectrum_types :  Types of spectra we support:
    type       : varchar Name of type (primary key)
    description: varchar description of spectrum type. 
   
spectrum_definitions:
   id          : integer primary key
   name        : Spectrum name.
   type_id     : Spectrum type - foreign key into spectrum_types.
   version     : definition version

spectrum_parameters:
   id          : integer primary key.
   spectrum_id : FK to spectrum_definition.
   parameter_id: FK into experiment's parameters table.
   dimension   : Spectrum type dependent dimension number.
   version     : Version of spectrum definition.

condition_types: Types of gatin conditions we support:
   type        : varchar Name of type (primary key)
   description : varchar describes the condition type.

condition_definitions:
   id          : Integer primary key.
   name        : Name of condition.
   type_id     : FK to  condition_types
   version     : version of definition.


condition_elements:  Defines elements of a condition.
   id          : Integer primary key.
   condition_id: FK to condition_definitions.
   type        : Type of element 0 - point, 1 subgate.
   point_x     : x position of point.
   point_y     : y position of point.
   dependent_id: Dependent gate id.
   version     : Version of definition.   
  
spectrum_instances: Instances of spectra:
   id               : Primary key.
   spectrum_id      : Id of spectrum
   spectrum_version : Version of spectrum definition.
   condition_id     : Possibly null condition id applied to spectrum.
   condition_version: Possibly null condition version.
   run_id           : Id of run data used to produce this spectrum.
   run_version      : version of run data used to produce this spectrum.
   last_trigger     : last trigger histogrammed.


spectrum_channels:  Channels of spectra:
   id               : Primary key 
   instance_id      : FK to spectrum_instances
   x                : X channel
   y                : Y channel (could be null),.
   counts           : Number of counts in channel x[,y].

Operations:

int spectcl_workspace_create(spectcl_experiment expdb, const char* path)
  - Creates a new workspace bound to the experiment database open on expdb.
  - The database will be created at path in the file system.
  - This creates the schema for the database as well, stocking it as
    appropriate.

int spectcl_workspace_attach(spectcl_experment expdb, const char* path, const char* at)
  Attaches a spectcl workspace to an experiment database.  If at is NULL a default
  attachment point is chosen (specifically SPECTCL_WORKSPACE).  If not null it
  indicates where the database will be attached e.g
  ATTACH path AS at.

spectcl_workspace spectcl_workspace_open(const char* path)
  Opens a spectcl workspace.  Returnys a database handle to the workspace database
  the handle can be used in subsequent calls to workspace functions.

int spectcl_workspace_close(spectcl_workspace db)
   Closes a database andle to a spectcl_workspace after first validating that
   this is what it is.

int spectcl_workspace_detach(spectcl_experiment expdb, const char* at)
    Detaches a workspace from an experiment. If at is NULL the detach is done
    from SPECTCL_WORKSPACE otherwas at determines what is detached.


Workspace commands:
  wsCreate     exphandle path
  wsAttach     exphandle path ?where?
  wsDetach     exphandle ?where?
  wsOpen       path
  wsClose      wsHandle



Getting info from the configuration_values table:

const char*   spectcl_workspace_version(spectcl_workspace db)
const uuid_t* spectcl_workspace_uuid(spectcl_workspace db)

validations:

int           spectcl_workspace_isWorkspace(spectcl_workspace db)
int           spectcl_workspace_correctExperiment(spectcl_experiment expdb, 
	                                         spectcl_workspace ws)

 wsUuid    wsHandle
 wsVersion wsHandle 

Spectrum Type Api:

 
typedef struct _spectcl_spectrum_type {
	const char* s_type;
	const char* s_typeDescription;
} spectcl_spectrum_type;

spectcl_workspace_free_typelist(spectcl_spectrum_type** typeList);
spectcl_spectrum_types** spectcl_workspace_getTypes(spectcl_workspace ws);
int                      spectcl_workspace_isValidType(spectcl_workspace ws, const char* type);
const char*              spectcl_workspace_getDescription(spectcl_workspace ws, const char* type);

Note that
  - Spectrum types are currently considered immutable.
    The spectrum types table is therefore only there to provide
    a mechanism to implement menus of spectrum types in a 
    GUI.
  - The spectcl_spectrum_types** returned by spectcl_workspace_getTypes 
    are a null terminated array of spectcl_spectrum_type*

wsSpecTypes       wsHandle
wsValidSpecType   wsHandle type-name
wsSpecTypeInfo    wsHandle type-name


Spectrum Definition/List API:

typedef struct {
   char* s_name;
   int         s_dimension;
} spectrum_parameter

int spectcl_workspace_create_spectrum(spectcl_experiment exp, const char* pName,
    							    const spectrum_parameter** pParams,
							    const char* attachPoint);
  returns id on success -1 on failure. spectcl_experiment_errno has errors.  There are two success
  codes:  SPEXP_OK - New spectrum SPEXP_NEWVERSION - existing spectrum created new version.



spectrum_parameter** spectcl_workspace_parameters(spectcl_workspace ws, int id);
void spectcl_workspace_free_spectrum_parameters(spectrum_parameter** p);

typedef struct {
  char*  s_name;
  int    s_version;
  char*  s_timestamp;
  spectrum_paramter** s_parameters;
} spectrum_definition;

void spectcl_workspace_free_spectrum_definitions(spectrum_definition** p);
spectrum_definition** spectcl_workspace_find_spectra(spectcl_workspace ws,
                                                      const char* pattern,
                                                      int         allVersions);
spectrum_definition*  spectcl_workspace_spectrum_properties(spectcl_workspace ws, int id);
   