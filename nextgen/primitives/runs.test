#
#  Tests for the ::spectcl::run command.
#

package require tcltest
load .libs/libSpecTclExperiment.so

namespace import ::tcltest::*


#---------------------------- Tests ---------------------------------
test run_fail1 {Run  requires a subcommand.} \
    -body {
	catch {::spectcl::run}
    } \
    -result 1

test run_fail2 {The run subcommand must be valid} \
    -body {
	catch {::spectcl::run junky-crap}
    } -result 1

test create_fail1 {Run creation requires a database handle} \
    -body {
	catch {::spectcl::run create}
    } -result 1

test create_fail2 {database handle must be valid} \
    -body {
	catch {::spectcl::run create experiment_0}
    } -result 1
test create_fail3 {Create needs a run number} \
     -setup {
	set tmpdir [makeDirectory databases]
	set dbfile [file join $tmpdir test.db]
	set handle [::spectcl::expcreate $dbfile]
    } \
    -cleanup {
	::spectcl::expclose $handle
	file delete $dbfile
	removeDirectory databases
    } \
    -body {
	catch {::spectcl::run create $handle}
    } -result 1

test create_fail4 {Bad switches should fail} \
     -setup {
	set tmpdir [makeDirectory databases]
	set dbfile [file join $tmpdir test.db]
	set handle [::spectcl::expcreate $dbfile]
    } \
    -cleanup {
	::spectcl::expclose $handle
	file delete $dbfile
	removeDirectory databases
    } \
    -body {
	catch {::spectcl::run create $handle 1 test-run -nosuch stuff}
    } -result 1

test create_fail5 {Duplicate run should fail} \
    -setup {
	set tmpdir [makeDirectory databases]
	set dbfile [file join $tmpdir test.db]
	set handle [::spectcl::expcreate $dbfile]
    } \
    -cleanup {
	::spectcl::expclose $handle
	file delete $dbfile
	removeDirectory databases
    } \
    -body {
	::spectcl::run create $handle 1 test-run
	catch {::spectcl::run create $handle 1 should-fail}
    } -result 1

test list_fail1 {The list command requires a database handle} \
    -body {
	catch {::spectcl::run list}
    } -result 1

test create_simple {Creating a minimal run should let me retrieve it} \
     -setup {
	set tmpdir [makeDirectory databases]
	set dbfile [file join $tmpdir test.db]
	set handle [::spectcl::expcreate $dbfile]
    } \
    -cleanup {
	::spectcl::expclose $handle
	file delete $dbfile
	removeDirectory databases
    } \
    -body {
	set sb "{[list 1 [list test-run [clock format [clock seconds] -format {%a %b %e %H:%M:%S %Y}] {}]]}"
	::spectcl::run create $handle 1 test-run
	set result [::spectcl::run list $handle]
	expr $sb eq $result
    } \
    -result 1

test create_withstart {Should be able to assign a start time to the run} \
     -setup {
	set tmpdir [makeDirectory databases]
	set dbfile [file join $tmpdir test.db]
	set handle [::spectcl::expcreate $dbfile]
    } \
    -cleanup {
	::spectcl::expclose $handle
	file delete $dbfile
	removeDirectory databases
    } \
    -body {
	::spectcl::run create $handle 1 test-run -start [clock scan yesterday]
	set result [::spectcl::run list $handle]
    } \
    -result "{[list 1 [list test-run [clock format [clock scan yesterday] -format {%a %b %e %H:%M:%S %Y}] {}]]}"

test create_withend {Should be able to assign an end time too.} \
     -setup {
	set tmpdir [makeDirectory databases]
	set dbfile [file join $tmpdir test.db]
	set handle [::spectcl::expcreate $dbfile]
    } \
    -cleanup {
	::spectcl::expclose $handle
	file delete $dbfile
	removeDirectory databases
    } \
    -body {
	set start [clock scan yesterday]
	set end   [clock scan tomorrow]
	::spectcl::run create $handle 1 test-run -start $start -end $end
	set result [::spectcl::run list $handle]
    } \
    -result "{[list 1 [list test-run [clock format [clock scan yesterday] -format {%a %b %e %H:%M:%S %Y}] [clock format [clock scan tomorrow] -format {%a %b %e %H:%M:%S %Y}]]]}"


test end_fail1 {End command needs handle} \
    -body {
	catch {::spectcl::run end}
    } -result 1

test end_fail2 {End command needs run number} \
     -setup {
	set tmpdir [makeDirectory databases]
	set dbfile [file join $tmpdir test.db]
	set handle [::spectcl::expcreate $dbfile]
    } \
    -cleanup {
	::spectcl::expclose $handle
	file delete $dbfile
	removeDirectory databases
    } \
    -body {
	catch {::spectcl::run end $handle}
    } -result 1

test end_fail3 {Run number supplied but not legal} \
     -setup {
	set tmpdir [makeDirectory databases]
	set dbfile [file join $tmpdir test.db]
	set handle [::spectcl::expcreate $dbfile]
    } \
    -cleanup {
	::spectcl::expclose $handle
	file delete $dbfile
	removeDirectory databases
    } \
    -body {
	catch {::spectcl::run end $handle 1234}
    } -result 1

test end_fail4 {time supplied is not a valid time string} \
     -setup {
	set tmpdir [makeDirectory databases]
	set dbfile [file join $tmpdir test.db]
	set handle [::spectcl::expcreate $dbfile]
    } \
    -cleanup {
	::spectcl::expclose $handle
	file delete $dbfile
	removeDirectory databases
    } \
    -body {
	::spectcl::run create $handle 1 test-run -start [clock scan yesterday]
	catch {::spectcl::run end $handle 1 junk}
    } -result 1

test end_1 {End a run correctly t=now} \
     -setup {
	set tmpdir [makeDirectory databases]
	set dbfile [file join $tmpdir test.db]
	set handle [::spectcl::expcreate $dbfile]
    } \
    -cleanup {
	::spectcl::expclose $handle
	file delete $dbfile
	removeDirectory databases
    } \
    -body {
	::spectcl::run create $handle 1 test-run -start [clock scan yesterday]
	set now [clock seconds]
	::spectcl::run end    $handle 1
	set result [::spectcl::run list $handle]
	set sb  "{[list 1 [list test-run [clock format [clock scan yesterday] -format {%a %b %e %H:%M:%S %Y}] [clock format $now -format {%a %b %e %H:%M:%S %Y}]]]}"
	expr $sb eq $result
    } \
    -result 1


test end_2 {End run with specified time} \
     -setup {
	set tmpdir [makeDirectory databases]
	set dbfile [file join $tmpdir test.db]
	set handle [::spectcl::expcreate $dbfile]
    } \
    -cleanup {
	::spectcl::expclose $handle
	file delete $dbfile
	removeDirectory databases
    } \
    -body {
	::spectcl::run create $handle 1 test-run -start [clock scan yesterday]
	::spectcl::run end    $handle 1 [clock scan tomorrow]
	set result [::spectcl::run list $handle]
	set sb  "{[list 1 [list test-run [clock format [clock scan yesterday] -format {%a %b %e %H:%M:%S %Y}] [clock format [clock scan tomorrow] -format {%a %b %e %H:%M:%S %Y}]]]}"
	expr $sb eq $result
    } \
    -result 1

#---------------------------- reporting ----------------------------

cleanupTests