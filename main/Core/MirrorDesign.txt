Mirroring Shared memory specification/design document.

Purpose and Background:
   The purpose of this SpecTcl component is to provide the capability of
   accessing SpecTcl spectra in a remote system with lower display update latency.
   It is acceptable and probable this will come at a cost of higher data update
   latency (that is the displays will update quickly but the data shown will
   lag somewhat relative to SpecTcl's internal data).
   
   This allows SpecTcl to run in the background under e.g. the experiment
   manager of NSCLDAQ-12 while allowing collaboration members in the experiment
   (not necessarily the same user as the one that started SpecTcl) to view and
   interact with spectrum data created by that SpecTcl.
Approach:
    Maintain mirrors in remote clients of SpecTcl's shared display memory. These
    mirrors will be transparently updated by this software component and an
    API will be provided to transparently set up mirrors as needed.
    For any given SpecTcl, there will be only one mirror in any host. Note
    that this includes the case where a mirror is needed to hoist data
    outside of a persistent container.
    
Specification:
    Several problems must be solved:
    -  Discovery - determination if a mirror already exists in a host and,
       if so, the specifications (name and size) of that memory region).
    -  Creation - Creating the mirror on the client end.
    -  Attach - Clients must be able to attach to the local mirror (read-only).
    -  Maintenance - Code on both the client and SpecTcl end are required to
       maintain the contents of the mirror.
    -  Failure modes.  Either the client or SpecTcl can fail and this must
       be noticed.  Consider.  Suppose a client reboots and this is not noticed
       by the server... When the system comes back up, and a client wants to
       attach to the shared memory, SpecTcl will think there's already a mirror.
       Similarly, mirroring needs to be abandoned by the client if the server
       exits. 
       
Choices:
   Discovery:
      The subsystem server side will maintain a dictionary of connected clients
      (see failure modes)  This dictionary will be accessible via SpecTcl
      commands and those commands will be exposed via a REST service:
         mirror/list[?clients=pattern]
      where the listing is a JSON array of objects. Each object has attributes
      name:  - key of the shared memory region.
      size:  - DisplayMegabytes for the region.
      
    Creation:
       Creation is a client side operation only:
       *  Create the local shared memory region.
       *  Connect to the server.  The connection request supplies the local shared
          memory name and host information.  See maintenance.
    Attach:
       Users of the shared memory mirror use discovery to learn the shared memory
       region name for exsiting regions.
       If there is no existing mirror, one is created as in the above and regardless:
       shmatt is eventually used to gain access to the shared memory region.
    
    Maintenance:
       Setting up a mirror will set up a client program that runs independently
       of local processes attached to the shared memory region. This, coupled with
       discovery as described allows several client programs to attach to a
       single shared memory mirror instance ensuring that data are only tranferred
       once for each SpecTcl mirror.
    
    Failure modes:
       Loss of connection to the SpecTcl mirror service by the client will result in termination
       of mirroring.  Loss of connection to a client by the SpecTcl mirror service
       will result in book keeping that indicates the mirror must be set up again
       to be used.

User API:
   User api will have the following functions:
    -  Get memory - if necessary start mirroring and get a pointer to the shared
       memory
    - isMirroring - determine if mirroring is still active.
    - Unmap - unmap from shared memory.
    

       
   