##
#  Makefile that you can use to build pipeline maker packages.
#
#
#   What this will produce is a shared library
#   and a Tcl package index file that allows you to load
#   the shared library via packgae require
#   assuming the the library and its pkg_Index.tcl
#   file are in auto_path.
#

INSTDIR=@prefix@
INCDIR=@prefix@/include


#  Add the sources you need built here.

SOURCES=Skeleton.cpp

#
#  Add any compilation flags you need here:
#
MYCXXFLAGS=

#
#  Add any link flags you need here:
#

MYLDFLAGS=

##
#  Name of the .so we're buiding note the init
#  function has to track this;  the name here
#  is the one in the skeleton

MYPACKAGELIB=libMyPipelineMaker.so

#  If specific objects have dependencies, put them here
#  No need to put in the compilation rule.
#  e.g.
#    Skeleton.o: Skeleton.cpp MyUnpacker.h

#-------------------------------------------------------
#  Don't modify anything below this line:

SRCS=$(SOURCES)  CPipelineMaker.cpp

OBJECTS=$(SRCS:.cpp=.o)	#Neato trick to build objects from sources.

#  Build the compilation flags from the user flags and
#  what we know we need.

CXXFLAGS=$(MYCXXFLAGS) -I$(INCDIR) @LIBTCLPLUS_CFLAGS@ @TCL_CPPFLAGS@ @ROOT_CFLAGS@ -fPIC

LDFLAGS=$(MYLDFLAGS) -L@libdir@ -lTclGrammerApp \
	@LIBTCLPLUS_LDFLAGS@ @TCL_LIBS@ @ROOT_LDFLAGS@ \
	-Wl,-rpath=@libdir@

#
# This rule builds an object from .cpps.

.cpp.o:
	@CXX@ -c $(CXXFLAGS) $<

$(MYPACKAGELIB): $(OBJECTS)
	@CXX@ -shared -o $(MYPACKAGELIB) $(OBJECTS) $(LDFLAGS)
	echo pkg_mkIndex -verbose . $(MYPACKAGELIB)  | @TCLSH@
