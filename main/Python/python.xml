<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                      "file:///usr/share/xml/docbook/schema/dtd/4.5/docbookx.dtd
"
>
<book>
    <bookinfo>
      <title>SpecTcl Python package</title>
      <author><firstname>Ron</firstname><surname>Fox</surname></author>
      <revhistory>
          <revision>
             <revnumber>1.0</revnumber>
             <date>December 26, 2019</date>
             <authorinitials>RF</authorinitials>
             <revremark>Original Release</revremark>
          </revision>
      </revhistory>
    </bookinfo>
    <chapter>
        <title>Introduction</title>
        <para>
            The Python package allows users of SpecTcl to execute python scripts
            within the SpecTcl program.   The package provides commands
            to execute python scripts from file or inline with other Tcl
            commands.  The package also provides Python-esque wrappings of
            the major SpecTcl objects, allowing you to manipulate spectra,
            parameters, gates, and variables directly from your python scripts.
        </para>
        <para>
            Incorporating the Python package in your SpecTcl run is as simple as
            adding the line:
            <informalexample>
                <programlisting>
package require python
                </programlisting>
            </informalexample>
            to your <filename>SpecTclRC.tcl</filename> script.
        </para>
        <para>
            Note that this both adds the <command>python</command>
            command to your SpecTcl Tcl interpreter and imports the
            <literal>spectcl</literal> Python package into the python interpreter
            that runs that command.  Since the same interpreter is used
            to run all Python commands, packages, variables, objects created
            in one script are fully available to subsequent scripts.
        </para>
    </chapter>
    <chapter>
        <title>The <command>python</command> command.</title>
        <para>
            The <literal>python</literal> package adds a new command to the
            SpecTcl Tcl interpreter:
        </para>
        <refentry>
            <refmeta>
                <refentrytitle>python</refentrytitle>
                <manvolnum>1SpecTcl</manvolnum>
            </refmeta>
            <refnamediv>
                <refname>python</refname>
                <refpurpose>Runs python scripts in SpecTcl</refpurpose>
            </refnamediv>
            <refsynopsisdiv>
                <cmdsynopsis>
                    <command>
package require python
                    </command>
                    <command>
python source <replaceable>filename</replaceable>                        
                    </command>
                    <command>
python exec <replaceable>script</replaceable>
                    </command>
                </cmdsynopsis>                
            </refsynopsisdiv>
            <refsect1>
                <title>DESCRIPTION</title>
                <para>
                    The <command>python</command> command is a Tcl command
                    ensemble that has two subcommands.
                </para>
                <variablelist>
                    <varlistentry>
                        <term><literal>source</literal></term>
                        <listitem>
                            <para>
                                Accepts a filename and executes the python script
                                in that file.  
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><literal>exec</literal></term>
                        <listitem>
                            <para>
                                Accepts a python script and executes that script.
                                Prior to running the script a single variable
                                substitution pass is run over the script.
                                This substitution pass is run regardless of the
                                top level quoting.
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </refsect1>
            <refsect1>
                <title>EXAMPLES</title>
                <example>
                    <title>Running a script file</title>
                    <cmdsynopsis>
                        <command>
python source myscript.py
                        </command>
                    </cmdsynopsis>
                    <para>
                        This example runs a python script that is stored in
                        <filename>myscript.py</filename>
                    </para>
                </example>
                <example>
                    <title>Running an immediate script</title>
                    <cmdsynopsis>
                        <command>
python exec {
print("Hello world from python")
}
                        </command>
                    </cmdsynopsis>
                    <para>
                        This prints the string
                        <literal>Hello world from python</literal>
                        on stdout.  Note that if you are running the
                        <application>TkCon</application> console, the output
                        will not come out there but on the terminal that started
                        SpecTcl.  This is because python is not aware of the
                        Tcl redirection of its <literal>stdout</literal> and
                        <literal>stderr</literal> file descriptors to that console
                        window.
                    </para>
                </example>
                <example>
                    <title>Tcl variable substitution</title>
                    <programlisting>
set spectrumName myspectrum
python exec {
s = spectcl.spectrum('$spectrumName')
print(s.name)
print(s.type)
print(s.parameters)
print(s.axes)

}
                    </programlisting>
                    <para>
                        Creates a python spectrum object that wraps
                        the spectrum named by the Tcl variable
                        <varname>spectrumName</varname> (in this case
                        <literal>myspectrum</literal>).
                        The name, type, parameter list and axis definitions
                        of the spectrum are printed to stdout.
                    </para>
                    <para>
                        Note we needed to quote the variable substitution so
                        that the resulting parameter would be a properly quoted
                        literal string from python's point of view.
                    </para>
                </example>
            </refsect1>
        
        </refentry>
    </chapter>
    <chapter>
        <title>
            The python <literal>spectcl</literal> package
        </title>
        <para>
            The <literal>spectcl</literal> package is automatically imported
            into the python interpreter when the python package is required.
            It provides access to SpecTcl objects in a manner natural
            to python programmers.  
        </para>
        <para>
            The python package provides package level methods as well as python
            types that wrap SpecTcl objects naturally to Python programmers.
        </para>
        <para>
            We'll divide the remainder of this chapter into several sections
            that first describe the module level methods provided and then each
            individual type that's implemented by the <literal>spectcl</literal>
            package.
        </para>
        <section>
            <title>spectcl package level methods.</title>
            <refentry>
                <refmeta>
                    <refentrytitle>tcl</refentrytitle>
                    <manvolnum>3SpecTclPython</manvolnum>
                </refmeta>
                <refnamediv>
                    <refname>tcl</refname>
                    <refpurpose>Run a Tcl script from Python.</refpurpose>
                </refnamediv>
                <refsynopsisdiv>
                    <cmdsynopsis>
                    <command>
package require python
                    </command>
                    <command>
spectcl.tcl(<replaceable>tcl-script</replaceable>)
                    </command>
                    </cmdsynopsis>
                </refsynopsisdiv>
                <refsect1>
                    <title>DESCRIPTION</title>
                    <para>
                        This command runs a Tcl script in the SpecTcl interpreter.
                        If you find that the spectcl package is missing some feature,
                        as a last resort, you can use this command to gain access
                        to that feature in SpecTcl.
                    </para>
                    <para>
                        You can also use this command to gain access to the
                        Tk user interface SpecTcl is running and, with a bit of
                        thought arrange for python scripts to execute in response
                        to user interface actions. (Hint
                        <option>-command</option><literal> [list python exec [list python-script]</literal>)
                        might get you started there.
                    </para>
                </refsect1>
        
            </refentry>
            <refentry>
                <refmeta>
                    <refentrytitle>listparams</refentrytitle>
                    <manvolnum>3SpecTclPython</manvolnum>
                </refmeta>
                <refnamediv>
                    <refname>listparams</refname>
                    <refpurpose>Creates a listing of defined parameters.</refpurpose>
                </refnamediv>
                <refsynopsisdiv>
                    <cmdsynopsis>
                        <command>
spectcl.listparams()                            
                        </command>
                    </cmdsynopsis>                    
                </refsynopsisdiv>
                <refsect1>
                    <title>DESCRIPTION</title>
                    <para>
                        This method returns a tuple containing the names of
                        all SpecTcl commands.
                    </para>
                </refsect1>
                <refsect1>
                    <title>EXAMPLES</title>
                    <example>
                        <title>Listing all parameters to tkcon</title>
                        <programlisting>
python exec {
params = spectcl.listparams()
for p in params:
    script = 'puts "{}"'.format(p)
    spectcl.tcl(script)
}
                        </programlisting>
                        <para>
                            This example gets a tuple containing the names of
                            all defined parameters.  The for loop then
                            generates a Tcl script to output each parameter
                            name in the tuple to tkcon taking advantage of the
                            fact that Tcl's stdout is tkcon.  The scripts
                            are then executed to output the names of the parameters
                            to the console.
                        </para>
                        <para>
                            Note that if the user's <filename>SpecTclRC.tcl</filename>
                            does not start TkCon, this will output to the
                            terminal from which SpecTcl started.
                        </para>
                    </example>
                </refsect1>
            </refentry>
            <refentry>
                <refmeta>
                    <refentrytitle>listspectra</refentrytitle>
                    <manvolnum>3SpecTclPython</manvolnum>
                </refmeta>
                <refnamediv>
                    <refname>listspectra</refname>
                    <refpurpose>Create a list of defined spectrum names.</refpurpose>
                </refnamediv>
                <refsynopsisdiv>
                    <cmdsynopsis>
                        <command>
spectcl.listspectra()
                        </command>
                    </cmdsynopsis>
                </refsynopsisdiv>
                <refsect1>
                    <title>DESCRIPTION</title>
                    <para>
                        This method creates a tuple that contains the list of
                        all defined spectra.  If no spectra are defined, the
                        method returns an empty tuple.
                    </para>
                </refsect1>
            </refentry>
            <refentry>
                <refmeta>
                    <refentrytitle>listvars</refentrytitle>
                    <manvolnum>3SpecTclPython</manvolnum>
                </refmeta>
                <refnamediv>
                    <refname>listvars</refname>
                    <refpurpose>Get a list of tree variables.</refpurpose>
                </refnamediv>
                <refsynopsisdiv>
                    <cmdsynopsis>
                        <command>
spectcl.listvars()
                        </command>
                    </cmdsynopsis>
                </refsynopsisdiv>
                <refsect1>
                    <title>DESCRIPTION</title>
                    <para>
                        This method returns a tuple containing the names of all
                        tree variables that have been defined in SpecTcl.
                        If no tree variables have been defined, the result is an
                        empty tuple.
                    </para>
                </refsect1>
            </refentry>
            <refentry>
                <refmeta>
                    <refentrytitle>listgates</refentrytitle>
                    <manvolnum>3SpecTclPython</manvolnum>
                </refmeta>
                <refnamediv>
                    <refname>listgates</refname>
                    <refpurpose>Create a list of gate names.</refpurpose>
                </refnamediv>
                <refsynopsisdiv>
                    <cmdsynopsis>
                        <command>
spectcl.listgates()
                        </command>
                    </cmdsynopsis>
                </refsynopsisdiv>
                <refsect1>
                    <title>DESCRIPTION</title>
                    <para>
                        This method returns a tuple that contains the list
                        of all gates defined in SpecTcl.  If no gates have
                        been defined, the result is an empty tuple.
                    </para>
                </refsect1>
            </refentry>
            <refentry>
                <refmeta>
                    <refentrytitle>attach</refentrytitle>
                    <manvolnum>3SpecTclPython</manvolnum>
                </refmeta>
                <refnamediv>
                    <refname>attach</refname>
                    <refpurpose>Attach SpecTcl to a data source.</refpurpose>
                </refnamediv>
                <refsynopsisdiv>
                    <cmdsynopsis>
                        <command>
spectcl.attach(
    type=<replaceable>"file"|"pipe"</replaceable>, name=<replaceable>source-spec</replaceable>,
    <optional>...</optional>)
                        </command>
                    </cmdsynopsis>
                </refsynopsisdiv>
                <refsect1>
                    <title>DESCRIPTION</title>
                    <para>
                        This method attaches SpecTcl to a new data source.
                        Data analysis from any prior source is terminated.
                        If successful, it's still necesary to start analysis
                        on the data source.  The method returns
                        <literal>None</literal>
                    </para>
                    <para>
                        The actual operation of the method is determined by
                        entirely by keyword parameters.  No positional parameters
                        are allowed.  With the exception of
                        <option>type</option> and <option>name</option>, all
                        other keywords are options.  Allowed keywords are:
                    </para>
                    <variablelist>
                        <varlistentry>
                            <term><option>type</option></term>
                            <listitem>
                                <para>
                                    The value of this keyword must be a string
                                    that contains either <literal>file</literal>,
                                    if data are to be analyzed from a file,
                                    or <literal>pipe</literal> if data
                                    are analyzed from a pipe program.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><option>name</option></term>
                            <listitem>
                                <para>
                                    The value of this keyword is a string. It's
                                    interpretation depends on the value of
                                    <option>type</option> above.
                                </para>
                                <para>
                                    If <option>type</option><literal>='file'</literal>,
                                    the <option>name</option> value is a path
                                    (absolute or relative) to the file from which
                                    data will be analyzed.
                                </para>
                                <para>
                                    If <option>type</option><literal>='pipe'</literal>
                                    the <option>name</option> value is a program
                                    and its arguments.  The specified program must
                                    output valid data to its stdout. The specified
                                    program's stdout will be connected to a pipe
                                    from which SpecTcl will read data.
                                </para>
                                <para>
                                    Note that pipe data sources are how
                                    SpecTcl takes data from online systems.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><option>size</option></term>
                            <listitem>
                                <para>
                                    The value of this keyword must be an integer.
                                    SpecTcl will read data from its data source
                                    using a buffer with as many bytes as
                                    specified by <option>size</option>.
                                    This keyword is optional and its value
                                    defaults to <literal>8192</literal>.
                                </para>
                                <para>
                                    It is recommended that the size be large enough
                                    to hold several typical events.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><option>format</option></term>
                            <listitem>
                                <para>
                                    The value of this keyword is a
                                    string that specifies
                                    the data format that SpecTcl assumes the
                                    data is in.  The legal values are
                                    <literal>ring10</literal> or
                                    <literal>ring11</literal>.  This keyword is
                                    optional and defaults to <literal>ring11</literal>.
                                </para>
                                <para>
                                    Note that if Spectcl sees ring format items
                                    but <literal>ring10</literal> was specified,
                                    it will override the specification to the
                                    data format specified by the format item.
                                    If the source is online and the run has already
                                    been started, the initial ring format item
                                    will not be seen and the specified format
                                    will be used.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </refsect1>
                <refsect1>
                    <title>EXAMPLES</title>
                    <example>
                        <title>Attaching a file data source</title>
                        <programlisting>
set filename [file normalize [file join ~ stagearea experiment run1 run-0001-00.evt]]
python exec {
spectcl.attach(type='file', name='$filename')
}
                        </programlisting>
                        <para>
                            Note that Tcl is used to generate and normalize
                            the event filename in the stagearea.  The resulting
                            filename is used by the python script as the
                            <option>name</option> for the attach.
                        </para>
                        
                    </example>
                    <example>
                        <title>Taking data from an NSCLDAQ ringbuffer</title>
                        <programlisting>
python exec {
import os
import getpass

daqbin=os.getenv('DAQBIN')
host  =os.getenv('DAQHOST')

program = daqbin + '/ringselector --sample=PHYSICS_EVENT --non-blocking '
user    = getpass.getuser()
uri     = 'tcp://' + host + '/' + user
program = program + '--source=' + uri

spectcl.attach(type='pipe', name=program)
    
}
                        </programlisting>
                        <para>
                            This example assumes thate:
                            <itemizedlist>
                                <listitem>
                                    <para>
                                        The <literal>DAQBIN</literal> environment
                                        variable points at a valid bin
                                        subdirectory of an NSCLDAQ installation.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        The environment variable
                                        <literal>DAQHOST</literal> contains the name
                                        of the system on which the ringbuffer
                                        from which we want data lives.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        We want to take data from the default
                                        ringbuffer (the logged in username) from
                                        that host.
                                    </para>
                                    <para>
                                        Note that the combination of
                                        <option>--sample</option> and
                                        <option>--non-blocking</option> on the
                                        <command>ringselector</command> command
                                        ensure that SpecTcl will not determine
                                        the maximum data taking rate.
                                    </para>
                                </listitem>
                            </itemizedlist>
                        </para>
                    </example>
                    <example>
                        <title>Reading data from a gzipped event file</title>
                        <programlisting>
set filename [file normalize [file join ~ stagearea experiment run1 run-0001-00.evt.gz]]
python exec {
program = 'zcat $filename'
spectcl.attach(type='pipe', name=program)    
}
                        </programlisting>
                        <para>
                            The output of zcat, the uncompressed event file,
                            is attached via a pipe to SpecTcl.  As in the
                            first example, we use Tcl to generate the filename.
                            We could equally well have done this using
                            <methodname>os.path.join</methodname> and
                            <methodname>os.path.abspath</methodname>
                            completely in the python script.
                        </para>
                    </example>
                </refsect1>
            </refentry>
            <refentry>
                <refmeta>
                    <refentrytitle>start</refentrytitle>
                    <manvolnum>3SpecTclPython</manvolnum>
                </refmeta>
                <refnamediv>
                    <refname>start</refname>
                    <refpurpose>Start analyzing data.</refpurpose>
                </refnamediv>
                <refsynopsisdiv>
                    <cmdsynopsis>
                        <command>
spectcl.start()
                        </command>
                    </cmdsynopsis>
                </refsynopsisdiv>
                <refsect1>
                    <title>DESCRIPTION</title>
                    <para>
                        Starts taking data from the current event source.
                        The current event source is determined by the
                        last call to <methodname>spectcl.attach()</methodname>,
                        or the last Tcl <command>attach</command> command,
                        whichever was more recent.
                    </para>
                    <para>
                        To allow Tcl scripts to be aware of the change in state,
                        the Tcl global variable <varname>RunState</varname> is
                        set to 1 as it is for the Tcl <command>start</command>
                        command.
                    </para>
                    <para>
                        If analysis is active, this method does nothing.
                    </para>
                </refsect1>
            
            </refentry>
            <refentry>
                <refmeta>
                    <refentrytitle>stop</refentrytitle>
                    <manvolnum>3SpecTclPython</manvolnum>
                </refmeta>
                <refnamediv>
                    <refname>stop</refname>
                    <refpurpose>Stop data analysis</refpurpose>
                </refnamediv>
                <refsynopsisdiv>
                    <cmdsynopsis><command>
spectcl.stop()
                    </command></cmdsynopsis>
                </refsynopsisdiv>
                <refsect1>
                    <title>DESCRIPTION</title>
                    <para>
                        This method stops data analysis from the current
                        data source.  If data analysis is stopped,
                        this method does nothing.  If data analysis are stopped,
                        the Tcl global variable <varname>RunState</varname> is
                        set to 0 as it is for the Tcl <command>stop</command>
                        command.
                    </para>
                </refsect1>
            
            </refentry>
            
        </section>
        <section>
            <title>The spectcl.parameter type</title>
            <para>
                The <classname>spectcl.parameter</classname> data type
                is a wrapping of both SpecTcl parameters and treeparameters
                that wrap it.  It allows you to bind to an existing
                tree parameter and to create new tree parameters that may
                bind to exising parameters or even create new parameters
                (although doing this after your analysis pipeline is setup is
                probably not that useful).
            </para>
            <refentry>
                <refmeta>
                    <refentrytitle>parameter</refentrytitle>
                    <manvolnum>3SpecTclPython</manvolnum>
                </refmeta>
                <refnamediv>
                    <refname>parameter</refname>
                    <refpurpose>Wrap SpecTcl parameter/treeparameters</refpurpose>
                </refnamediv>
                <refsynopsisdiv>
                    <programlisting>

existing = spectcl.treeparameter(name)
new      = spetcl.treeparameter(name, low, high, bins, units)

existing.name()
existing.getbins()
existing.getlow()
existing.gethigh()
existing.getunits()
existing.check()

existing.reset()
existing.markchanged()

existing.setbins(newbins)
existing.setlow(newlow)
existing.sethigh(newhigh)
existing.setunits(newunits)

                    </programlisting>
                </refsynopsisdiv>
                <refsect1>
                    <title>DESCRIPTION</title>
                    <para>
                        SpecTcl has raw parameters which can be wrapped by
                        tree parameters.  Tree parameters add metadata to the
                        raw parameters that:
                        <itemizedlist>
                            <listitem>
                                <para>
                                    Recommend spectrum axis limits and binnint
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    Document parameter units of measure.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                    <para>
                        If you attempt to construct a parameter object supplying
                        only the parameter name, that parameter must exist
                        and have a tree parameter wrapping it.  The object
                        is then constructed bound to the existing tree parameter.
                        If these conditions are not satisified, construction
                        will raise a LookupError exception
                    </para>
                    <para>
                        If, on the other hand you supply, in order the name,
                        bins, low, and high limits and unit string; A new
                        tree parameter will be created with those values.
                        The tree parameter will be created with the parameters
                        provided.  If the name refers to an existing SpecTcl raw
                        parameter, the tree parameter will be bound to that
                        raw parameter.  If not a free parameter slot number
                        will be created and bound to that parameter name.
                        (This can be useful for setting up parameters in a SpecTcl
                        with dynamic event processing pipelines).
                    </para>
                    <para>
                        Note that SpecTcl tree parameters provide a mapping
                        from name to a common attribute block which includes
                        metadata and a mapping to the raw SpecTcl parameter.
                        This means that if you create a new tree parameter but
                        the name you use already exists, your metadata will
                        override the metadata for all other tree parameters with
                        that name.  This is one way to redefine all treeparameter
                        metadata for an existing parameter in one call.
                    </para>
                </refsect1>
                <refsect1>
                    <title>METHODS</title>
                    <para>
                        The type provides several methods.  Note that in the future
                        some of these methods may be supplemented by getter/setters,
                        making it look like you are directly accessing the logical
                        attributes of the tree parameter object.
                    </para>
                    <variablelist>
                        <varlistentry>
                            <term><methodname>name</methodname></term>
                            <listitem>
                                <para>
                                    Returns the name of the parameter.
                                </para>
                            </listitem>
                        </varlistentry>    
                        <varlistentry>
                            <term>getbins</term>
                            <listitem>
                                <para>
                                    Returns the integer number of recommended
                                    bins for a spectrum axis that is defined
                                    on this parameter.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>getlow</term>
                            <listitem>
                                <para>
                                    Returns the floating point recommended low
                                    limit for an axis that is defined on this
                                    parameter.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>gethigh</term>
                            <listitem>
                                <para>
                                    Returns the floating piont recommended high
                                     limit for an axis that is defined on this
                                     parameter.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>getunits</term>
                            <listitem>
                                <para>
                                    Returns a string containing the units of
                                    measure for the parameter.  This can be
                                    an empty string, for example, if the
                                    parameter is unit-less.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>check</term>
                            <listitem>
                                <para>
                                    Returns true if the tree parameter has been
                                    modified since its definition or the last
                                    <methodname>reset</methodname> call otherwise
                                    returns false.
                                    The use case for this is to determine
                                    which tree parameter definitions must be
                                    written to file to minimally save the
                                    program state.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>reset</term>
                            <listitem>
                                <para>
                                    Resets the modification flag that's returned
                                    by <methodname>check</methodname>.
                                    Returns <literal>None</literal>.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>markchanged</term>
                            <listitem>
                                <para>
                                    Sets the modification flag that's
                                    returned by <methodname>chaeck</methodname>.
                                    Returns <literal>None</literal>.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <methodsynopsis language='python'>
                                    <modifier></modifier>
                                    <type>spectcl.parameter</type>
                                    <methodname>setbins</methodname>
                                    <methodparam>
                                        <type>integer </type><parameter>newbins</parameter>
                                    </methodparam>
                                    <modifier></modifier>
                                </methodsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Sets a new value for the number of bins
                                    recommended on a spectrum axis defined on this
                                    tree parameter.  Returns self to support method
                                    chaining.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <methodsynopsis language='python'>
                                    <modifier></modifier>
                                    <type>spectcl.parameter</type>
                                    <methodname>setlow</methodname>
                                    <methodparam>
                                        <type>float </type><parameter>newlow</parameter>
                                    </methodparam>
                                    <modifier></modifier>
                                </methodsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Sets the new value for the recommended low
                                    limit on axes defined on this parameter.
                                    Returns self to support method chaining.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <methodsynopsis language='python'>
                                    <modifier></modifier>
                                    <type>spectcl.parameter</type>
                                    <methodname>sethigh</methodname>
                                    <methodparam>
                                        <type>float </type><parameter>newhigh</parameter>
                                    </methodparam>
                                    <modifier></modifier>
                                </methodsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Sets the new value for the recommended high
                                    limit on axes defined by this parameter.
                                    Returns self to support method chaining.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <methodsynopsis language='python'>
                                    <modifier></modifier>
                                    <type>spectcl.parameter</type>
                                    <methodname>setunits</methodname>
                                    <methodparam>
                                        <type>string </type><parameter>newunits</parameter>
                                    </methodparam>
                                    <modifier></modifier>
                                </methodsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Sets the new units of measure for a parameter.
                                    Returns self to support parameter chaining
                                </para>
                            </listitem>
                        </varlistentry>
                        

                    </variablelist>
                </refsect1>
            
            </refentry>
        </section>
        <section>
            <title>The spectcl.spectrum type</title>
            <para>
                This type wraps a SpecTcl Spectrum.  It can be used to
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        Access and manipulated an existing spectrum.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Create new spectra and manipulate them.
                    </para>
                </listitem>
            </itemizedlist>
            <refentry>
                <refmeta>
                    <refentrytitle>spectrum</refentrytitle>
                    <manvolnum>3SpecTclPython</manvolnum>
                </refmeta>
                <refnamediv>
                    <refname>spectrum</refname>
                    <refpurpose>Wrap SpecTcl Spectrum objects.</refpurpose>
                </refnamediv>
                <refsynopsisdiv>
                    <synopsis>
                        <classname>class spectcl.spectrum:</classname>
                        
                        #  Member Attributes:
                        
                        <fieldsynopsis >
                            <modifier>readonly</modifier><type>string</type>
                            <varname>name</varname>
                        </fieldsynopsis>
                        <fieldsynopsis >
                            <modifier>readonly</modifier><type>string</type>
                            <varname>type</varname>
                        </fieldsynopsis>
                        <fieldsynopsis >
                            <modifier>readonly</modifier><type>tuple of strings</type>
                            <varname>parameters</varname>
                        </fieldsynopsis>
                        <fieldsynopsis >
                            <modifier>readonly</modifier><type>tuple of dicts</type>
                            <varname>axes</varname>
                        </fieldsynopsis>
                        <fieldsynopsis >
                            <modifier>readonly</modifier><type>string</type>
                            <varname>gatename</varname>
                        </fieldsynopsis>
                        <fieldsynopsis >
                            <modifier>readonly</modifier><type>dict of tuples</type>
                            <varname>range_errors</varname>
                        </fieldsynopsis>
                        
                        # Methods
                        
                        <methodsynopsis language='python'>
                            <modifier></modifier>
                            <type>None</type>
                            <methodname>clear</methodname>
                            <void />
                            <modifier></modifier>
                        </methodsynopsis>
                        <methodsynopsis language='python'>
                            <modifier></modifier>
                            <type>None</type>
                            <methodname>ungate</methodname>
                            <void />
                            <modifier></modifier>
                        </methodsynopsis>
                        <methodsynopsis language='python'>
                            <modifier></modifier>
                            <type>None</type>
                            <methodname>gate</methodname>
                            <methodparam>
                                <type>string </type><parameter>gatename</parameter>
                            </methodparam>
                            <modifier></modifier>
                        </methodsynopsis>
                        <methodsynopsis language='python'>
                            <modifier></modifier>
                            <type>None</type>
                            <methodname>bind</methodname>
                            <void />
                            <modifier></modifier>
                        </methodsynopsis>
                        <methodsynopsis language='python'>
                            <modifier></modifier>
                            <type>None</type>
                            <methodname>unbind</methodname>
                            <void />
                            <modifier></modifier>
                        </methodsynopsis>
                        <methodsynopsis language='python'>
                            <modifier></modifier>
                            <type>integer </type>
                            <methodname>Get</methodname>
                            <methodparam>
                                <type>container of integers </type>
                                <parameter>coordinates</parameter>
                            </methodparam>
                            <modifier></modifier>
                        </methodsynopsis>
                        <methodsynopsis language='python'>
                            <modifier></modifier>
                            <type>None</type>
                            <methodname>Set</methodname>
                            <methodparam>
                                <type>container of integers </type>
                                <parameter>coordinates</parameter>
                            </methodparam>
                            <methodparam>
                                <type>unsigned integer </type><parameter>value</parameter>
                            </methodparam>
                            <modifier></modifier>
                        </methodsynopsis>
                        <methodsynopsis language='python'>
                            <modifier></modifier>
                            <type>string</type>
                            <methodname>project</methodname>
                            <methodparam>
                                <type>string </type><parameter>new-name</parameter>
                            </methodparam>
                            
                            <methodparam>
                                <type>string </type><parameter>direction</parameter>
                            </methodparam>
                            <methodparam>
                                <type>snapshot=bool </type><parameter>True|False</parameter>
                            </methodparam>
                            <methodparam>
                                <type>contour=string</type><parameter>name</parameter>
                            </methodparam>
                        </methodsynopsis>
                    </synopsis>
                </refsynopsisdiv>
                <refsect1>
                    <title>DESCRIPTION</title>
                    <para>
                        This type wraps SpectTcl spectra.  Two types of construtors
                        are allowed.  The first constructor takes a single
                        parameter, the name of an existing spectrum.
                        If that spectrum exists, the object is created to wrap
                        that spectrum.  If the spectrum does not exist,
                        a <literal>LookupError</literal> exception will be
                        raised.
                    </para>
                    <para>
                        The second type of construtcor accepts four positional
                        parameters.  The first parameter is the name of an ew
                        spectrum.  The second is the type string.  See
                        the SpecTcl Tcl <command>spectrum</command> comand
                        reference for the legal spectrum types.  The third parameter
                        is any iterable container that contains strings. The
                        strings are the names of the parameter that are required
                        by the spectrum.  Their number and interpretation will vary
                        depending on the spectrum type.  The last parameter
                        is an iterable container of dict that define the axes
                        of the spectrum.  Each dict defines an
                        axis and has the following keys:
                    </para>
                    <variablelist>
                        <varlistentry>
                            <term><literal>low</literal></term>
                            <listitem>
                                <para>
                                    The axis low limit.  This is an inclusive limit.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>high</literal></term>
                            <listitem>
                                <para>
                                    The axis high limit.  This is an exclusive limit.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><literal>bins</literal></term>
                            <listitem>
                                <para>
                                    The number of spectrum bins on that axis.
                                </para>
                                 <para>
                                    Note that in genaral there will be
                                    one or two axis definitions,
                                    depending on the spectrum type.
                                </para>
                            </listitem>
                        </varlistentry>

                    </variablelist>
                </refsect1>
                <refsect1>
                    <title>INSTANCE ATTRIBUTES</title>
                    <para>
                        Spectrum objects have several attributes.  These attributes
                        are reaonly.  They provide information about the
                        spectrum definition:
                    </para>
                    <variablelist>
                        <varlistentry>
                            <term><varname>name</varname></term>
                            <listitem>
                                <para>
                                    Is a string that contains the spectrum
                                    name.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><varname>type</varname></term>
                            <listitem>
                                <para>
                                    Is a string that contains the spectrum type.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><varname>parameters</varname></term>
                            <listitem>
                                <para>
                                    Is a tuple of strings that are the ordered
                                    set of parameters the spectrum is defined on.
                                    The number and interpretation of these
                                    parameters depends on the spectrum type.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><varname>axes</varname></term>
                            <listitem>
                                <para>
                                    Is a tuple of axes.  Each axis is a dict
                                    described in the <literal>DESCRIPTION</literal>
                                    section.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><varname>gatename</varname></term>
                            <listitem>
                                <para>
                                    The name of the gate that's applied to the
                                    spectrum.   If a spectrum is ungated, this will
                                    be the string <literal>-TRUE-</literal>
                                    indicating that ther are no conditions on the
                                    increment of a spectrum.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><varname>range_errors</varname></term>
                            <listitem>
                                <para>
                                    The overflow and underflow counters.
                                    This is a dict with two keys
                                    <literal>underflows</literal> and
                                    <literal>overflows</literal>.  Each
                                    value is a tuple of counter values.
                                    For one-dimensional spectrum types,
                                    the tuple has a single element.  
                                </para>
                                <para>
                                    For
                                    two dimensional spetctrum types, there
                                    two elements that contain the X and Y
                                    range error counters in that order.  
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </refsect1>
                <refsect1>
                    <title>METHODS</title>
                    <variablelist>
                        <varlistentry>
                            <term>
                                <methodsynopsis language='python'>
                                    <modifier></modifier>
                                    <type>None</type>
                                    <methodname>clear</methodname>
                                    <void />
                                    <modifier></modifier>
                                </methodsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Clears the contents of the spectrum.
                                    All spectrum channels are set to zero.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <methodsynopsis language='python'>
                                    <modifier></modifier>
                                    <type>None</type>
                                    <methodname>ungate</methodname>
                                    <void />
                                    <modifier></modifier>
                                </methodsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Removes any gate from the spectrum.  After
                                    this method there are no conditions on the
                                    increment of the spectrum other than it can
                                    be incremented as a result of the event.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <methodsynopsis language='python'>
                                    <modifier></modifier>
                                    <type>None</type>
                                    <methodname>gate</methodname>
                                    <methodparam>
                                        <type>string </type><parameter>gatename</parameter>
                                    </methodparam>
                                    <modifier></modifier>
                                </methodsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Applies the gate <parameter>gatename</parameter>
                                    to the spectrum.  If <parameter>gatename</parameter>
                                    does not exist, <literal>RuntimeError</literal>
                                    is raised.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <methodsynopsis language='python'>
                                    <modifier></modifier>
                                    <type>None</type>
                                    <methodname>bind</methodname>
                                    <void />
                                    <modifier></modifier>
                                </methodsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Binds the spectrum into the displayer.
                                    SpecTcl provides shared memory access to
                                    a set of <firstterm>bound</firstterm>
                                    spectra to local display clients.
                                    This method adds the spectrum to the set
                                    of bound spectra.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <methodsynopsis language='python'>
                                    <modifier></modifier>
                                    <type>None</type>
                                    <methodname>unbind</methodname>
                                    <void />
                                    <modifier></modifier>
                                </methodsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Unbinds the spectrum from displayers.
                                    See <methodname>bind</methodname>
                                    above.  This method removes the spectrum
                                    from the set of spectra that are bound.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <methodsynopsis language='python'>
                                    <modifier></modifier>
                                    <type>integer </type>
                                    <methodname>Get</methodname>
                                    <methodparam>
                                        <type>container of integers </type>
                                        <parameter>coordinates</parameter>
                                    </methodparam>
                                    <modifier></modifier>
                                </methodsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Returns the value in a channel of the
                                    spectrum.  The <parameter>coordinates</parameter>
                                    parameter is any object that supports the
                                    iteration protocol.  It must have as many
                                    elements as the dimension of the spectrum.
                                    The first element is the x channel number or
                                    just channel number for 1-d spectra.  The
                                    second element is the y channel number for
                                    spectra with two dimensions
                                </para>
                                <para>
                                    Note that these coordinates are channel
                                    coordinates (bins) not axis coordinates.
                                    If you have axis coordinates, it's your
                                    responsibility to map them to a bin.
                                </para>
                            </listitem>
                        </varlistentry>        
                        <varlistentry>
                            <term>
                                <methodsynopsis language='python'>
                                    <modifier></modifier>
                                    <type>None</type>
                                    <methodname>Set</methodname>
                                    <methodparam>
                                        <type>container of integers </type>
                                        <parameter>coordinates</parameter>
                                    </methodparam>
                                    <methodparam>
                                        <type>unsigned integer </type><parameter>value</parameter>
                                    </methodparam>
                                    <modifier></modifier>
                                </methodsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Sets the channel specified by
                                    <parameter>coordinates</parameter> to
                                    <parameter>value</parameter>.  The
                                    <parameter>coordinates</parameter> parameter
                                    has the same form as for <methodname>Get</methodname>
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <methodsynopsis language='python'>
                                    <modifier></modifier>
                                    <type>string</type>
                                    <methodname>project</methodname>
                                    <methodparam>
                                        <type>string </type><parameter>new-name</parameter>
                                    </methodparam>
                                    
                                    <methodparam>
                                        <type>string </type><parameter>direction</parameter>
                                    </methodparam>
                                    <methodparam>
                                        <type>snapshot=bool </type><parameter>True|False</parameter>
                                    </methodparam>
                                    <methodparam>
                                        <type>contour=string</type><parameter>name</parameter>
                                    </methodparam>
                                </methodsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Creates a new spectrum that is a projection
                                    of the spectrum.
                                    <parameter>new-name</parameter> is the name of the
                                    new spectrum.  <parameter>direction</parameter>
                                    must be either <literal>x</literal>
                                    or <literal>y</literal> and specifies the
                                    projection direction.
                                </para>
                                <para>
                                    Subsequent parmeters are optional and must be
                                    specified by keyword/value pairs:
                                </para>
                                <variablelist>
                                    <varlistentry>
                                        <term><literal>snapshot</literal></term>
                                        <listitem>
                                            <para>
                                                Takes a boolean value.  If
                                                <literal>True</literal>, thes
                                                pectrum is a snapshot and will
                                                never be incremented.  If
                                                <literal>False</literal>,
                                                a best effort will be made to
                                                connect the spectrum with its
                                                underlying parameters so that it
                                                can be incremented as new events
                                                become available.
                                            </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                        <term><literal>contour</literal></term>
                                        <listitem>
                                            <para>
                                                Takes a string value that is the
                                                name of a contour gate.
                                                The gate must be visible on the
                                                spectrum.
                                            </para>
                                            <para>
                                                
                                                If
                                                supplied the initial projection
                                                will only contain points inside
                                                the contour.   If the spectrum
                                                is not a snapshot, the gate is
                                                applied to this spectrum as well
                                                to ensure that the projection is
                                                remains a faithflu projection
                                                of the data inside the contour.
                                            </para>
                                        </listitem>
                                    </varlistentry>
                                </variablelist>
                                <para>
                                    The return value is the actual name of the
                                    spectrum (which might be different than the
                                    requestsed name to prevent duplication).
                                </para>
                            </listitem>
                        </varlistentry>                                      
                    </variablelist>
                </refsect1>
                
            </refentry>
        </section>
        <section>
            <title>The spectcl.variable type</title>
            <para>
                Objects of this type encapsulate a treevariable.  Treevariables
                are objects that have a value and units of measure.
                The value is available to event processors and can be used
                in computing derived parameters.
            </para>
            <para>
                SpecTcl does not suport  dynamic treevariable creation.
                As such, spectcl.variable objects can only wrap
                existing tree variables.
            </para>
            <refentry>
                <refmeta>
                    <refentrytitle>variable</refentrytitle>
                    <manvolnum>3SpecTclPython</manvolnum>
                </refmeta>
                <refnamediv>
                    <refname>variable</refname>
                    <refpurpose>Wrapper for SpecTcl tree variable objects.</refpurpose>
                </refnamediv>
                <refsynopsisdiv>
                    <synopsis>
<classname>class spectcl.variable:</classname>

    # Instance variables 
    
    <fieldsynopsis>
        <modifier>readonly</modifier><type>string </type><varname>name</varname>
    </fieldsynopsis>
    <fieldsynopsis>
        <modifier>read/write</modifier> <type>double </type><varname>value</varname>
    </fieldsynopsis>
    <fieldsynopsis>
        <modifier>read/write</modifier><type>string </type><varname>units</varname>
    </fieldsynopsis>
    
    # Methods:
    
    <methodsynopsis language='python'>
        <modifier></modifier>
        <type>boolean </type>
        <methodname>valchanged</methodname>
        <void />
        <modifier></modifier>
    </methodsynopsis>
    <methodsynopsis language='python'>
        <modifier></modifier>
        <type>boolean</type>
        <methodname>defchanged</methodname>
        <void />
        <modifier></modifier>
    </methodsynopsis>
    <methodsynopsis language='python'>
        <modifier></modifier>
        <type>None</type>
        <methodname>reset</methodname>
        <void />
        <modifier></modifier>
    </methodsynopsis>
    <methodsynopsis language='python'>
        <modifier></modifier>
        <type>None</type>
        <methodname>fireTraces</methodname>
        <void />
        <modifier></modifier>
    </methodsynopsis>
                    </synopsis>
                </refsynopsisdiv>
                <refsect1>
                    <title>DESCRIPTION</title>
                    <para>
                        Tree parameter objects have one constructor form that
                        takes a single positional parameter. This parameter
                        is a string that contains the name of an existing
                        treeparameter.  
                    </para>
                </refsect1>
                <refsect1>
                    <title>ATTRIBUTES</title>
                    <para>
                        In addition to being able to retrieve the name of the
                        parameter, you can use the object attributes
                        to set the value and units of a treevariable.
                    </para>
                    <para>
                        Attributes are:
                    </para>
                    <variablelist>
                        <varlistentry>
                            <term>
                                <fieldsynopsis>
                                    <modifier>readonly</modifier><type>string </type><varname>name</varname>
                                </fieldsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    This attribute contains the name of the
                                    tree variable.  It cannot be written.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <fieldsynopsis>
                                    <modifier>read/write</modifier> <type>double </type><varname>value</varname>
                                </fieldsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Gets or sets the tree variable value.
                                </para>
                            </listitem>
                        </varlistentry>                                
                        <varlistentry>
                            <term>
                                <fieldsynopsis>
                                    <modifier>read/write</modifier><type>string </type><varname>units</varname>
                                </fieldsynopsis>   
                            </term>
                            <listitem>
                                <para>
                                    Gets or sets the units of measure associated
                                    with this tree variable.
                                </para>
                            </listitem>
                        </varlistentry>
                                                     
                    </variablelist>
                </refsect1>
                <refsect1>
                    <title>METHODS</title>
                    <variablelist>
                        <varlistentry>
                            <term>
                                <methodsynopsis language='python'>
                                    <modifier></modifier>
                                    <type>boolean </type>
                                    <methodname>valchanged</methodname>
                                    <void />
                                    <modifier></modifier>
                                </methodsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Returns the value changed flag.
                                    This is set once the value has been changed
                                    from the initial value set at compilation time.
                                    The normal use for this method is to determine
                                    if the tree variable must be saved in order
                                    to be able to restore the current state of
                                    SpecTclfrom file.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <methodsynopsis language='python'>
                                    <modifier></modifier>
                                    <type>boolean</type>
                                    <methodname>defchanged</methodname>
                                    <void />
                                    <modifier></modifier>
                                </methodsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Returns the definition changed flag.
                                    This is <literal>True</literal> if the
                                    units have changed.  The major use for this
                                    is to determine if the variable must be saved
                                     in order for the SpecTcl state to be
                                     restored from file.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <methodsynopsis language='python'>
                                    <modifier></modifier>
                                    <type>None</type>
                                    <methodname>reset</methodname>
                                    <void />
                                    <modifier></modifier>
                                </methodsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Resets the flag returned from
                                    <methodname>defchanged</methodname>
                                </para>
                            </listitem>
                        </varlistentry>    
                        <varlistentry>
                            <term>
                                <methodsynopsis language='python'>
                                    <modifier></modifier>
                                    <type>None</type>
                                    <methodname>fireTraces</methodname>
                                    <void />
                                    <modifier></modifier>
                                </methodsynopsis>                        
                            </term>
                            <listitem>
                                <para>
                                    The value of tree variables are mapped to
                                    Tcl variables of the same name.  These
                                    in turn may be used as GUI elements or
                                    explicit traces may be set on them in the
                                    user's Tcl code.
                                </para>
                                <para>
                                    Calling this method fires any pending
                                    traces for the variable.  Firing the
                                    traces on a variable also resets its
                                    value changed flag.
                                </para>
                            </listitem>
                        </varlistentry>
                                
                    </variablelist>
                </refsect1>
            </refentry>
        </section>
        <section>
            <title> The spectcl.gates type</title>
            <para>
                SpecTcl supports a rich set of conditions that can be combined in
                arbitrary ways and then used to conditionalize spectrum increments.
                The spectcl.gates type encapsulates these gates.  You can
                wrap an existing gate, create new gates and, once you have a
                gate wrapping you can modify the gate itself.
            </para>
            <para>
                Getters allow readonly access to gate attributes.
            </para>
            <para>
                Before providing reference material, it's important to understand
                how gates are stored in SpecTcl in a manner that maintains
                a coherent view to all clients in an inexpensive manner.
                Gates are a two part object.  Firstly, there's the gate itself,
                which can be any of a number of differnt types of gate.
                Next there's a gate container that has the gate name and a pointer
                to the gate itself.
            </para>
            <para>
                When a gate is modified, its container is unmodified but the
                gate the container holds changes.  This implies that if you have
                a handle (pointer) to the gate container, the definition of the
                gate can change out from underneath you without requiring any
                action to update your idea of the gate.
            </para>
            <para>
                This is analagous to the way in which tree parameters map several
                parameters with the same name to the same underlying set of
                metadata and same parameter.  
            </para>
            <para>
                spectcl.gates objects, therefore don't directly wrap gates but,
                instead wrap a gate container object.  Thus if the gate is
                modified (even if the type of gate is changed), the
                object is updated without requiring any action on the part of
                the wrapper or you.  Similarly, several objects can be instantiated
                that wrap the same gate (container) and all will maintain a
                consistent view of the actual gate through their handles to its
                gate container.
            </para>
            <refentry>
                <refmeta>
                    <refentrytitle>gate</refentrytitle>
                    <manvolnum>3SpecTclPython</manvolnum>
                </refmeta>
                <refnamediv>
                    <refname>gate</refname>
                    <refpurpose>Wraps a gate via its gate container.</refpurpose>
                </refnamediv>
                <refsynopsisdiv>
                    <synopsis>
<classname>spectcl.gate:</classname>
    
    # Attributes
    <fieldsynopsis>
        <modifier>readonly</modifier><type>string </type><varname>name</varname>
    </fieldsynopsis>
    <fieldsynopsis>
        <modifier>readonly</modifier><type>string </type><varname>type</varname>
    </fieldsynopsis>
    <fieldsynopsis>
        <modifier>readonly</modifier><type>tuple of strings </type>
        <varname>parameters</varname>
    </fieldsynopsis>
    <fieldsynopsis>
        <modifier>readonly</modifier><type>tuple of strings </type>
        <varname>gates</varname>
    </fieldsynopsis>
    <fieldsynopsis>
        <modifier>readonly</modifier><type>float </type><varname>low</varname>
    </fieldsynopsis>
    <fieldsynopsis>
        <modifier>readonly</modifier><type>float </type><varname>high</varname>
    </fieldsynopsis>
    <fieldsynopsis>
        <modifier>readonly</modifier><type>tuple of dicts </type>
        <varname>points</varname>
    </fieldsynopsis>
    <fieldsynopsis>
        <modifier>readonly</modifier><type>integer </type><varname>mask</varname>
    </fieldsynopsis>
    
    # methods - see the method documentation  There's better formatting there.
    
    <methodsynopsis language='python'>
        <modifier></modifier>
        <type>None</type>
        <methodname>change</methodname>
        <methodparam>
            <type>string </type><parameter>type=gate-type</parameter>
            <modifier>Required</modifier>
        </methodparam>
        <methodparam>
            <type>tuple of strings </type><parameter>parameters=parameter-names</parameter>
            <modifier>Gate type dependent</modifier>
        </methodparam>
        <methodparam>
            <type>tuple of strings </type><parameter>gates=gate-names</parameter>
            <modifier>Gate type dependent</modifier>
        </methodparam>
        <methodparam>
            <type>tuple of point dicts </type><parameter> points=points</parameter>
            <modifier>Gate type dependent</modifier>
        </methodparam>
        <methodparam>
            <type>float </type><parameter>low=low-limit</parameter>
            <modifier>Gate type dependent</modifier>
        </methodparam>
        <methodparam>
            <type>float </type><parameter>high=high-limit</parameter>
            <modifier>Gate type dependent</modifier>
        </methodparam>
        <methodparam>
            <type>integer </type><parameter>mask=bit-mask</parameter>
            <modifier>Gate type dependent</modifier>
        </methodparam>
        <modifier></modifier>
    </methodsynopsis>
    
                    </synopsis>
                </refsynopsisdiv>
                <refsect1>
                    <title>DESCRIPTION</title>
                    <para>
                        Wraps a gate container which, in turn wraps a SpecTcl
                        gate.  There are two constructor styles.  The first
                        style creates a wrapper for an existing gate.  That
                        constructor only takes a single positional parameter,
                        the name of an existing gate to wrap.  If this form
                        of the constructor is used but a non-existent gate
                        is supplied <classname>LookupError</classname>  is
                        raised.  Note that the Tcl gate deletion operation
                        does not actually destroy the gate but makes it into a
                        False gate.  This implies it's possible to wrap a
                        deleted gate.
                    </para>
                    <para>
                        The second style creates and wraps a new gate. The
                        only positional parameter is the gate name.  If this
                        matches an existing gate, an error message will result.
                        To modify a gate, wrap the existing gate and invoke the
                        <methodname>change</methodname> method.
                    </para>
                    <para>
                        When creating a new gate, the remaining parameters are keyword
                        parameters.  The need for most of these depends on
                        the gate type.  Providing an un-needed keyword is not
                        an error, that parameter is just silently ignored.
                    </para>
                    <para>
                        The keywords and their values are:
                    </para>
                    <variablelist>
                        <varlistentry>
                            <term><option>type</option>=gate-type</term>
                            <listitem>
                                <para>
                                    This is always required when creating a new
                                    gate, or modifying the existing gate.
                                    The value supplied must be a string that is
                                    a valid gate type string for the SpecTcl
                                    <command>gate</command> Tcl command.
                                </para>
                                <para>
                                    The value of this type influences which other
                                    keywords are needed.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><option>parameters</option>=parameter-name-ntuple</term>
                            <listitem>
                                <para>
                                    This keyword is required for gates that
                                    depend on parameters.  It is expected to be
                                    a tuple of the names of the parameters on which
                                    the gate depends.  The order may be important,
                                    for exmaple for  contours and bands, the
                                    tuple must have two elements where the first
                                    element is the x parameter and the second the
                                    y parameter.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><option>gates</option>=gate-name-ntuple</term>
                            <listitem>
                                <para>
                                    This keyword is required for gates that
                                    depend on other gates (e.g. compound gates).
                                    The keyword value must be a tuple of gate
                                    names.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><option>points</option>=point-dict-tuple</term>
                            <listitem>
                                <para>
                                    This keyword is required for gates that have
                                    two dimensional points (for example, contours,
                                    bands, gamma contours etc).
                                    The value is a tuple of point dicts.  Each point
                                    dict has the keywords <literal>x</literal> whose
                                    value is a floating point x coordinate and
                                    <literal>y</literal> whose value is a floating
                                    point y coordinate of the point.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><option>low</option>=low-limit</term>
                            <term><option>high</option>=high-limit</term>
                            <listitem>
                                <para>
                                    These keywords are both required for gates that
                                    are slice-like (e.g. slices or gamma slices).
                                    They provide the floating point low and high
                                    limits of the gate acceptance region.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><option>mask</option>=mask-value</term>
                            <listitem>
                                <para>
                                    This keyword is required for bitmask gates
                                    like equal mask, and mask and not mask. Its value
                                    is an integer that supplies the actual bitmask
                                    value for the gate.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </refsect1>
                <refsect1>
                    <title>ATTRIBUTES</title>
                    <para>
                        While all gates have <varname>name</varname>
                        and <varname>type</varname> attributes, the other
                        attributes described in this section are only present for
                        appropirate gate types.  For example, a primitive gate
                        won't have a <varname>gates</varname> attribute while a
                        compound gate will not have <varname>parameters</varname>.
                    </para>
                    <para>
                        To distinguish from empty values, if a gate does not have
                        an attribute, attempting to read it will result in a return
                        value of <literal>None</literal>.
                    </para>
                    <para>
                        Note that all attributes for  gates objects are
                        reado.ly
                    </para>
                    <variablelist>
                        <varlistentry>
                            <term>
                                <fieldsynopsis>
                                    <modifier>readonly</modifier><type>string </type>
                                    <varname>name</varname>
                                </fieldsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    All gate types have this attribute.  The
                                    gate's name is stored in this attribute.
                                </para>
                            </listitem>
                        </varlistentry>        
                        <varlistentry>
                            <term>
                                <fieldsynopsis>
                                    <modifier>readonly</modifier><type>string </type>
                                    <varname>type</varname>
                                </fieldsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    All gates have this attribute.  The gate
                                    type string is stored in this attribute.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <fieldsynopsis>
                                    <modifier>readonly</modifier><type>tuple of strings </type>
                                    <varname>parameters</varname>
                                </fieldsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Only gate types that depend directly on parameters
                                    have this attribute.  It contains a tuple
                                    of the names of the parameters the gate
                                    depends on.   And gates are an example of
                                    a gate that will not have this attribute.
                                    slice, band, contour, gamma slices,
                                    bit mask gates etc. are
                                    examples of gate types that will have this
                                    attribute.
                                </para>
                            </listitem>
                        </varlistentry>        
                        <varlistentry>
                            <term>
                                <fieldsynopsis>
                                    <modifier>readonly</modifier><type>tuple of strings </type>
                                    <varname>gates</varname>
                                </fieldsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Only compound gates will have this attribute.
                                    It is a tuple that contains the names of the
                                    gates this gate depends on.
                                    And, Or, Not gates all have this attribute but,
                                    for example, a slice gate won't have this
                                    attribute.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <fieldsynopsis>
                                    <modifier>readonly</modifier><type>float </type>
                                    <varname>low</varname>
                                </fieldsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Contains a floating point low limit for the
                                    gate.  Only one dimensional slice-like gates like
                                    slices, and gamma slices have this attribute.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <fieldsynopsis>
                                    <modifier>readonly</modifier><type>float </type>
                                    <varname>high</varname>
                                </fieldsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    As for <varname>low</varname> only slice like
                                    gates have this attribute.  It contains the
                                    high limit for the gate.
                                </para>
                            </listitem>
                        </varlistentry>        
                        <varlistentry>
                            <term>
                                <fieldsynopsis>
                                    <modifier>readonly</modifier><type>tuple of dicts </type>
                                    <varname>points</varname>
                                </fieldsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Only two dimensional figure like gates,
                                    such as contours, bands, gamma contours etc.
                                    have this attributes.  It contains a
                                    tuple of point dicts. See the
                                    <literal>DESCRIPTION</literal> section
                                    for the definition of a point dict.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <fieldsynopsis>
                                    <modifier>readonly</modifier><type>integer </type><varname>mask</varname>
                                </fieldsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Only bitmask gates have this attribute.
                                    It contains the bitmask that the gate
                                    checks against its parameter.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </refsect1>
                <refsect1>
                    <title>METHODS</title>
                    <para>
                        At present, only the <methodname>change</methodname>
                        method is defined.  It allows you to change any and all
                        parts of the gate definition.  The parameters
                        to this method are the keyword parameters for the
                        gate creation constructor (that is every parameter but
                        the <parameter>name</parameter> positional parameter).
                    </para>
                    <para>
                        The keyword supplied must provide a proper gate definition
                        for the gate type specified by the mandatory
                        <option>type</option> keyword.  If this is the case,
                        the method generates a new replacment gate and replaces
                        the gate the gate container the object has with that
                        replacement gate.
                    </para>
                </refsect1>
            </refentry>
        </section>
    </chapter>
</book>
