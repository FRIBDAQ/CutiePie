<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"file:///usr/share/xml/docbook/schema/dtd/4.5/docbookx.dtd
"
>
<book>
    <bookinfo>
      <title>CutiePie (QtPy) (version 5.13-000)</title>
      <author><firstname>Giordano</firstname><surname>Cerizza</surname></author>
      <revhistory>
          <revision>
             <revnumber>2.0</revnumber>
             <date>January 19, 2023</date>
             <authorinitials>GC</authorinitials>
             <revremark>Original Release</revremark>
          </revision>
      </revhistory>
    </bookinfo>
    <chapter>
        <title>Introduction</title>
        <para>
	  This manual describes a new alternative to the Xamine histogram visualizer. It based on Python bindings for C++ and adopts common Python libraries for basic and
	  more advanced numerical algorithms. The GUI is written on PyQt5. Among the new features, the ability to implement new Machine Learning (ML) algorithms for clustering
	  and functions to fit spectra.
        </para>
        <para>
	  This document is organized as follows:
        </para>
        <itemizedlist>
            <listitem>
                <para>
		  Description of CutiePie design.
                </para>
            </listitem>
            <listitem>
                <para>
		  Analysis features.
                </para>
            </listitem>
            <listitem>
                <para>
		  How to customize and add your own ML algorithms and fitting functions.
                </para>
            </listitem>	   
        </itemizedlist>
        <para>
	  CutiePie is a histogram visualizer linked to the SpecTcl TreeGui. It accesses the shared memory location and imports spectum and gate definitions. The communication between CutiePie and SpecTcl
	  is bidirectional. Creation of gates in CutiePie are mirrored in SpecTcl and viceversa. On the other hands, CutiePie extends some functionalities and provides hooks to Python-based analysis tools
	  (i.e. Jupiter notebook). 
        </para>
    </chapter>
    <chapter>
      <title>A brief design description.</title>
      <para>
	The core of CutiePie is based on the Python/C API to extend the Python interpreter with new modules written in C/C++.
	These modules can not only define new functions but also new object types and their methods. To simplify the process, SIP has been chosen.
	SIP is a collection of tools that makes it very easy to create Python bindings for C and C++ libraries. It comprises
	a set of build tools and a sip module. The build tools process a set of specification files and generates C or C++ code which is then compiled
	to create the bindings extension module. Several extension modules may be installed in the same Python package. Extension modules can be built
	so that they are independent of the version of Python being used.
	With parts of SpecTcl converted to Python modules, the only part left to take care is the GUI. Qt is set of cross-platform C++ libraries that
	implement high-level APIs for accessing many aspects of modern desktop and mobile systems. PyQt5 is a comprehensive set of Python bindings for Qt v5 and allows
	the creation of GUI widgets, classes for accessing SQL databases, XML parser, SVG support. PyQt5 is a good example of modern technology, with known commercial applications,
	that improves the SpecTcl histogram visualization and offers multiple hooks to a variety of data analysis tools.
      </para>
    </chapter>
    <chapter>    
      <title>Features</title>    
      <para>
	The idea behind introducing an alternative to Xamine was to provide the same basic functions developed over the years. On top of that, building new tools while keeping the graphics simple
	and clean. As shown in the Figure 3-1, there are three main rows with several fields, buttons, and menu that are active (the disabled ones will be updated in newer releases):
	<figure>
	  <title>CutiePie GUI main window.</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="mainWin.jpg" format="JPG"/>
	    </imageobject>
	  </mediaobject>
	</figure>
	<itemizedlist>
            <listitem>
                <para>
                  Configuration: it contains fields to configure and access the data, set polling time for automatic updates, and load/save window geometry.
                </para>
            </listitem>
            <listitem>
                <para>
                  Spectrum information: it lists in a scrolldown menu all the available spectra created in the TreeGui, and offers options to add/update/clear spectra while updating
		  information such as parameters and type of histogram.
                </para>
            </listitem>
            <listitem>
                <para>
		  Gate and Output: it lists in a scrolldown menu all the available gates applied in the TreeGUI, and offers options to create/edit/draw/clear new gates that will be
		  available in the TreeGUI. The integrate and output buttons offers a quick calculation sheet for integrations over 1D/2D gate. It allows the export of the sheet in
		  csv format for further analysis.
		  <figure>
		    <title>Output popup window.</title>
		    <mediaobject>
		      <imageobject>
			<imagedata fileref="integrateWin.jpg" format="JPG"/>
		      </imageobject>
		    </mediaobject>
		  </figure>		
                </para>
            </listitem>
            <listitem>
                <para>
		  Special functions: it contains all the new advanced features that CutiePie offers
		  <figure>
		    <title>Extra function popup window.</title>
		    <mediaobject>
		      <imageobject>
			<imagedata fileref="special.jpg" format="JPG"/>
		      </imageobject>
		    </mediaobject>
		  </figure>
		  <itemizedlist>
		    <listitem>
                      <para>
			Fitting: for 1D spectra, the ability of fitting histograms with several pre-defined functions is offered. Fit restuls are displayed in an output box.
			<figure>
			  <title>Fitting popup window.</title>
			  <mediaobject>
			    <imageobject>
			      <imagedata fileref="fitting.jpg" format="JPG"/>
			    </imageobject>
			  </mediaobject>
			</figure>
                      </para>
		    </listitem>
		    <listitem>
                      <para>
			Peak finder: for 1D spectra, it automatically scans the histogram and outputs the peak position and the FWHM. The variable parameter in the search is the peak width threshold
			in units of bins. Found peaks can be displayed on the plot and singularly turned off.
			<figure>
			  <title>Peak finder popup window.</title>
			  <mediaobject>
			    <imageobject>
			      <imagedata fileref="peakFinder.jpg" format="JPG"/>
			    </imageobject>
			  </mediaobject>
			</figure>
                      </para>
		    </listitem>
		    <listitem>
		      <para>
			Overlaying image: the menu consists of open file, a joystick for gross and fine controls for positioning the image, X- and Y-zoom for adapting the figure to the plot,
			and transparency level controls. This option has been introduced for simplify the comparison between simulated and real data (i.e. S800 CRDC masking, PID, ...).
			<figure>
			  <title>Overlay image popup window.</title>
			  <mediaobject>
			    <imageobject>
			      <imagedata fileref="overlay0.jpg" format="JPG"/>
			    </imageobject>
			  </mediaobject>
			</figure>
			Here an example of a giant anteater picture overlaid to a two dimensional spectrum.
			<figure>
			  <title>Example of overlaid image on a plot.</title>
			  <mediaobject>
			    <imageobject>
			      <imagedata fileref="overlay.jpg" format="JPG"/>
			    </imageobject>
			  </mediaobject>
			</figure>			
		      </para>		      
		    </listitem>
		    <listitem>
		      <para>
			Jupyter notebook: when clicking "Start", a local server starts to run Jupyter Notebook. At the same time, the data available in the shared memory are dumped into a
			dataframe formatted as csv file. This solution allows users to perform data analysis on an interactive web tool with hooks to Python and ROOT libraries. 
			<figure>
			  <title>Example of Jupyter notebook.</title>
			  <mediaobject>
			    <imageobject>
			      <imagedata fileref="jupyter.jpg" format="JPG"/>
			    </imageobject>
			  </mediaobject>
			</figure>			
		      </para>		      
		    </listitem>
		  </itemizedlist>		    
                </para>
            </listitem>
        </itemizedlist>
      </para>
    </chapter>

    <chapter>
      <title>Plotting window</title>
      <para>
	The plotting window is characterized by a tab system that allows users to load different geometry windows and quickly switch from one to the other.
	On the top left, from left to right:
	<figure>
          <title>Canvas quick actions</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="quick.jpg" format="JPG"/>
            </imageobject>
          </mediaobject>
        </figure>
	<itemizedlist>
	  <listitem>
	    <para>
	    Home button: returns to the original format of the spectrum. 
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	    Magnifying glass: allows to interactively select and magnifying a region in the plot.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	    3.5'' Floppy disk: saves the figure into a graphics format (jpg, png).
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Copy Properties: opens a popup window with several options
	      <figure>
		<title>Copy Properties</title>
		<mediaobject>
		  <imageobject>
		    <imagedata fileref="copy.jpg" format="JPG"/>
		  </imageobject>
		</mediaobject>
              </figure>
	      The pannel automatically fills information for the selected plot, allows to select what property needs to be copied to a clickable list of histograms of the same dimensions (1D or 2D).
	    </para>
	  </listitem>
	  <listitem>
            <para>
              Summing region: please see next chapter for more details on how to enable it.
            </para>
          </listitem>
	  <listitem>
            <para>
              Histogram name: updated by hovering the mouse to the corresponding histogram.
            </para>
          </listitem>
	  <listitem>
            <para>
              Log and Autoscale: self scaling feature for a selected histogram. Autoscale applies automatically to all the histograms.
            </para>
          </listitem>
	  <listitem>
            <para>
              +/- buttons: for a selected spectrum, it zooms in/out (i.e. 1D: modifies the y scale by a factor of 2, 2D: modifies the z scale by a factor of 2)
            </para>
          </listitem>	  	  	  
	</itemizedlist>
	
      </para>
    </chapter>

    <chapter>
      <title>Gating and summing regions</title>
      <para>
	To enable to ability to create or edit (to be released soon) gates or summing region, the user needs to double click on the selected plot. Double clicking allows CutiePie to enter in
	interactive mode and new functionalities will be enabled.
	<figure>
          <title>Creating a gate</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="gate1.jpg" format="JPG"/>
            </imageobject>
          </mediaobject>
        </figure>
	By clicking "Create", a couple of popup boxes will show up asking for a name and a gate type (i.e. slice, contour, band, ...). Once the last popup disappears, the user can click anywhere to start
	create the lines or a polygon, depending on the histogram type. A double click command stops the creation of the gate, and pushes the shape to the TreeGui where it can be applied for further data
	selection. To exit the interactive mode a double click command will return to the multi-panel view.
	For "Summing region", there are a few differences: different line color, no input naming, and automatic integration with the Output popup window showing up.
	<figure>
          <title>Editing a gate</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="gate2.jpg" format="JPG"/>
            </imageobject>
          </mediaobject>
        </figure>
	From the drop down menu to the left of the Create/Modify buttons, select the gate of interest. By clicking Modify, a submenu with two options will appear: Drag and Edit.
	Select on the plot the contour/lines of interest, they turn green. For Drag:
	<figure>
          <title>A selected contour will turn into a filled polygon</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="drag1.jpg" format="JPG"/>
            </imageobject>
          </mediaobject>
        </figure>
	<figure>
          <title>By clicking once on the polygon, you can drag it anywhere you need. The polygon will follow your mouse movement without keeping the button clicked.</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="drag2.jpg" format="JPG"/>
            </imageobject>
          </mediaobject>
        </figure>
	<figure>
          <title>By right-clicking the polygon will return to contour updating the gate definition with the new position.</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="drag3.jpg" format="JPG"/>
            </imageobject>
          </mediaobject>
        </figure>
	For Edit:
	<figure>
          <title>A selected contour will turn into a filled polygon with marked vertices.</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="edit1.jpg" format="JPG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <figure>
          <title>By clicking on a vertex and dragging it, one can modify the shape of the gate. If needed, one can add a vertex by using the key-binding i (insert)
	  or remove a vertex with d (delete)</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="edit2.jpg" format="JPG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <figure>
          <title>By right-clicking the polygon will return to contour updating the gate definition with the new position.</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="edit3.jpg" format="JPG"/>
            </imageobject>
          </mediaobject>
        </figure>
      </para>
    </chapter>    

    <chapter>    
      <title>How to start CutiePie</title>
      <para>
	To have the correct skeleton of CutiePie please copy the directory 5.13-000/VMUSBSkel and start building your SpecTcl from that.
	In SpecTclInit.tcl please add the following lines
	<example>
	  <title>SpecTclInit.tcl</title>
          <programlisting>
	    # comment out first line for xamine
	    set DisplayType qtpy
	    set DisplayMegabytes 200
	    
	    #set NonDAQHTTPDPort 6666
	    #set NonDAQMirrorPort 5555
	    set NonDAQHTTPDPort 6679
	    set NonDAQMirrorPort 5569
	    
	    lappend auto_path [file join $SpecTclHome TclLibs]
	    if {[array names env DAQTCLLIBS]  ne ""} {
	     lappend auto_path $env(DAQTCLLIBS)
	     package require DAQService
	     set HTTPDPort [SpecTcl::getServicePort SpecTcl_REST]
	     set MirrorPort [SpecTcl::getServicePort SpecTcl_MIRROR]
	    } else {
	     set HTTPDPort $NonDAQHTTPDPort
	     set MirrorPort $NonDAQMirrorPort
	    }
          </programlisting>
	</example>
      </para>	
    </chapter>    

    <chapter>    
      <title>Step by step tutorial</title>    
      <para>
	VISUALIZATION
	<itemizedlist>
	  <listitem>
            <para>
	      Start SpecTcl 
            </para>
          </listitem>
	  <listitem>
            <para>
	      Load the spectrum definition file from the treegui window (top right)
            </para>
          </listitem>
	  <listitem>
            <para>
	      Attach to file/Attach online
            </para>
          </listitem>
	  <listitem>
            <para>
	      Move to the CutiePie window, click "Get Data". If the operation succeeds you should see the field "Spectrum", "Parameter", "Gate" populating
            </para>
          </listitem>
	  <listitem>
            <para>
	      You can load a window file (both old and new version) via the "Load Geometry" button or use the "Geometry" scroll down menu to selected the rowXcolumn geometry	      
            </para>
          </listitem>
	  <listitem>
            <para>
	      If you load a window file, the plot panel should be automatically populated and filled with data
            </para>
          </listitem>
	  <listitem>
            <para>
	      You can load a window file (both old and new version) via the "Load Geometry" button or use the "Geometry" scroll down menu to selected the rowXcolumn geometry	      
            </para>
          </listitem>
	  <listitem>
            <para>
	      If you create a new plot geometry, you can select the panel (a red rectangle should appear to show which panel has been selected) and click "Add" after
	      selecting the spectrum of interest. Same procedure for all the panels. Then "Update" to visualize.
            </para>
          </listitem>	  	  
        </itemizedlist>
      </para>

      <para>
	INTERACTIVITY
	<itemizedlist>
	  <listitem>      
	    <para>
	      GATING 
	      To enter gating mode, double click on selected plot (the plot will be enlarge to full window size) 
	      -	1D (slice): click "Create", choose a name, and choose the type. Single click on the plot to select the region. Double click to finalize the slice.
	      To leave gating mode, double click. You will go back to the full geometry panel. 
	      -	2D (contour): click "Create", choose a name, and choose the type. Single click to create the contour, double click to finalize the contour. To leave gating mode, double click.
	      You will go back to the full geometry panel. 
	      To modify a gate, click "Modify" and "Drag" or "Edit". To drag: select the countour/line for the gate, it will turn green. Click again to take control of the gate
	      and move the mouse to the desired location. Remember, that the gate will follow the mouse cursor so no need to keep the button clicked. To release the gate, right click.
	      To edit: select the countour/line for the gate, it will turn green. Select the vertex to modify and drag it to the desired location. With the key-bindings "i" and "d",
	      one can insert or remove vertices. To release the gate, right click.
            </para>
          </listitem>	  	  
	  <listitem>      
	    <para>
	      INTEGRATION 
	      Select the plot, select the gate, click "Integrate", and click "Output" for a popup window with the results.
            </para>	    
          </listitem>
	  <listitem>      
	    <para>
	      PEAK FINDING 
	      Select the plot, click the "Extra" button, select a minimum peak width threshold, and click "Scan". Result will be displayed below with a
	      peak selection check box system. To clear the result click "Clear".
            </para>	    
          </listitem>
	  <listitem>      
	    <para>
	      FITTING 
	      Select the plot, click the "Extra" button, select a predefined fitting function, select the fitting interval, select preliminary fitting value, and click "Fit".
            </para>	    
          </listitem>
	  <listitem>      
	    <para>
	      OVERLAY AN IMAGE
	      Select the plot, click the "Extra" button, click "Open file", select the file of interest, and play with the gross/fine joystick for positioning and the slides for the picture settings.
            </para>	    
          </listitem>
	</itemizedlist>
      </para>
    </chapter>
    
    <chapter>    
      <title>How to customize ML algo and fitting functions</title>    
      <para>
	To simplify the implementation of specific ML algorithms or fitting functions, CutiePie implements a factory for handling models and offers simple skeletons to fill in.
	Below a look at the skeleton for ML and fitting with examples of the implementation for K-Mean and Gaussian fit.
      </para>
      <example>
	<title>ML algorithm skeleton.</title>
	<programlisting>
	  import io
	  import sys, os
	  sys.path.append(os.getcwd())
	  
	  import algo_factory
	  
	  # Skeleton algo parameters
	  # param_1 = 5
	  # param_2 = 'test',
	  # param_3 = 100
	  
	  class SkelAlgo:
       	      def __init__(self, param_1, param_2, param_3):
                 self.param_1 = param_1
		 self.param_2 = param_2
		 self.param_3 = param_3
	  
	  # implementation of the algorithm, the argument are mandatory even if not used
	      def start(self, data, weigths, nclusters, axis, figure=None):
              print("Skeleton example. Implementation is all yours.")
	  
	  class SkelAlgoBuilder:
	      def __init__(self):
                 self._instance = None
	  
	      def __call__(self, param_1 = 5, param_2 = 'test', param_3 = 100, **_ignored):
                 if not self._instance:
                    self._instance = SkelAlgo(param_1, param_2, param_3)
                 return self._instance
        </programlisting>
      </example>

      <example>
	<title>Example of ML algorithm based on the skeleton. The output is shown in Figure 3-5.</title>
	<programlisting>
	  ...
	  def start(self, data, weigths, nclusters, axis, figure=None):
	     # create kmeans object
             kmeans = KMeans(nclusters, self.init, self.n_init, self.max_iter, self.tol, self.precompute_distances, self.verbose, self.random_state, self.algorithm)
             # fit kmeans object to data
             kmeans.fit(data, sample_weight=weigths)
	  
             cluster_center = kmeans.cluster_centers_
             confidPerc = self.soft_clustering_weights(data,cluster_center)
	  
             prob_dict = {}
             for i in range(len(confidPerc[0])):
                  prob_dict[i] = self.extract(confidPerc, i)

             # CL 90%/CL 95%
             bool_dict_90 = {}
             bool_dict_95 = {}
             w_90 = {}
             w_95 = {}
             sum90 = 0
             sum95 = 0
             for i in range(len(cluster_center)):
                  self.addPoint(axis, [cluster_center[i][0], cluster_center[i][1]])
		  bool_dict_90[i] = [True if x>0.9 else False for i, x in enumerate(prob_dict[i])]
		  bool_dict_95[i] = [True if x>0.95 else False for i, x in enumerate(prob_dict[i])]
		  w_90[i] = list(compress(weigths, bool_dict_90[i]))
		  w_95[i] = list(compress(weigths, bool_dict_95[i]))
		  sum90 += sum(w_90[i])
		  sum95 += sum(w_95[i])

             print("#########################################")
             print("# Results of K-Mean clustering analysis #")
             print("#########################################")
             for i in range(len(cluster_center)):
                  print("Cluster", i," with center (x,y)=(",cluster_center[i][0],",",cluster_center[i][1],")")
             print("Confidence Level 90% -->", sum90/sum(weigths),"%")
             print("Confidence Level 95% -->", sum95/sum(weigths),"%")
             print("#########################################")
	   ...
        </programlisting>
      </example>

      <example>
	<title>Fitting function skeleton.</title>
	<programlisting>
	  import io
	  import sys, os
	  sys.path.append(os.getcwd())

	  import pandas as pd
	  import numpy as np

	  
	  import fit_factory

	  # Skeleton fit parameters
	  # param_1 = 1
	  # param_2 = 1,
	  # param_3 = 10

	  class SkelFit:
     	     def __init__(self, param_1, param_2, param_3):
                 self.param_1 = param_1
                 self.param_2 = param_2
                 self.param_3 = param_3

             # implementation of the algorithm, the argument are mandatory even if not used
   	     def start(self, x, y, xmin, xmax, axis, fit_results):
                 print("Skeleton example. Implementation is all yours.")

	  class SkelFitBuilder:
             def __init__(self):
                self._instance = None

             def __call__(self, param_1 = 1, param_2 = 2, param_3 = 10, **_ignored):
                if not self._instance:
                   self._instance = SkelFit(param_1, param_2, param_3)
                return self._instance
        </programlisting>
      </example>	        

      <example>
	<title>Example of fitting function based on the skeleton.</title>
	<programlisting>
	  ...
	  # function defined by the user
	  def gauss(self, x, amplitude, mean, standard_deviation):
              return amplitude*np.exp(-(x-mean)**2.0 / (2*standard_deviation**2))

	  # implementation of the fitting algorithm
	  def start(self, x, y, xmin, xmax, axis, fit_results):
              fitln =None
              amplitude = 2000
              mean = xmin+(xmax-xmin)/2
              standard_deviation = mean/10
              p_init = [amplitude, mean, standard_deviation]
              print(p_init)

              popt, pcov = curve_fit(self.gauss, x, y, p0=p_init, maxfev=5000)

              # plotting fit curve and printing results
              try:
                 x_fit = np.linspace(x[0],x[-1], 10000)
                 y_fit = self.gauss(x_fit, *popt)
	      
                 fitln, = axis.plot(x_fit,y_fit, 'r-')
                 for i in range(len(popt)):
                     s = 'Par['+str(i)+']: '+str(round(popt[i],3))+'+/-'+str(round(pcov[i][i],3))
                     fit_results.append(s)
	      except:
                 pass
              return fitln
	  ...
        </programlisting>
      </example>
    </chapter>        
</book>
