<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                      "file:///usr/share/xml/docbook/schema/dtd/4.5/docbookx.dtd
"
>
<book>
    <bookinfo>
      <title>SpecTcl Client Display Interface and Headless SpecTcl</title>
      <author><firstname>Ron</firstname><surname>Fox</surname></author>
      <revhistory>
          <revision>
             <revnumber>1.0</revnumber>
             <date>October 27, 2021</date>
             <authorinitials>RF</authorinitials>
             <revremark>Original Release</revremark>
          </revision>
      </revhistory>
    </bookinfo>
    <chapter>
       <title>INTRODUCTION</title>
       <para>
        This document is intended for the following audiences:
       </para>
       <itemizedlist>
        <listitem>
           <para>
              Users of NSCLDAQ that want a persistent SpecTcl to run under
              the NSCLDAQ-12+ experiment manager.
           </para>
        </listitem>
        <listitem>
           <para>
              Users of SpecTcl that want to start up a remote displayer.  This
              includes users of SpecTcl within the NSCLDAQ-12+ experiment manager
              environment.
           </para>
        </listitem>
        <listitem>
           <para>
               Users of SpecTcl that want to remote control a SpecTcl that may
               be running headless in the experiment manager environment.
           </para>
        </listitem>
        <listitem>
           <para>
              Programmers that want to write their own displayers or otherwise
              gain access to the SpecTcl display memory.
           </para>
        </listitem>
        <listitem>
           <para>
              Programmers that need to know the structure of the SpecTcl display
              memory.
           </para>
        </listitem>
       </itemizedlist>
    </chapter>
    <chapter>
       <title>Running SpecTcl Within the NSCLDAQ-12.0+ Experiment Manager.</title>
       <para>
        NSCLDAQ-12.0 introduced an experiment manager. The experiment manager
        allows an experiment to break out of the use of a single account.
        The manager gets started by a user and it  runs programs as needed in the
        background.   The configuration of the programs managed by the program
        manager is defined in an SQLite3 database file.   Editor programs
        allow this database to be modified to describe the programs
        that must be run, and when to run them.  
       </para>
       <para>
        The manager is a server that exports a REST service that supports
        control of the manager.    The manager is, at its heart, a state machine.
        It has a well defined, finite set of states, and well defined transitions
        between those states.   As the manager transitions from one state to the
        next, it runs a set of programs triggered by each transition.  The
        manager is also container aware and programs can be run inside of
        persistent containers that it maintains.
       </para>
       <para>
        You may want to run one or more SpecTcl analysis programs under the control
        of this manager.  If you do that, other chapters in this document
        describe how to run displayers (to visualize the spectra SpecTcl is
        accumulating and the displayable gates), as well as how to control
        these SpecTcl instances with existing graphical user interfaces.
       </para>
       <para>
        SpecTcl, itself, when run under the manager must be run headless.
        This specifically means that:
       </para>
       <itemizedlist>
        <listitem>
           <para>
              You must not allow a histogram visualization program (Displayer)
              to run. 
           </para>
        </listitem>
        <listitem>
           <para>
              <filename>SpecTclRC.tcl</filename>  must not start any graphical
              user interface windows and, in fact, may not require the package
              <literal>Tk</literal>.
           </para>
           <para>
            In order to visualize spectra in systems that are remote from
            SpecTcl, you shouild start the mirror server and REST server.
           </para>
           <para>
            In order to control SpecTcl, you should run its REST server.
           </para>
        </listitem>
       </itemizedlist>
        <para>
            This implies specialized <filename>SpecTclInit.tcl</filename>,
            <filename>SpecTclRC.tcl</filename>.
        </para>
        <para>
            Since program definitions for the experiment manager support
            specifying the working directory of a program, you can, very easily,
            have a separate working directory for interactive SpecTcls and
            managed SpecTcls.  Let's consider, therefore, the following directory
            tree.  <filename>SpecTcl</filename> has the SpecTcl program.
            <filename>SpecTcl/interactive</filename> is the directory from
            which SpecTcl can be run interactively.  It contains the
            normal set of <filename>SpecTclInit.tcl</filename> and
            <filename>SpecTclRC.tcl</filename> scripts you usually use
            to run SpecTcl and has a symbolic link named SpecTcl that points back
            to the executable for SpecTcl.
            Similarly, <filename>SpecTcl/managed</filename>, which we will descrribe
            has <filename>SpecTclRC.tcl</filename> and <filename>SpecTclInit.tcl</filename>
            files as well as its own symbolic link back to the executable.
        </para>
        <para>
            The remainder of this chapter will show example
            <filename>SpecTclInit.tcl</filename> and <filename>SpecTclRC.tcl</filename>
            that will work togethr
            to start SpecTcl under the manager.  We'll also describe how
            to setup SpecTcl within the program manager so that it starts when
            the experiment is booted and stops when it is shutdown.
            This will require two more scripts: <filename>stop.bash</filename> and
            <filename>stop.tcl</filename> in the <filename>SpecTcl/managed</filename>
            directory which we will describe.
        </para>
        <section>
            <title>SpecTclInit.tcl in Managed SpecTcl</title>
            <para>
                SpecTclInit.tcl contains
                variable definitions that SpecTcl examines on
                startup.  These variable definitions control how SpecTcl
                starts up the three definitions we'll need to set properly are:
            </para>
            <variablelist>
                <varlistentry>
                   <term><varname>DisplayType</varname></term>
                   <listitem>
                       <para>
                        This variable determines which of the SpecTcl displayers
                        is started by SpecTcl when it starts.  The value of
                        <literal>none</literal> tells SpecTcl not to start any
                        displayer program.  
                       </para>
                       <para>
                        Note that SpecTcl will still create display shared memory
                        so clients can access the spectra the user has bound
                        into the display memory via <command>sbind</command>.
                        The shared memory region can also be mirrored to remote
                        systems if desired.
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><varname>HTTPDPort</varname></term>
                   <listitem>
                       <para>
                        If this variable is defined, SpecTcl will start it's
                        REST server allowing remote control over SpecTcl. With
                        SpecTcl run in the manager, this is the only way to
                        provide a user interface to SpecTcl.  
                       </para>
                       <para>
                        The value of this variable must be in integer.  In the
                        environment of the NSCLDAQ experiment manager, it is
                        recommended that, rather than hard-coding a numerical port,
                        you use the NSCLDAQ port manager to allocate a port and
                        advertise a named service.  We'll describe this process
                        the sample <filename>SpeTclInit.tcl</filename> below.
                       </para>
                       <para>
                        If you do choose to hard code a port number, this value must
                        be unique <emphasis>system wide over all users</emphasis>.
                        If you provide a duplicate port number, you'll wind up starting
                        the REST server on a 'nearby' free port.
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><varname>MirrorPort</varname></term>
                   <listitem>
                       <para>
                        If this variable is defined, SpecTcl will start its
                        mirror server.  The mirror server supports remote displayers
                        by providing the ability to create and maintain a mirror of
                        the SpecTcl  display memory on a remote or local system.
                       </para>
                       <para>
                        Under the manager, at FRIB/NSCL, SpecTcl is normally
                        run containerized, and the experiment manager uses persistent
                        containers to accomplis that.   Since persistent containers
                        have their own, private namespace of SYS-V shared memory
                        segments used by SpecTcl for display shared memory,
                        you will need to create a mirror in the local host to
                        allow non-containerized programs or programs in transient
                        containers (<command>singularity shell</command>) to
                        attach displayers to SpecTcl.
                       </para>
                       <para>
                        Mirroring and attached displayers to mirror will be
                        described in the next chapter.
                       </para>
                       <para>
                        As with <varname>HTTPDPort</varname>, this value  should,
                        in most cases be gotten with the NSCLDAQ port manager as
                        it must be a unique integer system wide.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para>
                In the remainder of this section, we will provide a
                sample <filename>SpecTclInit.tcl</filename> file and
                walk through how it works.  In doing so, we will use the port
                manager to get our server ports.  Doing so requires that 
            </para>
            <orderedlist>
                <listitem>
                   <para>
                      The SpecTcl Tcl library directory must be added to the
                      Tcl intepreter package search path.
                   </para>
                </listitem>
                <listitem>
                   <para>
                      The NSCLDAQ-12.0+ environment is set up in the
                      container via its initialization script
                      (e.g. the initialization script source /usr/opt/daq/12.something/daqsetup.bash)
                   </para>
                </listitem>
                <listitem>
                   <para>
                      The value of the environment variable
                      <varname>DAQTCLLIBS</varname> is appended to the
                      Tcl interpreter search path so that the required Port manager
                      interaction  packages can be sourced in.
                   </para>
                </listitem>
            </orderedlist>
            <example>
                <title>Sample SpectclInit.tcl for Experiment Manager</title>
                <programlisting>
lappend auto_path [file join $SpecTclHome TclLibs]   <co id='mgrinit.spectcltcllibs' />
if {[array names env DAQTCLLIBS]  ne ""} {           <co id='mgrinit.daqtcllibs' />
    lappend auto_path $env(DAQTCLLIBS)
}
package require DAQService                          <co id='mgrinit.daqservice' />
set HTTPDPort [SpecTcl::getServicePort SpecTcl_REST]   <co id='mgrinit.restport' />
set MirrorPort [SpecTcl::getServicePort SpecTcl_MIRROR] <co id='mgrinit.mirrorport' />
set DisplayType none                                <co id='mgrinit.nodisplay' />

                </programlisting>
            </example>
            <calloutlist>
                <callout arearefs='mgrinit.spectcltcllibs' >
                    <para>
                        The Tcl variable <varname>SpecTclHome</varname> is defined
                        at SpecTcl's compile and initialization time to be the
                        top level installation directory of SpecTcl.  This
                        line adds the <filename>TclLibs</filename> subdirectory
                        to the Tcl library search path (<varname>auto_path</varname>).
                        The <filename>TclLibs</filename> contains the SpecTcl
                        Tcl library of support packages
                    </para>
                </callout>
                <callout arearefs='mgrinit.daqtcllibs' >
                    <para>
                        This segment of the script determines if the environment
                        variable <varname>DAQTCLLIBS</varname> has been defined and,
                        if so, appends it to the Tcl package  search path.
                        The NSCLDAQ 12.0+ <filename>daqsetup.bash</filename> script
                        defines <varname>DAQTCLLIBS</varname> to point to the
                        NSCLDAQ Tcl package library directory tree.
                    </para>
                    <para>
                        We don't exit if this is not the case as there are
                        other mechanisms to add the DAQ Tcl library packages to
                        the search path (e.g. externally defining
                        <varname>TCLLIBPATH</varname>).
                    </para>
                </callout>
                <callout arearefs='mgrinit.daqservice' >
                    <para>
                        The <literal>DAQService</literal> package is a package
                        in the SpecTcl Tcl package library that provides a simplified
                        interface to the NSCLDAQ Port manager for advertising
                        services and obtaining the port allocated.  Note that since
                        this depends on the low-level NSCLDAQ port manager package,
                        we needed, as we did previously, add the NSCLDAQ Tcl library
                        packages to the Tcl interpreter package search paths.
                    </para>
                </callout>
                <callout arearefs='mgrinit.restport' >
                    <para>
                        The <literal>DAQService</literal> package exports the
                        <command>SpecTcl::getServicePort</command> proc.
                        This proc takes a service name as a parameter and returns
                        the port that has been allocated to that service by
                        the port manager.  Service names shouild be unique
                        with <emphasis>users</emphasis> requesting them.
                    </para>
                    <para>
                        This line advertises the service <literal>SpecTcl_REST</literal>
                        and assigns the resulting port to <varname>HTTPPort</varname>.
                        The service can be looked up by clients and the resulting
                        port then used to connect to the REST server that
                        SpecTcl will start listening for connections on that port/
                    </para>
                </callout>
                <callout arearefs='mgrinit.mirrorport' >
                    <para>
                        Similarly, the service <literal>SpecTcl_MIRROR</literal>
                        is advertised and the resulting port set to the
                        <varname>MirrorPort</varname> so that when SpecTcl
                        starts its mirror service it will be listening on the
                        corresponding port.
                    </para>
                </callout>
                <callout arearefs='mgrinit.nodisplay' >
                    <para>
                        Setting the <varname>DisplayType</varname> to
                        <literal>none</literal> means that SpecTcl will not
                        start a spectrum display program but it will, nonetheless,
                        create the spectrum shared memory so that local clients
                        can display data from it and remote clients, upon setting up
                        a mirror, can also display data from it.
                    </para>
                </callout>
            </calloutlist>
        </section>
        <section>
           <title>SpecTclRC.tcl for Managed SpecTcl</title>
           <para>
            <filename>SpecTclRC.tcl</filename> should be very minimal.
            This is because in most cases, users use <filename>SpecTclRC.tcl</filename>
            to create graphical user interfaces (GUIs) which managed SpecTcl's
            cannot display.  A later chapter will describe how to run
            these as clients of the SpecTcl REST server.
           </para>
           <para>
            We recommend using SpecTclRC.tcl to:
           </para>
           <itemizedlist>
            <listitem>
               <para>
                  Read in a SpecTcl configuration file, and bind its spectra into
                  the SpecTcl shared memory region.
               </para>
            </listitem>
            <listitem>
               <para>
                  Read in any non-interactive scripts your GUI's might use
                  that would run better locally than remotely (see, however
                  the chapter on running scripts remotely).
               </para>
            </listitem>
            
           </itemizedlist>
           <example>
            <title>
                Sample SpecTclRC.tcl Script for Managed SpecTcl.
            </title>
            <programlisting>
source mydefinitions.tcl     <co id='managed.rcdefs' />
sbind -all                   <co id='managed.rcsbind' />
source mylocalprocs.tcl      <co id='managed.rclocalprocs' />

set pidfile [open spectclpid w]
puts $pidfile [pid]          <co id='managed.rcpid' />
close $pidfile

            </programlisting>
           </example>
           <calloutlist>
            <callout arearefs='managed.rcdefs' >
                <para>
                    Reads in a SpecTcl definition file that contains tree parameter
                    definitions, spectrum definitions, gate definitions and
                    applications as well as tree variable values.
                </para>
            </callout>
            <callout arearefs='managed.rcsbind' >
                <para>
                    Binds all the spectra defined in <filename>mydefinitions.tcl</filename>
                    to the display shared memory.  This makes them visible
                    to local displayers attached to SpecTcl as well as remote
                    displayers when mirroring has been started to the remote
                    system.
                </para>
            </callout>
            <callout arearefs='managed.rclocalprocs' >
                <para>
                    Sources in any Tcl procedures you want SpecTcl to hold locally.
                    These may be procs that are invoked by SpecTcl's compiled
                    code or utilities that your GUI scripts use that will run
                    better or faster locally rather than remotely.
                </para>
                <para>
                    It's perfectly normal and acceptable for a line like this
                    to be omitted.
                </para>
            </callout>
            <callout arearefs='managed.rcpid' >
                <para>
                    Records the process id of SpecTcl in the file
                    <filename>spectclid</filename>.  This allows us to
                    define a command in the manager to kill SpecTcl when the
                    system is shutting down.
                </para>
            </callout>
           </calloutlist>
        </section>
        <section>
           <title>Defining SpecTcl to the Manager.</title>
           <para>
            Using SpecTcl with the NSCLDAQ experiment manager means defining it as
            a program as well as defining a program to stop it.  It then means
            attaching the start program to the <literal>BOOT</literal>
            state transition and attaching the stop program to the
            <literal>SHUTDOWN</literal> transition.
           </para>
           <para>
            Throughout this section, we will assume that
            <filename>SpecTclRC.tcl</filename> will create a file named
            spectclpid in its working directory that will contain its process ID.
           </para>
        </section>
        <section>
            <title>Starting SpecTcl in the Manager</title>
            <para>
                Use the <filename>$DAQBIN/mg_config</filename> progream specifying as
                a parameter the name of the manager's configuration database file.
                When the list of configuration options pops up, double click on
                <literal>Programs</literal> to define the SpecTcl program.
            </para>
            <para>
                When the list of defined programs pops up, click the
                <guibutton>New...</guibutton> button to bring up the program editor.
                Fill in the following fields in the editor as follows::
            </para>
            <variablelist>
                <varlistentry>
                   <term><literal>Name:</literal></term>
                   <listitem>
                       <para>
                        A unique program name such as <literal>SpecTcl</literal>
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><literal>Host</literal></term>
                   <listitem>
                       <para>
                        DNS name of the computer on which you want SpecTcl to run.
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><literal>Working Directory</literal></term>
                   <listitem>
                       <para>
                        The <filename>SpecTcl/managed</filename> director in which
                        you put your <filename>SpecTclInit.tcl</filename> and
                        <filename>SpecTclRC.tcl</filename> scripts for managed
                        Spectcl.
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><literal>Program File:</literal></term>
                   <listitem>
                       <para>
                        The path to the SpecTcl you want to run.  This
                        can be releative.  If you created the symlink to
                        the SpecTcl executable you want to run this can be e.g.
                        <literal>./SpecTcl</literal>
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><literal>Container</literal></term>
                   <listitem>
                       <para>
                        If you want SpecTcl to run in a container, this should be
                        the name of a container that you defined earlier.
                        If left blank, SpecTcl will run in native mode.
                        The container should have a startup script that
                        sources in the NSCLDAQ Environment definition script,
                        see, however, below.
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><literal>Type:</literal></term>
                   <listitem>
                       <para>
                        Select the <literal>Persistent</literal> radio button
                        to indicate that SpecTcl is expected to persist but
                        that the data flow can continue if it exits.
                       </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para>
                If your container or other environment do not define
                DAQTCLLIBS as expected by the <filename>SpecTclInit.tcl</filename>
                script we created, you can use the
                <literal>Program Environment</literal> editor section to set this
                or, alternatively <literal>TCLLIBPATH</literal>.
            </para>
            <para>
                Click <guibutton>Ok</guibutton> to save the definition and close
                the program list.
            </para>
            <para>
                Having create the program you need to add it to a sequence triggered
                by Boot.
                Double click the <literal>Sequence Definition</literal> entry in
                the top level window.  If there is no sequence triggered by
                booting the system, type <literal>BOOT</literal> in the
                <literal>New sequence:</literal> entry.  Pull down the
                <literal>Trigger state:</literal> drop down menu and select
                <literal>BOOT</literal> then click <guibutton>Add</guibutton>
                to add the sequence.
            </para>
            <para>
                Double click <literal>BOOT</literal> from the list of sequences
                to pop up the sequence editor.  In the <literal>Program name</literal>
                pulldown, select <literal>SpecTcl</literal> (or the name you gave
                to your SpecTcl program definition.  Click <guibutton>Add</guibutton>
                to add this to the <literal>BOOT</literal> sequence and
                click <guibutton>SAVE</guibutton> to save the modified sequence.
            </para>
            <para>
                You also need to kill SpecTcl when the experiment is <literal>Shutdown</literal>.
                Define a program with the same attributes as your SpecTcl program
                however:
            </para>
            <itemizedlist>
                <listitem>
                   <para>
                      Select a <literal>Transitory</literal>  program type.
                   </para>
                </listitem>
                <listitem>
                   <para>
                      For the <literal>Program File:</literal> enter:
                      <literal>kill -9 `cat spectclpid`</literal>
                   </para>
                </listitem>
            </itemizedlist>
            <para>
                Add this to a sequence that's triggerd by the <literal>SHUTDOWN</literal>
                transition.  Since the programs run as shell commands this works to
                send a <literal>SIGKILL</literal> signal to the program whose
                PID is stored in the <filename>spectclpid</filename> file the
                SpecTcl <filename>SpecTclInit.tcl</filename> sample file written
                when SpecTcl started.  A key point is that the <literal>Program File:</literal>
                is actually a line that's submitted to a <literal>bash</literal>
                shell for execution on the specified host
                (possibly within the containerized environment).
            </para>
        </section>
    </chapter>
    <chapter>
       <title>Starting a Remote Displayer With xaminerunner</title>
       <para>
        Once you have a headless SpecTcl running you will, at some point in time,
        probably want to look at the spectra it produces.  This can be done by
        running a supported Displayer program such as <literal>Xamine</literal>
        or <literal>CutiePie</literal> and attaching it to the local SpecTcl
        shared memory region (if SpecTcl is running locally) or a mirror
        managed by the mirror server if SpecTcl is remote.
       </para>
       <para>
        This chapter describes a helper program that's installed in SpecTcl's
        <filename>bin</filename> directory called <literal>xaminerunner</literal>
        that simplifies this process for the Xamine displayer. It does the
        following:
       </para>
       <itemizedlist>
        <listitem>
           <para>
              Figures out if SpecTcl is running remotely and, if so, sets up
              a mirror, if one does not already exist, of the SpecTcl shared
              memory in the local host.
           </para>
        </listitem>
        <listitem>
           <para>
              Sets up the environment variables Xamine needs to locate the shared
              memory it's supposed to map accordingly and starts Xamine.
           </para>
        </listitem>
        <listitem>
           <para>
              Accepts Xamine gate creation communications and maps them into the
              appropriate SpecTcl REST requests to create those gates in
              SpecTcl.
           </para>
        </listitem>
        <listitem>
           <para>
              Captures new gates and new sbind operations and communiates with
              Xamine so that the gates it displays accurately reflect the
              gates that can be displayed on the spectra bound to the shared
              memory.
           </para>
        </listitem>
       </itemizedlist>
       <para>
        <literal>xaminerunner</literal> requires the SpecTcl REST server be running.
        If SpecTcl is in a remote system it must also be running the Mirror server.
       </para>
       <para>
        <literal>xaminerunner</literal> is located in
        <filename>$SpecTclHome/bin/xaminerunner</filename>, where <literal>SpecTclHome</literal>
        is the top level of a SpecTcl installation version 5.10 or later.
        It's operation is controlled by command line options.  If SpecTcl is
        running under NSCLDAQ and advertising services via the NSCLDAQ port
        manager (as descrdibed in the previous chapter), to do named service lookup,
        you must have setup the environment variables of an NSCLDAQ installation
        before running <literal>xaminerunner</literal> (sourced <filename>daqsetup.bash</filename>).
       </para>
       <para>
        Here are the command options accepted by <literal>xaminerunner</literal>:
       </para>
       <variablelist>
        <varlistentry>
           <term><option>--host</option>=<replaceable>DNS-or-IP</replaceable></term>
           <listitem>
               <para>
                This mandatory option provides the host in which SpecTcl is
                running.  The value of this option can be either a
                DNS hostname that can be resolved by DNS on the system in which
                you are running <literal>xaminerunner</literal> or an IP address.
               </para>
            </listitem>
        </varlistentry>
        <varlistentry>
           <term><option>--port</option>=<replaceable>rest-port-or-service</replaceable></term>
           <listitem>
               <para>
                This required option
                provides information about the port on which the SpecTcl REST
                server is running.  This can be either a numeric port numer or,
                if NSCLDAQ's environment variables have been set up and SpecTcl
                is using the NSCLDAQ port manager to advertise the REST
                service, the name of the service that is being advertised.
                See also <option>--user</option>
               </para>
            </listitem>
        </varlistentry>
        <varlistentry>
           <term><option>--mirror</option>=<replaceable>mirror-port-or-service</replaceable></term>
           <listitem>
               <para>
                This option is required if SpecTcl is running remotely.  It's value
                is interpreted in the same manner as
                <option>--port</option> but is the port on which SpecTcl's mirror
                server is listening.  If SpecTcl is local its mirror server will
                only be contacted if SpecTcl is runnning in a persistent container
                (e.g. by the NSCLDAQ experiment manager) in which case its shared
                memory is invisible outside of the container.
               </para>
            </listitem>
        </varlistentry>
        <varlistentry>
           <term><option>--user</option>=<replaceable>service-username</replaceable></term>
           <listitem>
               <para>
                This optional option is only used if service names advetiased
                by the NSCLDAQ port manager are used for either the
                <option>--port</option> or <option>--mirror</option> options.
                Service names in NSCLDAQ are qualified by the user advertising them.
                This option supplies the name of the user running SpecTcl.  This is
                intended for use in the experiment environment.  When running
                an experiment, several users collaborate.  One user has started
                SpecTcl under the experiment manager, but others may wish
                to visualize and interact with the spectra SpecTcl creates.
               </para>
            </listitem>
        </varlistentry>
       </variablelist>
       
    </chapter>
    <chapter>
       <title>Running Spectcl Scripts Remotely Via the REST Server</title>
       <para>
        Especially within the experiment manager, SpecTcl can be run without
        a controlling terminal.  In that case, it is necessary to use the
        REST interface to tell SpecTcl what to do.  The Tcl REST client API
        is implemented as two packages:
       </para>
       <variablelist>
        <varlistentry>
           <term><literal>SpecTclRestClient</literal></term>
           <listitem>
               <para>
                Provides an object oriented interface to the REST services
                offered by SpecTcl.  This interface can be used by scripts that know
                they will be running as REST clients.  The Reference pages in
                the appendices will describe the API offered by this package.
               </para>
            </listitem>
        </varlistentry>
        <varlistentry>
           <term><literal>SpecTclRestCommand</literal></term>
           <listitem>
               <para>
                Uses <literal>SpecTclRestClient</literal> to implement all of
                SpecTcl's commands.  This makes it possible to frame existing
                user interface scripts with a simple start up script to run
                them as REST clients.
               </para>
            </listitem>
        </varlistentry>
       </variablelist>
       <para>
        Let's start by looking at a simple framing script that starts the
        SpecTcl Tree parameter graphical user interface -- but as a REST client.
        Following a discussion of that script, we'll describe some of the differences
        between SpecTcl's native commands and the SpecTcl REST command simulation.
       </para>
       <example>
        <title>Running the Tree Parameter GUI as a REST client</title>
        <programlisting>
package require Tk                              <co id='resttree.tk' />

set SpecTclHome /usr/opt/spectcl/5.10-000       <co id='resttree.auto_path'/>
lappend auto_path [file join $SpecTclHome TclLibs]

package require SpecTclRestCommand            <co id='resttree.cmdpackage' />

if {[array names ::env DAQROOT] ne ""} {
    lappend auto_path [file join $::env(DAQROOT) TclLibs] <co id='resttree.daq.auto_path' />
}

package require portAllocator                  <co id='resttree.discovery' />
set mgr [portAllocator %AUTO% -hostname daqcompute99];
set port [$mgr findServer SpecTcl_REST fox];  # Could be different user!
$mgr destroy

if {$port eq ""} {
    error "There is no SpecTcl_REST service - perhaps SpecTcl isn't runnig"
}


SpecTclRestCommand::initialize daqcompute99  $port   <co id='resttree.initcmdpackage' />

maintainVariables 2                             <co id='resttree.vars' />
source $SpecTclHome/Script/SpecTclGui.tcl      <co id='resttree.treegui' />
wm withdraw .                                  <co id='resttree.withdrawroot' />

        </programlisting>
       </example>
       <calloutlist>
        <callout arearefs='resttree.tk' >
            <para>
                The Tree user interface is a graphical user interface and hence,
                needs the <literal>Tk</literal> package.  This explicit
                <command>package require</command> allows this script to run
                either under <command>wish</command> or <command>tclsh</command>.
            </para>
        </callout>
        <callout arearefs='resttree.auto_path' >
            <para>
                These two lines define <varname>SpecTclHome</varname> to point
                to the top level installation directory for SpecTcl version
                <literal>5.10-000</literal>, the first version to support
                remote SpecTcl's REST command  simulator.
            </para>
            <para>
                <varname>SpecTclHome</varname> is normally defined by
                SpecTcl as it starts.  We must define it ourself if our scripts
                use it.  
            </para>
            <para>
                Finally, the <filename>TclLibs</filename> subdirectory, which
                contains the SpecTcl Tcl package library is added to the
                <varname>auto_path</varname> variable so that it will be searched
                to satisfy future <command>package require</command> commands.
            </para>
        </callout>
        <callout arearefs='resttree.cmdpackage' >
            <para>
                Searches for and imports the SpecTcl command simulator over
                REST.
            </para>
        </callout>
        <callout arearefs='resttree.daq.auto_path' >
            <para>
                We're going to do service discovery in the NSCLDAQ port manager,
                assuming that SpecTcl has advertised the service name
                <literal>SpecTcl_REST</literal> for its rest server.
                Doing this requires that we import a package from NSCLDAQ.
                This line adds the <filename>TclLibs</filename> subdirectory
                of the version of NSCLDAQ who's environment variables we have
                just set up
                to the package search path.
            </para>
            <para>
                That directory contains the NSCLDAQ Tcl package library.
            </para>
        </callout>
        <callout arearefs='resttree.discovery' >
            <para>
                This chunk of code first imports the NSCLDAQ
                <literal>portAllocator</literal> package which contains,
                among other things, service discovery support.
                It then creates a <literal>portAllocator</literal> to
                perform service discovery on the host <literal>daqcompute99</literal>
                where, presumably SpecTcl is running.
            </para>
            <para>
                The <literal>portAllocator</literal> object is then asked to
                resolve the service <literal>SpecTcl_REST</literal> advertised
                by the user <literal>fox</literal> into a numerical TCP/IP port
                number.
            </para>
            <para>
                If the result is an empty string, there is no matching service.
            </para>
        </callout>
        <callout arearefs='resttree.initcmdpackage' >
            <para>
                The SpecTcl command simulator must be told where the
                REST service it is operating over lives.  This is done with the
                <command>SpecTclRestCommand::initialize</command>.  That command has
                two parameters; the host in which SpecTcl is running and the
                port on which the REST server is listening for connections.
            </para>
        </callout>
        <callout arearefs='resttree.vars' >
            <para>
                SpecTcl documents serveral variables in which state is maintained.
                This command tells the command simulator to maintain those variables,
                updating them every 2 seconds.  This is one difference between
                the simulator and the native environment.  Updates to variables
                must be fetched from the server.   This command ensures that's done
                periodically.
            </para>
        </callout>
        <callout arearefs='resttree.treegui' >
            <para>
                Sources the tree parameter GUI, starting the remote Tree GUI.
                This does not build its interface in the root window, but
                starts a new top level in which it builds its interface.
            </para>
        </callout>
        <callout arearefs='resttree.withdrawroot' >
            <para>
                Withdraws the root window from the display.   Once the
                end of the script is reached, since the <literal>Tk</literal>
                package was impored, <command>tclsh</command> enters the event
                loop dispatching e.g. user interface events, until the application
                is ended.
            </para>
        </callout>
       </calloutlist>
       <section>
        <title>Differences between the Command Simulator and Native SpecTcl.</title>
        <para>
            In the sample framing script for the tree parameter GUI, we have already
            seen two differences between the command simulator and running native.
            There are a few other differences, as well as a command in both
            SpecTcl and the command simulator to determine which environment your
            scripts are running in.
        </para>
        <para>
            This section describes all of the differences between the command
            simulator and native SpecTcl.
        </para>
        <itemizedlist>
            <listitem>
               <para>
                  The command simulator must be initialized via
                  <command>SpecTclRestCommand::initialize</command>.
                  This command tells the simulator the
                  host on which the SpecTcl server is running and the port on which
                  the REST server is listening for connections.
               </para>
            </listitem>
            <listitem>
               <para>
                  Several SpecTcl variables are not available in the command
                  simulator unless it is asked to periodically fetch them from
                  the SpecTcl REST server. The
                  <command>maintainvariables</command> accepts the number
                  of seconds between updates and sets up periodic fetches of those
                  variables.
               </para>
            </listitem>
            <listitem>
               <para>
                  The command <command>isRemote</command>  will return true
                  (1) in the simulator and false (0) in native SpecTcl.
                  You can use this to have your user interfaces take action that
                  varies depending on whether or not it is running in the
                  simulator.  One application might be to write user interfaces
                  that know how to start themselves as REST clients or native
                  scripts.
               </para>
            </listitem>
            <listitem>
               <para>
                  Several objects in SpecTcl can have traces applied to their
                  state.  For example <command>spectrum -trace</command> can be used
                  to execute user scripts when the spectrum dictionary is modified.
                  The simulator supports these but at a higher latency than
                  native SpeTcl.  
               </para>
               <para>
                The server accumulates traces for clients that have expressed interest
                in them.  The client can then request the traces that have
                accumulated since the last time it asked.  In the simulator,
                the first time a trace is created, the simulator expresses interest
                in traces to the server.  It then sets up periodic polling of
                traces the server has accumulated.  Each trace is then
                dispatched as appopriate by the simulator.
               </para>
               <para>
                A simulator variable <varname>SpecTclRestCommand::tracePollInterval</varname>
                contains the integer number of seconds between trace polls.   It is read
                after each trace poll and, therefore, is to some extent dynamic.
                The default value is <literal>2</literal> (seconds).
               </para>
            </listitem>
            <listitem>
               <para>
                  The <command>execCommand</command>  executs an arbitrary
                  command in SpecTcl returning its result to the caller.  This
                   supports user defined SpecTcl command extensions.  It is
                   also another use case for the
                   <command>isRemote</command> command.
               </para>
            </listitem>
            <listitem>
               <para>
                  Since, for the most part, <command>rootexec</command>  is used
                  to produce graphical results, the <command>rootexec</command>
                  command is not supported by the simulator.
               </para>
            </listitem>
        </itemizedlist>
       </section>
    </chapter>
    <chapter>
       <title>Using the Mirror API to Access SpecTcl Shared Display Memory.</title>
       <para>
        If you are writing a program that needs access to SpecTcl's display memory,
        the Mirror API allows your application to get a pointer to SpecTcl's display
        memory and, if necessary, set up a mirror to do so.  This allows your application
        to run remotely and to attach to the display memory of a SpecTcl
        running in a persistent container.
       </para>
       <para>
        The Mirror API consist of a header <filename>SpecTclMirrorClient.h</filename>
        installed in the SpecTcl include directory and a library
        <filename>libMirrorClient.so</filename> which your application should
        link to.  Here's a compilation/link command that assumes that
        the
        environment variable <literal>SpecTclHome</literal> is defined to
        point tothe top level of the SpecTcl installation directory for
        5.10 and later:
       </para>
       <example>
        <title>Sample Compilation With SpecTcl Mirror Client API</title>
        <cmdsynopsis>
           <command>

g++ -o <replaceable>your-exe</replaceable> -I$SpecTclHome/include \
      -L$SpecTclHome/lib <replaceable>your-files.</replaceable>   \
      -lMIrrorClient -Wl,-rpath=$SpecTclHome/lib
      
           </command>
        </cmdsynopsis>
       </example>
       <para>
        Note  that the API is written so that it should be available for C
        clients as well as C++ clients.
       </para>
       <para>
        Below are reference pages for the public entries to this library:
       </para>
       <refentry>
          <refmeta>
             <refentrytitle>getSpecTclMemory</refentrytitle>
             <manvolnum>3spectcl</manvolnum>
          </refmeta>
          <refnamediv>
             <refname>getSpecTclMemory</refname>
             <refpurpose>Get Pointer to SpecTcl Display Memory</refpurpose>
           </refnamediv>
           <refsynopsisdiv>
            <programlisting>
#include &lt;SpecTclMirrorClient.h&gt;
            </programlisting>
            <funcsynopsis>
                <funcprototype>
                    <funcdef>
                        <type>void*</type>
                        <function>
                            getSpecTclMemory
                            
                        </function>
                    </funcdef>
                    <paramdef>
                        <type>const char*</type><parameter>host</parameter>
                    </paramdef>
                    <paramdef>
                        <type>const char*</type><parameter>rest</parameter>
                    </paramdef>
                    <paramdef>
                        <type>const char*</type><parameter>mirror</parameter>
                    </paramdef>
                    <paramdef>
                        <type>const char*</type><parameter>user</parameter>
                        <initializer>0</initializer>
                    </paramdef>
                </funcprototype>
            </funcsynopsis>
           </refsynopsisdiv>
           <refsect1>
                 <title>DESCRIPTION</title>
                 <para>
                   If the SpecTcl with REST and Mirror servers
                   in <parameter>host</parameter> described by
                   <parameter>rest</parameter>,
                   <parameter>mirror</parameter> <parameter>host</parameter>
                   and optionally <parameter>user</parameter> has a local
                   shared display memory that can be mapped, the memory
                   is mapped and a pointer to the resulting virtual memory address
                   is returned.
                 </para>
                 <para>
                    If the memory cannot be mapped:
                 </para>
                 <orderedlist>
                    <listitem>
                        <para>
                            If there is an existing mirror the locally mirrored
                            shared memory is mapped.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            If there is not an exisiting mirror a new mirror is set
                            up and the locally mirrored shared memory is mapped.
                        </para>
                    </listitem>
                 </orderedlist>
           </refsect1>
           <refsect1>
            <title>PARAMETERS</title>
            <variablelist>
                <varlistentry>
                   <term><type>const char*</type><parameter>host</parameter></term>
                   <listitem>
                       <para>
                        The host in which SpecTcl is running.  This can be supplied
                        either as a DNS name or an IP address in character form
                        e.g. <literal>"10.20.30.40"</literal>.
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><type>const char*</type><parameter>rest</parameter></term>
                   <listitem>
                       <para>
                        The port on which SpecTcl is listening to connections
                        to its REST server.  This can be either a string representation
                        of a valid integer (e.g. <literal>"8080"</literal>) or,
                        if SpecTcl is running in the NSCLDAQ environment and
                        advertising its REST server with the NSCLDAQ Port manager,
                        the name of the service SpecTcl is advertising.
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><type>const char*</type><parameter>mirror</parameter></term>
                   <listitem>
                       <para>
                        The port on which SpecTcl is listening to connections to its
                        Mirror server.  As with <parameter>rest</parameter>,
                        this can either be a string representation of an integer port
                        number or an NSCLDAQ Port manager service
                        advertised for the mirror server by SpecTcl.
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><type>const char*</type><parameter>user</parameter></term>
                   <listitem>
                       <para>
                        This is only required if either <parameter>rest</parameter>
                        or <parameter>mirror</parameter> are services
                        advertised by the NSCLDAQ port manager and are advertised
                        by a different user than the user running this program.
                        If omitted, and NSCLDAQ  port manager services are used,
                        this defaults to the result from the
                        <function>getlogin(3)</function> library function which,
                        normally, returns the current, logged in, user.
                       </para>
                    </listitem>
                </varlistentry>
            </variablelist>
           </refsect1>
           <refsect1>
            <title>RETURN VALUES</title>
            <para>
                The return value is either a pointer to the mapped memory,
                regardless of how it was mapped or a null pointer, reflecting that
                the operation failed.  
            </para>
            <para>
                See <function>Mirror_errorCode</function>  and
                <function>Mirror_errorString</function> to get the reason for the
                failure and a human readable error message to describe it.
            </para>
           </refsect1>
           <refsect1>
            <title>ERRORS</title>
            <para>
                At present the valid errors (from <function>Mirror_errorCode</function>)
                are:
            </para>
            <variablelist>
                <varlistentry>
                   <term><literal>MIRROR_SUCCESS</literal></term>
                   <listitem>
                       <para>
                        Successful completion.  In fact this will be the value
                        from <function>Mirror_errorCode</function> when
                        a non null pointer is returned.
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><literal>MIRROR_NORESTSVC</literal></term>
                   <listitem>
                       <para>
                        Either the REST service coiuld not be resolved
                        via the NSCLDAQ port manager in the specified host,
                        or a port could be determined but no connection
                        could be formed.
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><literal>MIRROR_NOMIRRORSVC</literal></term>
                   <listitem>
                       <para>
                        Similar to <literal>MIRROR_NO_RESTSVC</literal> but
                        for the mirror service.
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><literal>MIRROR_CANTGETUSERNAME</literal></term>
                   <listitem>
                       <para>
                        No <parameter>user</parameter> parameter was supplied but
                        <function>getlogin</function> failed. In this case the
                        reason for that failure should be in
                        <varname>errno</varname>.
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><literal>MIRROR_CANTGETSIZE</literal></term>
                   <listitem>
                       <para>
                        The REST request to SpecTcl to get the size of the
                        shared memory region failed.
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><literal>MIRROR_CANTGETMIRRORS</literal></term>
                   <listitem>
                       <para>
                        The REST request to get the list of mirrors SpecTcl
                        is currently maintaining failed.
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><literal>MIRROR_SETUPFAILED</literal></term>
                   <listitem>
                       <para>
                        The attempt to set up a new mirror to the local host for
                        SpecTcl's display shared memory failed.
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term>MIRROR_CANTGETHOSTNAME</term>
                   <listitem>
                       <para>
                        Can't determine the name of the current host.  This
                        prevents us from determining if there is already a mirror
                        present to this host when direct mapping failes.
                       </para>
                    </listitem>
                </varlistentry>
            </variablelist>
           </refsect1>
       </refentry>
       <refentry>
          <refmeta>
             <refentrytitle>Mirror_errorCode</refentrytitle>
             <manvolnum>3specTcl</manvolnum>
          </refmeta>
          <refnamediv>
             <refname>Mirror_errorCode</refname>
             <refpurpose>Get the numeric error code.</refpurpose>
           </refnamediv>
           <refsynopsisdiv>
            <programlisting>
#include &lt;SpecTclMirrorClient.h&gt;
            </programlisting>
            <funcsynopsis>
                <funcprototype>
                    <funcdef>
                        <type>int</type>
                        <function>
                           Mirror_errorCode
                            
                        </function>
                    </funcdef>
                    <void />
                </funcprototype>
            </funcsynopsis>            
           </refsynopsisdiv>
           <refsect1>
                 <title>DESCRIPTION</title>
                 <para>
                   Returns the error code from the most recent
                   call to <function>getSpecTclMemory</function>.
                   See the documentation of that funtion for possible
                   values.  See also <function>Mirror_errorString</function>.
                 </para>
           </refsect1>
       </refentry>
       <refentry>
          <refmeta>
             <refentrytitle>Mirror_errorString</refentrytitle>
             <manvolnum>3spectcl</manvolnum>
          </refmeta>
          <refnamediv>
             <refname>Mirror_errorString</refname>
             <refpurpose>Convert mirror error code into human readable string.</refpurpose>
           </refnamediv>
           <refsynopsisdiv>
            <programlisting>
#include &lt;SpecTclMirrorClient.h&gt;
            </programlisting>
            <funcsynopsis>
                <funcprototype>
                    <funcdef>
                        <type>const char*</type>
                        <function>
                           Mirror_errorString
                        </function>
                    </funcdef>
                    <paramdef>
                        <type>unsigned</type><parameter>code</parameter>
                    </paramdef>
                </funcprototype>
            </funcsynopsis>            
           </refsynopsisdiv>
           <refsect1>
                 <title>DESCRIPTION</title>
                 <para>
                   Given a value from <function>Mirror_errorCode</function>
                   returns a pointer to a string that describes the
                   error in human readable terms.
                 </para>
           </refsect1>
       </refentry>
    </chapter>
    <chapter>
       <title>Structure Of the SpecTcl Shared Display Memory</title>
       <para>
        In the previous chapters of this manual, we've described, among other things,
        how to get a pointer to a shared memory region into which, either SpecTcl
        is directly maintaining its displayable histograms, or a mirror of one
        such shared memory.  Now that you have that pointer, this chapter
        describes how to makes sense of the data in that region.
       </para>
       <para>
        The memory is divided into a fixed size header that describes the
        spectra in the region and channel data.  The SpecTcl header
        <filename>xamineDataTypes.h</filename> in <filename>$SpecTclHome/include</filename>
        describes this in the data type:  <type>Xamine_shared</type>.  This
        type has the following structure:
       </para>
       <example>
        <title>Xamine_shared - Top Level SpecTcl Shared Memory Structure</title>
        <programlisting>
typedef struct _Xamine_shared {
  spec_dimension  dsp_xy[XAMINE_MAXSPEC];
  spec_title      dsp_titles[XAMINE_MAXSPEC];
  spec_title      dsp_info[XAMINE_MAXSPEC];    /* Associated info.  */
  unsigned int    dsp_offsets[XAMINE_MAXSPEC];
  spec_type       dsp_types[XAMINE_MAXSPEC];
  spec_map        dsp_map[XAMINE_MAXSPEC];
  Statistics      dsp_statistics[XAMINE_MAXSPEC];
  spec_spectra    dsp_spectra;
  char            page_pad[PAGESIZE];

} Xamine_shared;
        </programlisting>
       </example>
       <para>
        The member <varname>dsp_spectra</varname> contains the channel data and is
        a union of the type:
       </para>
       <example>
        <title>spc_spectra Union</title>
        <programlisting>
typedef union {
    uint8_t   XAMINE_b[XAMINE_SPECBYTES];
    uint16_t  XAMINE_w[XAMINE_WORDS];
    uint32_t  XAMINE_l[XAMINE_LONGS];
} spec_spectra; 
        </programlisting>
        <para>
            This union reflects the fact that spectra can have 8, 16 or 32 bit
            channels.  While the arrays are dimensioned, in fact they may be
            any size, depending onthe size of the actual shared memory region.
            The actual dimensioning is an historical artifact.
        </para>
        <para>
            The Spectrum definitions are a set of arrays.  Corresponding
            elements of each array describe a spectrum in a specific
            <emphasis>slot</emphasis>.  The chunks of the spectrum description
            are:
        </para>
        <variablelist>
            <varlistentry>
               <term><literal>spec_dimension  dsp_xy[XAMINE_MAXSPEC];</literal></term>
               <listitem>
                   <para>
                    Defines the dimensionality of the spectrum.  The elements of the
                    <type>spec_dimension</type> struct are
                    <varname>xchans</varname> which are the number of channels on
                    the X axis of the spectrum and <varname>ychans</varname>
                    which are the number of channels on the y axis or
                    <literal>0</literal> for a one dimensional spectrum.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><literal>spec_title  dsp_titles[XAMINE_MAXSPEC]</literal></term>
               <listitem>
                   <para>
                    This part of the description contains the spectrum
                    name converted to upper case.  The
                    <type>spec_title</type> data type is a <literal>128</literal>
                    character character array.  SpecTcl normally ensures this is
                    null terminated.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><literal>spec_title      dsp_info[XAMINE_MAXSPEC]</literal></term>
               <listitem>
                   <para>
                    Contains additional titling information.  
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><literal>spec_type       dsp_types[XAMINE_MAXSPEC]</literal></term>
               <listitem>
                   <para>
                    Contains the spectrum type. <type>spec_type</type>
                    also determines how to interpret <varname>dsp_offsets</varname>
                    so we document it here first.
                   </para>
                   <para>
                    In general, the display memory can have one or two dimensional
                    spectra with a variety of data types.  A value of
                    <literal>undefined</literal> means the slot is not used.
                    <literal>twodlong</literal> means the spectrum is a 2-d
                    spectrum with 32 bit channels, <literal>twodword</literal>,
                    a 2-d spectrum with 16 bit channels and <literal>twodbyte</literal>,
                    a spectrum with 8 bit channels.
                    <literal>onedlong</literal> means the spectrum is 1-d with
                    32 bit channels and <literal>onedword</literal> means the
                    spectrum is 1-D with 16 bit channels.
                   </para>
                   
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><literal>unsigned int    dsp_offsets[XAMINE_MAXSPEC]</literal></term>
               <listitem>
                   <para>
                    This array tells you where in the <varname>dsp_spectra</varname>
                    arrays the spectrum begins for any given slot.  The interpretation
                    of this value depends on the value of
                    <varname>dsp_types</varname>:
                    If the spectrum has 8 bit channels this is an index into
                    <varname>dsp_spectra.XAMINE_b</varname>.
                    If the spectrum has 16 bit channels, this is an index ito
                    <varname>dsp_spectra.XAMINE_w</varname>. Finall if the
                    spectrum has 32 bit channels, this is an offset into
                    <varname>dsp_spectra.XAMINE_l[i]</varname>
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><literal>spec_map        dsp_map[XAMINE_MAXSPEC]</literal></term>
               <listitem>
                   <para>
                    Contains additional metadata used to scale and label axes.
                    The fields <varname>xmin</varname> and <varname>xmax</varname>
                    are the minium and maximum real coordinate system values
                    for the spectrum's x axis.  Similarly, if the spectrum is
                    2-D <varname>ymin</varname> and <varname>ymax</varname>
                    are the minimum and maximum values for the Yaxis.
                   </para>
                   <para>
                    <varname>xlabel</varname> and <varname>ylabel</varname>
                    are lables for the X and Y axis.  Each are also 128 element
                    character arrays and SpecTcl ensures they are null terminated.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><literal>Statistics      dsp_statistics[XAMINE_MAXSPEC]</literal></term>
               <listitem>
                   <para>
                    Is obsolete and maintained internally by SpecTcl.
                   </para>
                </listitem>
            </varlistentry>
        </variablelist>
       </example>
               
    </chapter>
    <appendix>
        <title>New SpecTclInit.tcl features.</title>
        <variablelist>
            <varlistentry>
               <term><varname>HTTPDPort</varname></term>
               <listitem>
                   <para>
                    This variable can be set in SpecTcl 5.0 and later. If it is
                    defined in SpecTclInit.tcl, it must be an integer value.
                    SpecTcl will then start an HTTPD/REST server listening on the
                    port number that is the value of that variable.
                   </para>
                   <para>
                    Non privileged users of SpecTcl must select a value
                    larger than <literal>1023</literal>.  If the specified
                    port is already being used, SpecTcl will search for a nearby
                    port to use.  The port number actually selected will be
                    output in the SpecTcl startup messages.
                   </para>
                   <para>
                    As described later it is also possible, in the NSCLDAQ
                    environment, to get the NSCLDAQ port manager to allocate
                    a port number and advertise a service that can be translated
                    by client software.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><varname>MirrorPort</varname></term>
               <listitem>
                   <para>
                    This variable can be set in SpecTcl 5.10 and later.  If it
                    is defined in SpecTclInit.tcl, it must be an integer value
                    greater than <literal>1023</literal>.   If defined, the
                    value is used as the listener port for the display memory
                    mirror server.  
                   </para>
                   <para>
                    The display memory mirror server supports clients creating
                    memory regions that are mirrors of the SpecTcl display shared
                    memory.
                   </para>
                </listitem>
            </varlistentry>
        </variablelist>
        <para>
            Both of the new variables support describing a listen port for a server.
            The NSCLDAQ running system provides a mechanism for allocating such ports
            from a large pool of reserved ports.  Allocated ports are associated
            with a name and user that can be resolved by clients in systems
            that have NSCLDAQ installed (but not necessarily running).
        </para>
        <para>
            A simplified allocation interface is included in SpecTcl-5.10+ as long
            as the NSCLDAQ environment variables for NSCLDAQ-12.0+ are set up.
        </para>
        <para>
            The example below is a fragment from a <filename>SpecTclInit.tcl</filename>
            script that uses this capability to assign and advertise ports
            for the REST and Mirror servers:
        </para>
        <example>
            <title>Advertising REST and Mirror Ports With the NSCLDAQ PortManager</title>
            <programlisting>
lappend auto_path [file join $SpecTclHome TclLibs]
if {[array names env DAQTCLLIBS]  ne ""} {         <co id='portman.tcllibs' />
    lappend auto_path $env(DAQTCLLIBS)
}
package require DAQService                         <co id='portman.package' />
set HTTPDPort [SpecTcl::getServicePort SpecTcl_REST] <co id='portman.advertise' />
set MirrorPort [SpecTcl::getServicePort SpecTcl_MIRROR]

            </programlisting>
        </example>
        <calloutlist>
            <callout arearefs='portman.tcllibs' >
                <para>
                    Starting with NSCLDAQ-12.0, the <filename>daqsetup.bash</filename>
                    script exports the environment variable <literal>DAQTCLLIBS</literal>.
                    This sectio of code tests for the existence of that variable and,
                    if defined, adds its value to the Tcl library package search
                    path.  If you are using a version earlier than NSCLDAQ-12.0,
                    you must either define <literal>TCLLIBPATH</literal> to point
                    to the <literal>$DAQROOT/TclLibs</literal>, or manually add
                    that directory to the <varname>auto_path</varname>.
                </para>
            </callout>
            <callout arearefs='portman.package' >
                <para>
                    The <literal>DAQService</literal> package provides a simplified
                    interface to the NSCLDAQ port manager.  It does, however
                    require the ability to load the NSCLDAQ packages that
                    interface with that port manager, hence the code to
                    extend the <varname>auto_path</varname> variable previously
                    described.
                </para>
            </callout>
            <callout arearefs='portman.advertise' >
                <para>
                    The <literal>SpecTcl::getServicePort</literal> proc
                    takes, as an argument, the name of a service you wish to
                    advertise.  It returns the port number allocated to that
                    service.  This is used to set the values of both
                    <varname>HTTPDPort</varname> and <varname>MirrorPort</varname>
                </para>
            </callout>
        </calloutlist>
    </appendix>
    <appendix>
        <title>Low Level REST API Reference</title>
        <para>
            This appendix presents reference information that describes the
            Tcl/SpecTcl REST interface
        </para>
        <refentry>
               <refmeta>
                  <refentrytitle>SpecTclRESTClient</refentrytitle>
                  <manvolnum>3spectcl</manvolnum>
               </refmeta>
               <refnamediv>
                  <refname>SpecTclRESTCient</refname>
                  <refpurpose>SpecTcl REST client package</refpurpose>
                </refnamediv>
                <refsynopsisdiv>
                    <programlisting>
    package require SpecTclRESTClient
    
    set client [SpecTclRestClient client-spec ?options...?]
    $client configure option value ?...?
    set value [$client cget option]
    
    $client applyGate gatename spectra
    $client applyList ?pattern?
    
    $client attachSource source-type source-spec ?size ?format??
    $client attachList
    
    $client sbindAll
    $client sbind spectra
    $client sbindList ?pattern?
    
    $client fitCreate name spectrum low high fit-type
    $client fitUpdate ?pattern?
    $client fitDelete fit-name
    $client fitList ?pattern?
    
    $cilent foldApply gate spectra
    $client foldList ?pattern?
    $client foldRemove spectrum
    
    $client channelGet spectrum xchannel ?ychannel?
    $client channelSet spectrum value xchannel ?ychannel?
    
    $client spectrumClear
    $client spectrumClearAll
    $client spectrumProject existing new direction snapshot ?contour?
    $client spectrumStatistics ?pattern?
    
    $client treeparameterCreate name low high bins ?units?
    $client treeparameterList ?pattern?
    $client treeparameterListNew
    $client treeparameterSet name bins low high ?units?
    $client treeparameterSetInc name newinc
    $client treeparameterSetBins name newbins
    $client treeparameterSetUnits name units
    $client treeparameterSetLimits name low high
    $client treeparameterCheck name
    $client treeparameterUncheck name
    
    $client treeparameterVersion
    $client treevariableList
    $client treevariableSet name value units
    $client treevariableCheck name
    $client treevariableSetChanged name
    $client treevariableFireTraces ?pattern?
    
    $client filterCreate name gate parameters
    $client filterDelete name
    $client filterEnable name
    $client filterDisable name
    $client filterRegate name gate
    $client filterFile name path
    $client filterList ?pattern?
    $client filterFormat name format
    
    $client gateList ?pattern?
    $client gateDelete name
    $client gateCreateSimple1D name type parameters low high
    $client gateCreateSimple2D name type xparameterse yparameters xcoords ycoords
    $client gateCreateMask name type parameter mask
    $client gateCreateCompound name type gates
    
    $client integrate name roi
    $client parameterNew name number metadata
    $client parameterDelete name ?id?
    $client parameterList pattern ?id?
    
    $client pseudoCreate name parameters body
    $client pseudoList ?pattern?
    $client pseudoDelete name
    
    $client sread filename options
    
    $client ringformat major ?minor?
    
    $client scontents name
    
    $client shmemkey
    $client shmemsize
    
    $client spectrumList ?pattern?
    $client spectrumCreate name type parameters axes ?options?
    
    $client unbindByName names
    $client unbindById ids
    $client unbindAll
    
    $client version
    
    $client swrite filename spectra ?format?
    
    $client start
    $client stop
    
    $client rootTreeCreate name parameterPatterns ?gate?
    $client rootTreeDelete name
    $client rootTreeList ?pattern?
    
    $client pmanCreate name
    $client pmanList ?pattern?
    $client pmanCurrent
    $client pmanListAll ?pattern?
    $client pmanListEventProcessors ?pattern?
    $client pmanUse name
    $client pmanAdd pipeline-name processor-name
    $client pmanRemovfe pipeline-name processor-name
    $client pmanClear name
    $client pmanClone existing-name new-name
    
    $client evbCreate name frequency basename
    $client evbadd    name source pipe-name
    $client evbList   ?pattern?
    
    $client command arbitrary-tcl-command
    
    $client getVars
    
    $client traceEstablish retention
    $client traceDone $token
    $client traceFetch $token
    
    $client mirror ?host-pattern?
    
                    </programlisting>
                </refsynopsisdiv>
                <refsect1>
                         <title>DESCRIPTION</title>
                      <para>
                        This package provides low level client access to the SpecTcl REST
                        server available in SpecTcl 5.5 and later.
                        Instantiating an object creates a new command ensemble.
                        Subcommands perform specific REST transactions.
                      </para>
                      
                </refsect1>
                <refsect1>
                    <title>OPTIONS</title>
                    <para>
                        The following two options are used to configure the
                        connections the instantiated client objects use.
                        Since connections are made for every transaction, by
                        nature, these options are dynamic.
                    </para>
                    <variablelist>
                        <varlistentry>
                           <term><option>-host</option></term>
                           <listitem>
                               <para>
                                The DNS hostname or IP address of the system
                                that will be connected to for REST transactions
                               </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                           <term><literal>-port</literal></term>
                           <listitem>
                               <para>
                                The port number that will be conneted to for REST
                                transactions.  A SpecTcl REST server must be
                                listening for connections on that port in the
                                system specified by <option>-host</option>.
                               </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </refsect1>
                <refsect1>
                    <title>METHODS</title>
                    <para>
                        Instantiated objects are command ensembles.  Each subcommand
                        of the ensemble can be thought of as an object method.
                        Two standard methods: <methodname>configure</methodname>
                        and <methodname>cget</methodname> allow users of
                        the object to configure the connection parameters of
                        the object.  Since each method that performs a REST
                        operation connects with the server each operation, the
                        configuration is fully dynamic.
                    </para>
                    <para>
                        The methods supported by the client objects are divided
                        into categories which will be described in different
                        subsections.
                    </para>
                    <refsect2>
                        <title>Conditions and gates</title>
                        <para>
                            These methods create and manipulate gates and their
                            application as conditions on spectra.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term>
                                <methodsynopsis>
                                   <type></type>
                                   <methodname>applyGate</methodname>
                                   <methodparam>
                                       <type></type><parameter>gatename</parameter>
                                   </methodparam>
                                   <methodparam>
                                       <type></type><parameter>spectra</parameter>
                                   </methodparam>
                                </methodsynopsis>
                               </term>
                               <listitem>
                                   <para>
                                    Applies a single gate, specified by
                                    <parameter>gatename</parameter> to all of the
                                    spectra named in the Tcl list of
                                    spectrum names in <parameter>spectra</parameter>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term>
                                <methodsynopsis>
                                   <type></type>
                                   <methodname>applyList</methodname>
                                   <methodparam>
                                       <type></type><parameter>pattern</parameter>
                                       <modifier>(optional)</modifier>
                                   </methodparam>
                                </methodsynopsis>
                               </term>
                               <listitem>
                                   <para>
                                    Produces a list of gate applications.
                                    If <parameter>pattern</parameter> is
                                    provided, it is a pattern against which spectrum
                                    names are matched.  The pattern can include
                                    glob (filesystem type) wildcard characters such as
                                    <literal>*</literal> and <literal>?</literal>.
                                   </para>
                                   <para>
                                    The returned value is a list of dicts.
                                    Each dict has the keys
                                    <literal>spectrum</literal>, the name of a
                                    spectrumand <literal>gate</literal>, the
                                    name of the gate applied to that spectrum.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>ungate</methodname>
                                  <methodparam>
                                      <type></type><parameter>spectra</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Removes all gates from the spectra named in the
                                    list <parameter>spectra</parameter>,
                                    replacing the applied gates with a
                                    <literal>T</literal> gate.
                                   </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Data Source and Analysis Control</title>
                        <para>
                            These methods control the data source that SpecTcl
                            analyzes data from as well as when analysis occurs.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term>
                                <methodsynopsis>
                                   <type></type>
                                   <methodname>attachSource</methodname>
                                   <methodparam>
                                       <type></type><parameter>sourceType</parameter>
                                   </methodparam>
                                   <methodparam>
                                       <type></type><parameter>sourceSpec</parameter>
                                   </methodparam>
                                   <methodparam>
                                       <type></type><parameter>size</parameter>
                                       <modifier>(optional)</modifier>
                                   </methodparam>
                                   <methodparam>
                                       <type></type><parameter>format</parameter>
                                       <modifier>(optional)</modifier>
                                   </methodparam>
                                </methodsynopsis>
                               </term>
                               <listitem>
                                   <para>
                                    Attaches a new data source to SpecTcl.
                                    If an existing source is attached, any analysis
                                    underway from it is stopped and the data source
                                    is detached.
                                   </para>
                                   <para>
                                    The <parameter>sourceType</parameter> determines
                                    the type of data source and the meaning of the
                                    <parameter>sourceSpec</parameter> parameter.
                                    Legal values are either
                                    <literal>pipe</literal> or <literal>file</literal>.
                                   </para>
                                   <para>
                                    For <literal>pipe</literal> data sources,
                                    <parameter>sourceSpec</parameter> is a
                                    command string that provides data to its
                                    stdout, which is on the other end of a pipe
                                    SpecTcl reads.  For <literal>file</literal>
                                    the data source is a file and the
                                    <parameter>sourceSpec</parameter> is the name
                                    of the event file.  Note the filename path
                                    is interpreted inthe context of SpecTcl's
                                    Tcl interpreter.
                                   </para>
                                   <para>
                                    If supplied, the <parameter>size</parameter>
                                    parameter supplies the size of the reads that
                                    SpecTcl will perform from the data source.
                                    <parameter>format</parameter> supplies a format
                                    parameter.   Unless you are analyzing very old
                                    data, the default <literal>ring</literal>
                                    format is correct.  Other legal values are
                                    <literal>nscl</literal> for the old 8k
                                    NSCLDAQ (pre 10.0) buffer format.  Or
                                    <literal>jumbo</literal> for big buffered
                                    NSCLDAQ 8.0 or earlier data.  In either
                                    case, the <parameter>size</parameter>
                                    must be the same as the size of the buffer.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term>
                                <methodsynopsis>
                                   <type></type>
                                   <methodname>attachList</methodname>
                                   <void />
                                </methodsynopsis>
                               </term>
                               <listitem>
                                   <para>
                                    Returns a string that describes what
                                    SpecTcl is attached to as a data source.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>ringformat</methodname>
                                  <methodparam>
                                      <type></type><parameter>major</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>minor</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    When attaching a data source in ring buffer
                                    format, it's necessary to specify a format version.
                                    This is because the payload format of the
                                    ringbuffers has evolved with time.
                                    Once you have attached a ring data source, you can
                                    use this method to specify the format of the
                                    ring buffers.  The <parameter>major</parameter>
                                    parameter is the major version number and
                                    currently can be <literal>10</literal> for
                                    NSCLDAQ10 and <literal>11</literal> currently
                                    for NSCLDAQ11 and higher.
                                   </para>
                                   <para>
                                    The optional <parameter>minor</parameter>
                                    parameter allows you to specify a minor verson.
                                    If not specified, this defaults to
                                    <literal>0</literal> which is normally
                                    acceptable because data formats are not
                                    allowed to change within a major version as
                                    a rule.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>start</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Starts analyzing data from the current data
                                    source.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>stop</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Stops analyzing data from the current
                                    data source.
                                   </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Display Memory Control</title>
                        <para>
                            SpecTcl maintains an arbitrary set of spectra.  Of these,
                            some or all may be stored in  a shared memory segment
                            that provides high performance, low latency access
                            to spectrum data by display programs.  These
                            methods control which spectra are in display memory and
                            which are local to SpecTcl.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>sbindAll</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Attempts to bind all defined spectra into the
                                    shared display memory.  If this fails (due
                                    to a shared memory too small to hold them all
                                    and their descriptions), an error is raised.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>sbindSpectra</methodname>
                                  <methodparam>
                                      <type></type><parameter>spectra</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Attempts to bind several spectra to the
                                    display shared memory.  The <parameter>spectra</parameter>
                                    parameter is a Tcl list of spectrumnames.
                                    If the bind fails, an error is raised.
                                    Typically the bind fails because the
                                    shared memory region is not large enough
                                    to hold all of the additional spectra.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>sbindList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns a list that describes which spectra
                                    are bound to the display memory.  If
                                    <parameter>pattern</parameter> is supplied,
                                    it must match the bound spectrum name to be
                                    included inthe output list.  If not supplied,
                                    the <parameter>pattern</parameter> defaults to
                                    <literal>*</literal> which matches all bindings.
                                   </para>
                                   <para>
                                    The return value is a list of dicts. Each dict
                                    describes a binding of a spectrum to shared
                                    memory. Each dict has the keys:
                                    <literal>spectrum</literal> which is the
                                    name of a spectrum and <literal>binding</literal>
                                    which is the Xamine  binding id.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>unbindByName</methodname>
                                  <methodparam>
                                      <type></type><parameter>names</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Unbinds the spectra listed by name
                                    in <parameter>names</parameter>
                                    (a list) from display memory. Note that
                                    this does not impact the contents of the
                                    spectra.  The spectrum contents are copied
                                    into private SpecTcl memory.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>unbindById</methodname>
                                  <methodparam>
                                      <type></type><parameter>ids</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Unbinds a list of spectra by spectrum
                                    id from display memory.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>unbindAll</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Unbinds all spectra from display memory.
                                   </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Fitting</title>
                        <para>
                            SpecTcl boasts an extensible fitting subsystem with
                            two built in fits (linear and gaussian sitting
                            on a linear background).  The methods in this section
                            provide access to that subsystem.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>fitCreate</methodname>
                                  <methodparam>
                                      <type></type><parameter>fitname</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>spectrumname</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>lowChannel</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>highChannel</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>fitType</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a new fit object named
                                    <parameter>fitname</parameter> that fits
                                    the data in the spectrum
                                    <parameter>spectrumname</parameter>
                                    between the <parameter>lowChannel</parameter>
                                    and <parameter>highChannel</parameter>
                                    parameter limits.
                                   </para>
                                   <para>
                                    The fit type is specified by <parameter>fitType</parameter>
                                    The built in fits types are 
                                    <literal>linear</literal> and
                                    <literal>gaussian</literal>.  Other fit types
                                    may be implemented and registered by the
                                    specific SpecTcl that's running the REST server.
                                    Since the <parameter>fitType</parameter>
                                    parameter is interpreted in that SpecTcl,
                                    these fit types become automatically available
                                    to REST clients.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>fitUpdate</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Since spectrum data are not, in general, static,
                                    they evolve as more data area analyzed, it's
                                    reasonable to assume that fit parameters will
                                    not be static either.  This
                                    method recomputes the fit parameters for each
                                    fit whose name matches
                                    <parameter>pattern</parameter>.  If
                                    <parameter>pattern</parameter> is not supplied,
                                    it defaults to <literal>*</literal>, which
                                    matches all fits.
                                   </para>
                                   <para>
                                    See <methodname>fitList</methodname> to
                                    get the current set of fit parameters.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>fitDelete</methodname>
                                  <methodparam>
                                      <type></type><parameter>fitname</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Deletes the fit named
                                    <parameter>fitname</parameter> releasing
                                    all resources associated with that object.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>fitList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Produces a list of fit information.
                                    The elements of the list must have fit names
                                    that match the <parameter>pattern</parameter>.
                                    If <parameter>pattern</parameter> is not provided
                                    it defaults to <literal>*</literal> which
                                    matches all fit names.
                                   </para>
                                   <para>
                                    The result is a list of dicts where each
                                    element of the list describes one fit object
                                    and has the followiung keys:
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>name</literal></term>
                                       <listitem>
                                           <para>
                                            Name of the fit.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>spectrum</literal></term>
                                       <listitem>
                                           <para>
                                            Name of the spectrum being fit.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>type</literal></term>
                                       <listitem>
                                           <para>
                                            Type of fit.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>low</literal></term>
                                       <listitem>
                                           <para>
                                            Low channel limit over which the fit
                                            is computed.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>high</literal></term>
                                       <listitem>
                                           <para>
                                            High channel limit over which the
                                            fit is computed.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>parameters</literal></term>
                                       <listitem>
                                           <para>
                                            A dict of fit parameter names and
                                            their values.  The actual parameter
                                            names will vary depending on the
                                            fit type.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Fold methods</title>
                        <para>
                            Folds are a technique used in gamma spectroscopy to remove
                            an existing peak from a spectrum as well as uncorrelated
                            peaks.  The idea in SpecTcl is to set a gate as a fold
                            on a gamma spectrum.  Such spectra increment parameter
                            sets that don't make that gate.  Applying the same gate
                            as a condition on the spectrum requires, further,
                            that only parameters that coincide with those in the
                            fold, other than those that satisfy the fold,
                            increment the spectrum.
                        </para>
                        <para>
                            The following methods provide access to SpecTcl's
                            folding implementation.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>foldApply</methodname>
                                  <methodparam>
                                      <type></type><parameter>gate</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>spectra</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Applies the gate <parameter>gate</parameter>
                                    as a fold to the spectra named by the list
                                    <parameter>spectra.</parameter>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>foldList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns information about the folds on spectra
                                    that match the <parameter>pattern</parameter>.
                                    If no <parameter>pattern</parameter> is
                                    supplied, it defaults to <literal>* </literal>
                                    which matches all spectra.
                                   </para>
                                   <para>
                                    The result is a list of dicts. Each dict describes
                                    a spectrum with an applied fold and has the keys:
                                    <literal>spectrum</literal> - name of the spectrum
                                    and <literal>gate</literal> name of the
                                    gate that's applied as a fold to that spectrum.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>foldRemove</methodname>
                                  <methodparam>
                                      <type></type><parameter>spectrum</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Removes any fold that might be applied to the
                                    <parameter>specrum</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Accessing spectrum contents</title>
                        <para>
                            Several SpecTcl commands allow script to acces
                            spectrum contents.  These are documented in this
                            section.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>channelGet</methodname>
                                  <methodparam>
                                      <type></type><parameter>spectrum</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>xchannel</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>ychannel</parameter>
                                      <modifier>(Only for 2d spectra).</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns the value of a channel in the spectrum
                                    <parameter>spectrum.</parameter>
                                    <parameter>xchannel</parameter> always must be
                                    supplied and is either the 1d channel number
                                    to be accessed or the x coordinate of the channel
                                    if a 2d spectrum.  2d Spectra require an additional
                                    <parameter>ychannel</parameter> to specify the
                                    y coordinate of th channel to be fetched.
                                   </para>
                                   <para>
                                    On success, the result is an integer value that
                                    is the current value of the requested spetrum
                                    channel.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>channelSet</methodname>
                                  <methodparam>
                                      <type></type><parameter>spectrum</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>value</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>xchannel</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>ychannel</parameter>
                                      <modifier>(Only for 2d spectra).</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Sets the value of the specified channel
                                    in <parameter>spectrum</parameter> to
                                    <parameter>value</parameter>.  The
                                    <parameter>xchannel</parameter> and
                                    <parameter>ychannel</parameter> parameters
                                    have the same meaning and requirements as in
                                    <methodname>channelGet</methodname>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>spectrumClear</methodname>
                                  <methodparam>
                                      <type></type><parameter>spectrum</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Clears the spectrum named <parameter>spectrum</parameter>.
                                    By clear we mean that all channels in that
                                    spectrum are set to <literal>0</literal>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>spectrumClearAll</methodname>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                      Zeroes all channels in all spectra.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>spectrumStatistics</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    In addition to channel values, Spectra, maintain
                                    over and undeflow counters, indicating when
                                    an event would have caused an increment off
                                    either end of that spectrum.
                                   </para>
                                   <para>
                                    This method returns the statistics of spectra
                                    whose name match <parameter>pattern</parameter>.
                                    If <parameter>pattern</parameter> is not provided
                                    it defaults to <literal>*</literal> which
                                    matches all spectrum names.
                                   </para>
                                   <para>
                                    The returned value is a list of dicts. The
                                    dicts contain the keys:
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>name</literal></term>
                                       <listitem>
                                           <para>
                                            Name of the spectrum whose statistics
                                            are in this dict.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>underflows</literal></term>
                                       <listitem>
                                           <para>
                                            For 1d spectra, this is a single value
                                            that represents the number of times an
                                            increment would have occured past the
                                            left edge of the specturm.  
                                           </para>
                                           <para>
                                            For 2d spectra this is a two element list
                                            where the first element is as above
                                            and the second element is the number
                                            of times an event would have incremented
                                            below the bottom edge of the spectrum.
                                            Clearly there can be events that incremenbt
                                            bothof these counters.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>overflows</literal></term>
                                       <listitem>
                                           <para>
                                            Similarly to <literal>undeflows</literal>
                                            but for events that would increment
                                            to the right of the spectrum limits and,
                                            for 2d spectra above the top of the
                                            spectrum.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>scontents</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns the complete contents of the
                                    spectrum <parameter>name</parameter>.
                                    The spectrum contents are returned as
                                    a dict with the keys:
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>xoverflow</literal></term>
                                       <listitem>
                                           <para>
                                            The number of X axis (or 1d) overflows
                                            since the last time the spectrum
                                            was cleared.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>yoverflow</literal></term>
                                       <listitem>
                                           <para>
                                            Only present for 2d spectra, the number
                                            of overflows on the y axis.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>xunderflow</literal></term>
                                       <listitem>
                                           <para>
                                            The number of X axis (or 1d) undeflows
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>yunderflow</literal></term>
                                       <listitem>
                                           <para>
                                            The number of Y axis (only  present for
                                            2d spectra) underflows.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>channels</literal></term>
                                       <listitem>
                                           <para>
                                            Spectrum channel data. This is a list
                                            of dicts, one for each nonzero channel
                                            that contain:
                                            <literal>x</literal>, the X channel or
                                            1d channel, <literal>Y</literal> the
                                            Y channel for 2d spectra only and
                                            <literal>v</literal> the value at the
                                            specified channel.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Spectrum  Management</title>
                        <para>
                            Spectra in SpecTcl are dynamic entities.  They can be
                            created at any time, deleted at any time.  They can
                            have gates applied to them at any time.
                        </para>
                        <para>
                            The methods described in this section provide access
                            to SpecTcl commands that manipulate the set of SpecTcl
                            spectra.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>spectrumProject</methodname>
                                  <methodparam>
                                      <type></type><parameter>oldName</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>newName</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>direction</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>snapshot</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>gate</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a new spectrum from an existing 2-d
                                    spectrum.  The initial contents of the
                                    new spectrum (named <parameter>newName</parameter>)
                                    are created by summing channels either vertically
                                    or horizontally  from the existing spectrum
                                    named <parameter>oldName</parameter>.
                                   </para>
                                   <para>
                                    <parameter>direction</parameter>
                                    determines the axis onto which the projection is
                                    performed.  If <literal>x</literal> y channels
                                    are summed to produce a single  channel.
                                    If <literal>y</literal>, X channels are summed
                                    to produce a single channel.
                                   </para>
                                   <para>
                                    If <parameter>snapshot</parameter>, a flag,
                                    is zero, once <parameter>newName</parameter>
                                    is created it is hooked into the histogramming
                                    system so that new events can increment
                                    that spectrum. If non-zero, this is not done,
                                    creating a snapshot projection that never updates.
                                   </para>
                                   <para>
                                    If <parameter>contour</parameter> is provided it
                                    must be the name of a contour gate that,
                                    if <parameter>snapshot</parameter> is
                                    <literal>0</literal> will be applied to the
                                    <parameter>newName</parameter> spectrum.
                                    Furthermore, only the channels in
                                    <parameter>oldName</parameter> that are inside
                                    that contour are used to populate the initial
                                    values of <parameter>newName</parameter>.
                                   </para>
                                   <para>
                                    The spectrum is entered into SpecTcl spectrum
                                    name dictionary, regardless and can, therefore
                                    be used wherever a spetrum name can be used
                                    both in this API and in SpecTcl's commands.
                                    Note that initially, the spectrum is not
                                    bound into the display memory but that can
                                    be accomplished via <methodname>sbindSpectra</methodname>
                                    if desired or locally via the
                                    <command>sbind</command> command.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>spectrumList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns information about spectrum definitions
                                    for spectra with names that match
                                    <parameter>pattern</parameter>.  If the
                                    optional <parameter>pattern</parameter>
                                    parameter is not supplied it defaults to
                                    <literal>*</literal> which matches all
                                    spectrum names.
                                   </para>
                                   <para>
                                    The returned value is a list of dicts. Each
                                    dict describes one spectrum and contains the
                                    following keys:
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>name</literal></term>
                                       <listitem>
                                           <para>
                                            Spectrum name 
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>type</literal></term>
                                       <listitem>
                                           <para>
                                            Spectrum type code. See
                                            the SpecTcl command reference
                                            <command>spectrum</command> for
                                            legal spectrum types.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>parameter</literal></term>
                                       <listitem>
                                           <para>
                                            List of parameter names the spectrum
                                            needs.  The spectrum type tells how to
                                            interpret these.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>axes</literal></term>
                                       <listitem>
                                           <para>
                                            A list of one or two axis definitions.
                                            Each axis definition is a dict with the
                                            keys <literal>low</literal>,
                                            <literal>high</literal> and
                                            <literal>bins</literal> with obvious
                                            meanings.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>chantype</literal></term>
                                       <listitem>
                                           <para>
                                            Channel data type this is currently one
                                            of  <literal>long</literal>.
                                            <literal>word</literal> or
                                            <literal>byte</literal>.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>gate</literal></term>
                                       <listitem>
                                           <para>
                                            Name of the gate applied to the spectrum.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>spectrumDelete</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Deletes a spectrum named <parameter>name</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>spectrumCreate</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>type</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>parameters</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>axes</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>options</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a new spectrum <parameter>name</parameter>
                                    with the type <parameter>type</parameter>.
                                    The spectrum uses <parameter>parameters</parameter>
                                    in a manner that is type dependent.
                                    The <parameter>axes</parameter> parameter is a list
                                    of one (1-d) or 2 (2-d) axis definitions.
                                    Each axis is a three element low, high,
                                    bins list.
                                   </para>
                                   <para>
                                    <parameter>options</parameter> is a dict
                                    (that can be empty). which provides additional
                                    spectrum options and the ability of some
                                    spectra to be unusual.
                                   </para>
                                   <para>
                                    The keys the method uses are:
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>chantype</literal></term>
                                       <listitem>
                                           <para>
                                            Channel type.  One of
                                            <literal>long</literal>,
                                            <literal>short</literal> or
                                            <literal>byte</literal>.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>direction</literal></term>
                                       <listitem>
                                           <para>
                                            Only used if the type is
                                            <literal>2dproj</literal>,
                                            this specifies the direction of the
                                            projection.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>roigate</literal></term>
                                       <listitem>
                                           <para>
                                            Only used for <literal>2dproj</literal>,
                                            This is the gate that specifies the
                                            region projected.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Parameter access.</title>
                        <para>
                            SpecTcl has two levels of parameter definition.  Raw
                            parameters make a correspondence between a slot in
                            the <classname>CEvent</classname> object that
                            the event processing pipeline fills in and a parameter
                            name.  This is the oldest and most primitive type of SpecTcl
                            parameter.
                        </para>
                        <para>
                            The second level of parameter definition was originally
                            developed by Daniel Bazin and provides additional
                            metadata about the tree parameter that can be used
                            to suggest how to build spectra using those parameters.
                            Furthermore, treeparameter creation automatically creates
                            an underlying primitive parameter allocatin an
                            unused slot.  Finally the <classname>CTreeParameter</classname>
                            and <classname>CTreeParameterArray</classname>
                            classes available to event processors allows event
                            processors to be written without referencing specific
                            slots in the <classname>CEvent</classname> object.
                        </para>
                        <para>
                            This set of client methods provide support for
                            manipulating both tree parameters and low level
                            primitive parameters.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treeparameterCreate</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>low</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>high</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>bins</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>units</parameter>
                                      <modifier>optional</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a new tree parameter bound to the
                                    primitive parameter <parameter>name</parameter>.
                                    The parameter is assumed to run between
                                    <parameter>low</parameter> and
                                    <parameter>high</parameter> (double precision
                                    floating point parameters) and has sufficient
                                    resolution to allow for a histogram axis to have
                                    <parameter>bins</parameter> bins.
                                    The optional <parameter>units</parameter>
                                    parameter provides units of measure.
                                   </para>
                                   <para>
                                    Use cases for creating tree parameters at script
                                    level include wanting to wrap an existing
                                    primitive parameter (used in the event processors
                                    as a primitive parameter) in the metadata
                                    that tree parameters have.  Furthermore,
                                    a treeparameter may be created at script level
                                    to allow it to be computed at script level
                                    as a <command>psuedo</command> parameter.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treeparameterList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>optional</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns a list of dicts that describe
                                    the tree parameters
                                    with names that match the
                                    <parameter>pattern</parameter>.
                                    <parameter>pattern</parameter> can include glob
                                    wild card characters and is optional.  If
                                    not supplied, it defaults to <literal>*</literal>
                                    which matches all tree parameters.
                                   </para>
                                   <para>
                                    The dicts in the list contain the following
                                    keys:
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>name</literal></term>
                                       <listitem>
                                           <para>
                                            The parameter name.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>bins</literal></term>
                                       <listitem>
                                           <para>
                                            Suggested axis binning
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>low</literal></term>
                                       <listitem>
                                           <para>
                                            Suggested axis low limit.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>high</literal></term>
                                       <listitem>
                                           <para>
                                            Suggested axis high limit.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>units</literal></term>
                                       <listitem>
                                           <para>
                                            Units of measure.  THis will be an
                                            empty string if none have been
                                            specified for the tree parameter.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treeparameterNew</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns a list of the tree parameter names
                                    that have been programmtically created.
                                    Note this includes those created by the
                                    <methodname>treeparameterCreate</methodname>
                                    method or other client software, as well
                                    as those  created locally via SpecTcl's
                                    <command>treeparameter-create</command>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treeparameterSet</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>bins</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>low</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>high</parameter>
                                  </methodparam>
                                  
                                  <methodparam>
                                      <type></type><parameter>units</parameter>
                                      <modifier>optional</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Sets new values for all of the metadata
                                    associated with the tree parameter
                                    <parameter>name</parameter>.  See
                                    <methodname>treeparameterCreate</methodname>
                                    for a description of the parameters.
                                   </para>
                                   <para>
                                    Note that this only affects the metadata
                                    associated with the tree parameter. Spectra
                                    using the parameter are no modified in
                                    any way.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treeparameterSetInc</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>newInc</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Provides a new channel width for the tree
                                    parameter <parameter>name</parameter>.  This recomputes the
                                    bins metadata given the width, low and high
                                    limits in the existing metadata so that each
                                    bin has the width <parameter>newInc</parameter>
                                   </para>
                                   <para>
                                    Note again, this only affects the metadata
                                    in the tree parameter.  No spectra that depend
                                    on the tree parameter are modified.
                                   </para>
                                   <para>
                                    See <methodname>treeparameterSeteBins</methodname>
                                    below for a more direct way to change the binning,
                                    though sometimes you really want control over
                                    the channel width...e.g. if the units are
                                    <literal>cm</literal> you might want sufficient
                                    bins so that each channel is 1mm wide.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term>
                                <methodsynopsis>
                                   <type></type>
                                   <methodname>treeparameterSetBins</methodname>
                                   <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>newBins</parameter>
                                  </methodparam>
                                </methodsynopsis>
                               </term>
                               <listitem>
                                   <para>
                                    Sets the number of recommended bins for
                                    the tree parameter <parameter>name</parameter>
                                    to be <parameter>newBins</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treeparameterSetUnits</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>newUnits</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Sets the treeparameter <parameter>name</parameter>
                                    units of measure to <parameter>newUnits</parameter>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treeparameterSetLimits</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>newLow</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>newHign</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Sets new low (<parameter>newLow</parameter>)
                                    and new high (<parameter>newHigh</parameter>)
                                    limits for the metadata
                                    associated with <parameter>name</parameter>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treeparameterCheck</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Tree parameters know if their definitions
                                    have been modified.  This method checks
                                    <parameter>name</parameter> and returns a boolean
                                    true value if <parameter>name</parameter>'s
                                    was modified
                                   </para>
                                   <para>
                                    The use case for this method is to reduce
                                    the information a program has to write to
                                    a saved settings file.  Since in general,
                                    tree parameters are created programmatically
                                    in the C++ code, the only tree parameters that
                                    need to be written are those with the change
                                    flag set and those created at script  level.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treeparameterUnCheck</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Clears the flag that's returned by
                                    <methodname>treeparameterCheck</methodname>.
                                    A suitable smart user interface could do this
                                    if, e.g. the tree parameter's metadata, having
                                    been modified, is reset to its original
                                    condition.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term>
                                <methodsynopsis>
                                   <type></type>
                                   <methodname>treeparameterVersion</methodname>
                                    <void />
                                </methodsynopsis>
                               </term>
                               <listitem>
                                   <para>
                                    Returns the version string for the tree
                                    parameters subsystem.  The intent of this
                                    is to allow the tree parameter system to
                                    have additional capabilities with time.
                                    Knowing the version at which a capability
                                    was added would allow the application developer
                                    to use this interface to determine if specific
                                    capabilities are available.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>parameterNew</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>number</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>metadata</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a new primitive
                                    parameter; <parameter>name</parameter>
                                    bound to slot <parameter>number</parameter>
                                    in the <classname>CEvent</classname>
                                    object filled out by the data analysis pipeline.
                                   </para>
                                   <para>
                                    <parameter>metadata</parameter> is a dict
                                    that's used to pass a varying set of optional
                                    metadata about the parameter.  It can be
                                    an empty dict, in which case, the parameter
                                    has no metadata
                                   </para>
                                   <para>
                                    Keys used by this method are:
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>resolution</literal></term>
                                       <listitem>
                                           <para>
                                            Optional number of bits of resolution
                                            the parameter covers.  This
                                            provides a range of parameters most
                                            suited for a value that comes from
                                            some device like a digitizer.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>low</literal></term>
                                       <listitem>
                                           <para>
                                            Low limit value of the parameter.  Requires
                                            <literal>high</literal> and
                                            <literal>units</literal> also be present.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>high</literal></term>
                                       <listitem>
                                           <para>
                                            High limit on the parameter. Requires
                                            that <literal>low</literal> and
                                            <literal>units</literal> also be present.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>units</literal></term>
                                       <listitem>
                                           <para>
                                            Units of measure string. No other
                                            keys are required.  Note that units of
                                            measure can be an empty string if
                                            needed.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>parameterDelete</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>id</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Deletes the primitive parameter
                                    <parameter>name</parameter>.  If the
                                    <parameter>name</parameter> is an empty
                                    string the <parameter>id</parameter>
                                    parameter is then required and specifies
                                    the number of the parameter to delete.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type>parameterList</type>
                                  <methodname></methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>id</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a list of the definitions whose
                                    parameter names match the
                                    <parameter>pattern</parameter>. If
                                    <parameter>pattern</parameter> is not
                                    supplied it defaults to <literal>*</literal>
                                    matching all parameters.
                                   </para>
                                   <para>
                                    If <parameter>pattern</parameter>is an empty
                                    string <parameter>id</parameter> is required
                                    and is the parameter number of the parameter
                                    to list.
                                   </para>
                                   <para>
                                    The result is a list of dicts that contain
                                    the following keys.  Note that metadata
                                    that has not been specified will be returned
                                    as empty strings.
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>name</literal></term>
                                       <listitem>
                                           <para>
                                            The parameter name
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>id</literal></term>
                                       <listitem>
                                           <para>
                                            Th parameter number (id).
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>resolution</literal></term>
                                       <listitem>
                                           <para>
                                            Parameter resolution in bits if
                                            supplied.
                                           </para>
                                           
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>low, high</literal></term>
                                       <listitem>
                                           <para>
                                            Parameter value limits if supplied.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>units</literal></term>
                                       <listitem>
                                           <para>
                                            Parameter units of measure, if supplied.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Tree variable methods</title>
                        <para>
                            Parallel to the <literal>treeparameter</literal>
                            subsystem is a <literal>treevariable</literal>
                            subsystem.  These are jackets for Tcl variables in
                            SpecTcl that contain floating point values and are both easy to access from C++
                            code  via the <classname>CTreeVariable</classname>
                            and have additional metadata.
                        </para>
                        <para>
                            This section of the manpage describes the
                            methods that manipulate tree variables over the
                            REST interface.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treevariableList</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Lists all tree variables and their metadata.
                                    This returns a list of dicts.   Each dict describes
                                     a tree variable and contains the following
                                     keys:
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>name</literal></term>
                                       <listitem>
                                           <para>
                                            Name of the tree variable.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>value</literal></term>
                                       <listitem>
                                           <para>
                                            Current tree variable value.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>units</literal></term>
                                       <listitem>
                                           <para>
                                            Units of measure metadata that's
                                            associated with the tree variable.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treevariableSet</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>value</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>units</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Modifies a tree variable and its metadata.
                                    <parameter>name</parameter> specifies the
                                    treevariable to modify while <parameter>value</parameter>
                                    is the new value assigned to that variable
                                    and <parameter>units</parameter> a new
                                    units of measure metadata.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treevariableCheck</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Check the changed flag of the tree variable
                                    <parameter>name</parameter>.
                                    This flag is set automatically if a tree variable
                                    value/metadata are modified.  In addition,
                                    <methodname>treevariableSetChanged</methodname>
                                    can set this flag.
                                   </para>
                                   <para>
                                    As with the check flag for tree parameters,
                                    the intent is to allow user interface authors
                                    to reduce the amount of data written to saved
                                    settings file.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term>
                                <methodsynopsis>
                                   <type></type>
                                   <methodname>treevariableSetChanged</methodname>
                                   <methodparam>
                                       <type></type><parameter>name</parameter>
                                   </methodparam>
                                </methodsynopsis>
                               </term>
                               <listitem>
                                   <para>
                                    Sets the tree variable changed flag for
                                    <parameter>name</parameter>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treevariableFireTraces</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Tcl supports tracing variable chagnes.  If
                                    a variable is modified at script level, traces
                                    automatically fire, if, however variables bound
                                    to memory are modified by modifying that
                                    memory, traces need to be manually fired.
                                   </para>
                                   <para>
                                    This is needed if a <classname>CTreevariable</classname>
                                    instance if assigned a value by C++ code.
                                   </para>
                                   <para>
                                    This method programmatically fires any needed
                                    variable traces for tree variables
                                    that match the optional <parameter>pattern</parameter>
                                    argument.  If <parameter>pattern</parameter>
                                    is not provided, it default to
                                    <literal>*</literal> which matches all tree
                                    variables.
                                   </para>
                                </listitem>
                            </varlistentry>
                            
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Filter manipulation methods</title>
                        <para>
                            Filter are SpecTcl entities that live on the
                            histogramming pipeline.  They can write a subset of
                            events with a subset of parameters to output files.
                            Usually filter files are written such that
                            reading data from filter files is much faster
                            than reading data from event files with a similar
                            number of events.
                        </para>
                        <para>
                            Filter file formats are extensible.  See the
                            SpecTcl programming reference.  The client methods
                            for manipulating filters are:
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>filterCreate</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>gate</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>parameters</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a new filter object. <parameter>name</parameter>
                                    is the name that's associated with that object.
                                    <parameter>gate</parameter> specifies the
                                    filter's gate.  Only events that satisfy that
                                    gate will be written to the filter output
                                    file.  Note that you can use a <literal>T</literal>
                                    gate to write all events.
                                   </para>
                                   <para>
                                    <parameter>parameters</parameter> specifies
                                    the list of parameter names that determines
                                    which parameters are written to the output file
                                    for each event that satisfies the filter's
                                    gate.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>filterDelete</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Deletes the filter object
                                    <parameter>name</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>filterEnable</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Enables the filter  <parameter>name</parameter>
                                    to write data.  Note that the filter must first
                                    be given an output file.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>filterDisable</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Disables the filter <parameter>name</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>filterRegate</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>gate</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Changes the gate that determines which
                                    events are written from filter
                                    <parameter>name</parameter> to
                                    <parameter>gate</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>filterFile</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>path</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Sets the file for filter <parameter>name</parameter>
                                    to <parameter>path</parameter>.  This determines
                                    where the filter, when enabled, will write
                                    data.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>filterList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns a list of dicts describing filters
                                    whose names match <parameter>pattern</parameter>.
                                    If the optional <parameter>pattern</parameter>
                                    command is not provided it defaults to
                                    <literal>*</literal> which matches all
                                    filter names.
                                   </para>
                                   <para>
                                    Each dict in the list describes a filter and
                                    contains the following keys:
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>name</literal></term>
                                       <listitem>
                                           <para>
                                            The name of the filter described
                                            by this dict.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>gate</literal></term>
                                       <listitem>
                                           <para>
                                            The gate that filters events for
                                            this filter.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>file</literal></term>
                                       <listitem>
                                           <para>
                                            The output file to which this
                                            filter writes data.  This is an
                                            empty string if not yet set.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>parameters</literal></term>
                                       <listitem>
                                           <para>
                                            List of parameter nams of the parameters
                                            that will be written to the filter
                                            file for each event that satisfies
                                            the filter's gate.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>format</literal></term>
                                       <listitem>
                                           <para>
                                            Format of the filter file. SpecTcl
                                            comes with a built-in format
                                            <literal>xdr</literal> but this
                                            can be extended programmatically
                                            in the specific tailored SpecTcl
                                            that's being run.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>filterFormat</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>format</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Sets the filter format for <parameter>name</parameter>
                                    to be <parameter>format</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Gate manipulation methods</title>
                        <para>
                            One of SpecTcl's strengths is its ability to conditionalize
                            the increment of spectra on events that satisfy
                            a condition.  SpecTcl refers to these conditions
                            as gates.  Gates are applied to spectra to perform
                            this conditionalization.
                        </para>
                        <para>
                            SpecTcl provides a rich set of gates that will
                            not all be described here. See the
                            SpecTcl command reference.  This section
                            describes the methods that can create and manipulate
                            gates.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>gateList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Produces a list that contains descriptions
                                    of the gates whose names match the
                                    <parameter>pattern</parameter>.  If
                                    <parameter>pattern</parameter> is not
                                    provided, it defaults to <literal>*</literal>
                                    which matches all names.
                                   </para>
                                   <para>
                                    The contents of the list are dicts. Some dict
                                    keys are always present while the presence of
                                    others depends on the gate type.
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>name</literal> (always)</term>
                                       <listitem>
                                           <para>
                                            Name of the gate.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>type</literal> (always)</term>
                                       <listitem>
                                           <para>
                                            The SpecTcl gate type code. See
                                            the SpecTcl Command Reference
                                            discussion of the <command>gate</command>
                                            command.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>gates</literal>
                                       (+,*,- gates only)
                                       </term>
                                       <listitem>
                                           <para>
                                            List of gates the gate depends on.
                                            Note that for a <literal>-</literal>
                                            gate there will only ever be a single
                                            dependent gate.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>parameters</literal>
                                       (s,c,b,c2vband,gs,gb,gc,em,am,nm gates only)</term>
                                       <listitem>
                                           <para>
                                            List of the parameters the gate
                                            depends on.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>points</literal>
                                       (c,b,c2band,gb,gc only)</term>
                                       <listitem>
                                           <para>
                                            A list of points that define a
                                            2d gate.  The points are a list
                                            of 2 element sublists where the first
                                            element of each sublist is an x
                                            coordinate and the second the y.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>low</literal>, <literal>high
                                       (s,gs only)</literal></term>
                                       <listitem>
                                           <para>
                                            Low and High limits of 1-d gates.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>value</literal>
                                       (em,am,nm only)</term>
                                       <listitem>
                                           <para>
                                            Mask value for the mask gates.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>gateDelete</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Deletes the gate <parameter>name</parameter>.
                                    Note that SpecTcl never actually deletes gates
                                    as that produces ill defined results for gate
                                    dependencies.  Instead deleted gates
                                    are turned into False gates (type <literal>F</literal>).
                                    This has well defined effects on gate dependencies.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>gateCreateSimple1D</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>gatetype</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>parameters</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>low</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>high</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a simple 1-d gate.  The gate will
                                    be called <parameter>name</parameter> and
                                    has a type <parameter>gatetype</parameter>.
                                    <parameter>parameters</parameter> is a list of
                                    the parameter names the gate depends on.
                                    <parameter>low</parameter> and
                                    <parameter>high</parameter> are the limits of the
                                    gate.
                                   </para>
                                   <para>
                                    THe only valid gate types are
                                    <literal>s</literal> and <literal>gs</literal>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>gateCreateSimple2D</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>gatetype</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>xparameters</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>yparameters</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>xcoords</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>ycoords</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a simple 2d gate <parameter>name</parameter>.
                                    The gate type is <parameter>gatetype</parameter>
                                    and must be one of
                                    <literal>b,c,gb,gc</literal>.
                                    <parameter>xparameters</parameter> and
                                    <parameter>yparameters</parameter> specify
                                    the list of parameter names on the X and Y axis
                                    of the gate.  Note that for gamma 2-d gates,
                                    it does not matter which parameters are in
                                    which list and, in fact, all parameters could
                                    just be in one of the two lists.
                                   </para>
                                    <para>
                                        The coordinates of the gate figure
                                        are corresponding elements of the
                                        <parameter>xcoords</parameter> and
                                        <parameter>ycoords</parameter> parameters.
                                        For example, the first point is
                                        ([lindex $xcoords 0], [lindex $ycoords 0]).
                                        etc.
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term>
                                   <methodsynopsis>
                                       <type></type>
                                       <methodname>gateCreateMask</methodname>
                                       <methodparam>
                                           <type></type><parameter>name</parameter>
                                       </methodparam>
                                       <methodparam>
                                           <type></type><parameter>gatetype</parameter>
                                       </methodparam>
                                       <methodparam>
                                           <type></type><parameter>parameter</parameter>
                                       </methodparam>
                                       <methodparam>
                                           <type></type><parameter>mask</parameter>
                                       </methodparam>
                                    </methodsynopsis>
                               </term>
                               <listitem>
                                   <para>
                                    Creates a mask gate <parameter>name</parameter>.
                                    The gate type (<parameter>gatetype</parameter>),
                                    must be one of <literal>am, em, nm</literal>.
                                    The gate is checked on the parameter
                                    <parameter>parameter</parameter> using the
                                    mask <parameter>mask</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>gateCreateCompound</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>gatetype</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>gates</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a compound gate.  These are gates
                                    that depend on other gates.
                                    <parameter>name</parameter> will be the name
                                    of the new gate which will have the
                                    gate type <parameter>gatetype</parameter>.
                                    The <parameter>gatetype</parameter> msut
                                    be one of <literal>+,*,c2band,-</literal>.
                                   </para>
                                   <para>
                                    <parameter>gates</parameter> is a list of
                                    the names of the gate this gate depends on.
                                    <literal>c2band</literal> gate must only have
                                    two dependent gates and they must be type
                                    <literal>b</literal>.  Similarly
                                    <literal>-</literal> gates must only have
                                    one gate although it can be of any type.
                                   </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Dynamic Pipeline Management</title>
                        <para>
                            Prior to SpecTcl 5.0, the data anlaysis pipeline that
                            transforms raw data into unpacked parameters was
                            defined at the C++ level and there was little native
                            support for dynamically modifying the pipeline.
                        </para>
                        <para>
                            In SpecTcl 5.0, the <command>pman</command>
                            command allows users to compose pipelines from
                            event processors that have been registered and
                            to select which of the pipelines is active at any
                            given time.
                        </para>
                        <para>
                            This section describes methods that provide
                            client access to this capability through the
                            SpecTcl REST server.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pmanCreate</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a new empty analysis pipeline.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pmanList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Lists the names of the pipelines that
                                    have been defined and match the
                                    optional <parameter>pattern</parameter>.
                                    If <parameter>pattern</parameter> is not
                                    supplied, then it defaults to
                                    <literal>*</literal> matching all names.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pmanCurrent</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns a dict that describes the current
                                    pipeline. Keys are
                                    <literal>name</literal>, the pipeline name,
                                    and <literal>processors</literal>, the
                                    oredered list of event processors in the
                                    pipeline.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pmanListAll</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns information about piplines with names
                                    that match the <parameter>pattern</parameter>.
                                    This defaults to <literal>*</literal> if
                                    not provided.
                                   </para>
                                   <para>
                                    The return value is a list of dicts.  Each
                                    dict describes a pipeline who's name
                                    matches the pattern. Each dict has the same
                                    format as the dict returned from
                                    <methodname>pmanCurrent</methodname>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pmanListEventProcessors</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns a list names
                                    of the registered event processors.
                                    Registered event processors are the processors
                                    that can be strung together in event processing
                                    pipelines.  If <parameter>pattern</parameter>
                                    is provided only the event processors with
                                    names matching <parameter>pattern</parameter>
                                    (with glob wild-card characters) are listed.
                                    If not supplied <parameter>pattern</parameter>
                                    defaults to <literal>*</literal> which
                                    matches all processor names.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pmanUse</methodname>
                                  <methodparam>
                                      <type></type><parameter>pipeline</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Tells SpecTcl to use the named
                                    <parameter>pipeline</parameter> as the current
                                    event processing pipeline.  Starting with the
                                    next event received, SpecTcl will use the name
                                    <parameter>pipeline</parameter> to extract
                                    parameters from the raw event data.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pmanAdd</methodname>
                                  <methodparam>
                                      <type></type><parameter>pipeline</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>processor</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Adds <parameter>processor</parameter>, an
                                    event processor registered with the pipeline
                                    manager to the end of the event processing
                                    pipeline named <parameter>pipeline</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pmanRemove</methodname>
                                  <methodparam>
                                      <type></type><parameter>pipeline</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>processor</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Removes the event processor named
                                    <parameter>processor</parameter> from the
                                    event processing pipeline named
                                    <parameter>pipeline</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pmanClear</methodname>
                                  <methodparam>
                                      <type></type><parameter>pipeline</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Removes all event processors fromt he processing
                                    pipeline named <parameter>pipeline</parameter>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pmanClone</methodname>
                                  <methodparam>
                                      <type></type><parameter>source</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>new</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a  new processing pipeline named
                                    <parameter>new</parameter> that is
                                    a copy of the pipeline named <parameter>source</parameter>.
                                    Once created, the processors in the two pipelines
                                    can diverge by using the pipeline editing
                                    facilities either documented above or in
                                    direct SpecTcl command execution.
                                   </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Event Built Data</title>
                        <para>
                            Increasingly complex experiments are built out of
                            quasi-independent detector subsystems that are
                            coordinated by a common time base.  The NSCLDAQ
                            event builder assembles events that are coincident
                            within some time window and ships them downstream
                            in the experiment's data flow.
                        </para>
                        <para>
                            This set of functions supports building an
                            event processor that associates an event processing
                            pipeline (see previous section) with data from
                            each expected source in the built events.  This
                            allows the initial raw event unpacking stage
                            of event processing to be built from the standard
                            software that is used by the developers/maintainers
                            of each
                            detector subsystem.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>evbCreate</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>frequency</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>basename</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a new event processnar <parameter>name</parameter>
                                    that can be configured to analyze event built
                                    data.  The new event processor will automatically
                                    build several diagnostic parameters whose
                                    base names will be <parameter>basename</parameter>.
                                    These diagnistic parameter support the creation
                                    of typical event builder diagnostic spectra
                                    that can be used to monitor the synchronization
                                    of the various data sources.
                                   </para>
                                   <para>
                                    One of the diagnostic parameters is the timestamp
                                    calibrated to double precision floating point
                                    seconds.  This supports diagnostic spectra
                                    that show time evolution (e.g. the time difference
                                    between fragments from data source pairs as
                                    it evolves int time should be unchanging).
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>evbAdd</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>source</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>pipeline</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Associates an event processing pipeline
                                    <parameter>pipe</parameter>
                                    (see the previous subsection) with an
                                    event source id <parameter>source</parameter> in an event builder event
                                    processor <parameter>name</parameter>.
                                    If the event processor is given an event built
                                    event to analyze, the pipeline will be activated
                                    to analyze data from that source id if it is
                                    encounted in that event.
                                   </para>
                                   <para>
                                    The idea is that several calls to this method
                                    build up an event processor capable of analyzing
                                    data from all expected data sources
                                    using the event processing pipline that is normally
                                    used for each event source were it run by itself.
                                   </para>
                                </listitem>
                            </varlistentry>
                             <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>evbList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Lists the event processor names that have been
                                    created.  Only names that match the
                                    optional <parameter>pattern</parameter>
                                    argument are listed.  If <parameter>pattern</parameter>
                                    is not supplied, it defaults to <literal>*</literal>.
                                   </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>

                    </refsect2>
                    <refsect2>
                        <title>Tracing</title>
                        <para>
                            SpecTcl supports establishing traces on changes
                            tot he parameter, gate and spectrum dictionaries.
                            Traces for a REST client/server environment are
                            problematic  because the REST protocol does not have
                            a mechanism for the server to request an action by the
                            on its own.
                        </para>
                        <para>
                            The methods below allow the server to buffer traces
                            on  behalf of an interested client which can the fetch
                            accumulated traces.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>traceEstablish</methodname>
                                  <methodparam>
                                      <type></type><parameter>retention</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Establishes client interest in traces.
                                    The <parameter>retention</parameter>
                                    parameter specifies the minimum amount of time
                                     trace information will be retained for this
                                     client in seconds.  If traces are fetched
                                     periodically, this should be some small multiple
                                     of the time between fetches.
                                   </para>
                                   <para>
                                    The return value from this method is an integer
                                    token value that represents this client in the
                                    server's trace buffering subsystem.
                                    It should be used in calls to
                                    <methodname>traceDone</methodname>
                                    and <methodname>traceFetch</methodname>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>traceDone</methodname>
                                  <methodparam>
                                      <type></type><parameter>token</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    This method indicates the client no longer
                                    needs the server to buffer traces on its
                                    behalf.
                                    The <parameter>token</parameter> parameter
                                    to this method should be the token returned
                                    from <methodname>traceEstablish</methodname>.
                                   </para>
                                   <para>
                                    Once successfully completed, the
                                    <parameter>token</parameter> is no longer
                                    valid.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term>
                                <methodsynopsis>
                                   <type></type>
                                   <methodname>traceFetch</methodname>
                                   <methodparam>
                                       <type></type><parameter>token</parameter>
                                   </methodparam>
                                </methodsynopsis>
                               </term>
                               <listitem>
                                   <para>
                                    Fetches the traces buffered since the last
                                    call to <methodname>traceFetch</methodname>.
                                    The traces are returned as a dict with
                                    three attributes.  The contents of each
                                    attributs are a list in which each list element
                                    describes a trace.
                                   </para>
                                   <para>
                                    The <literal>parameter</literal>
                                    attribute contains the parameter traces.
                                    The first element of each list is the text
                                    <literal>add</literal> or
                                    <literal>delete</literal> indicating the
                                    what happened.  THe second element is the
                                    name of the parameter that was either
                                    added or deleted.
                                   </para>
                                   <para>
                                    The
                                    <literal>gate</literal> attribute contains the
                                    gate traces.  The first element of each list
                                    is the text <literal>add</literal>,
                                    <literal>delete</literal> or
                                    <literal>changed</literal> indicating
                                    why the trace fired.  The second element of
                                    the list is the name of the affected gate.
                                   </para>
                                   <para>
                                    The <literal>spectrum</literal> attribute
                                    contains spectrum traces.  The first element
                                    of each list is the text
                                    <literal>add</literal> or <literal>delete</literal>
                                    indicating the operation that fired the trace.
                                    The second element of each list is the name
                                    of the parameter that was affected.
                                   </para>
				   <para>
				     Finally the <literal>bindings</literal>
				     attribute provides sbind and unbind trace
				     information.  The first element of each
				     list is the type of trace
				     <literal>add</literal> or
				     <literal>remove</literal>  The second
				     element the name of the affected spectrum
				     and the last, the binding id (spectrum
				     slot) affected/allocated.
				   </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Miscelaneous Methods</title>
                        <para>
                            The methods described in this section don't fit into
                            any nice categories.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>integrate</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>roi</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Performs an integration in a spectrum,
                                    <parameter>name</parameter>, within
                                    some region of interest, <parameter>roi</parameter>.
                                   </para>
                                   <para>
                                    The Region of Interest <parameter>roi</parameter>
                                    can have several forms.  It can be the
                                    name of a gate within which the integration
                                    will take place, or, if the spectrum is
                                    one dimensional, a pair of numbers that are the
                                    low and high limits of integration or,
                                    if the spectrum is two dimensional,
                                    a list of x/y pairs that describe contour.
                                   </para>
                                   <para>
                                    Regions of interest that are not gates
                                    must be expressed in parameter coordinates,
                                    not spectrum channels and the integration
                                    takes place in that coordinate system.
                                    </para>
                                    <para>
                                        The integration returns a dict.
                                        The <literal>centriod</literal> key
                                        provides the centroid of the integration
                                        as either a single value or a list of
                                        two values, depending on spectrum
                                        dimensionality.  The
                                        <literal>fwhm</literal> key provides the
                                        full width at half maximum under the assumption
                                        the integration is over a gaussian shaped
                                        peak.  It too is either a single
                                        value or two values, depending on
                                        spectrum dimensionality.
                                        The <literal>counts</literal> key
                                        provides the number of counts in the
                                        region of integration.
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pseudoCreate</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>parameters</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>body</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a puedo parameter.
                                    <parameter>name</parameter> is the name of
                                    an as yet unused parameter.
                                    <parameter>parameters</parameter> are the
                                    names of the parameters needed to compute
                                    the pseudo and  <parameter>body</parameter>
                                    is the script body  used to compute the
                                    parameter.  For more information, see the SpecTcl
                                    command reference guide for the
                                    <command>pseudo</command> command.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pseudoList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns a list of descriptions of pseudo
                                    parameters whose names match
                                    <parameter>pattern</parameter>.  If
                                    <parameter>pattern</parameter> is not supplied,
                                    it defaults to <literal>*</literal>
                                    which matches everything.
                                   </para>
                                   <para>
                                    The result is a list of dicts with the keys:
                                    <literal>name</literal> containing the name
                                    of the pseudo parameter, <literal>parameters</literal>
                                    containing a list of the parameter names
                                    needed to compute the pseudo and
                                    <literal>body</literal>, the script body
                                    needed to compute the pseudo value for each
                                    event.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pseudoDelete</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Deletes the computation that produces
                                    the value for the pseudo parameter
                                    <parameter>name</parameter>.  The
                                    parameter is still defind and a new
                                    <methodname>pseudoCreate</methodname>
                                    method call can specify it.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>sread</methodname>
                                  <methodparam>
                                      <type></type><parameter>filename</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>options</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Reads one spectrum from the file
                                    <parameter>filename</parameter>.  What is done
                                    with that spectrum depeds on the
                                    (potentially empty) dict
                                    <parameter>options</parameter>.
                                    Note that in SpecTcl normally a file descriptor
                                    can be used as the source of the file, this cannot
                                    be acommplished in the client.  See, however,
                                    <methodname>command</methodname>.
                                   </para>
                                   <para>
                                    THe <parameter>options</parameter> dict
                                    can have the following keys; all of which
                                    have reasonable defaults:
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>format</literal></term>
                                       <listitem>
                                           <para>
                                            Format of the data file.  Defaults to
                                            <literal>ascii</literal>.  The set
                                            of formats is extensible, however
                                            the built in formats are
                                            <literal>ascii</literal> and
                                            <literal>binary</literal>.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>snapshot</literal></term>
                                       <listitem>
                                           <para>
                                            Boolean that, if 1, (the default)
                                            does not attempt to hook the histogram
                                            read in to the histogrammer but, instead,
                                            creates a snapshot (frozen) spectrum.
                                            If 0, the spectrum will, if possible,
                                            be hooked to the histogrammer and increment
                                            as additional data are processed.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>replace</literal></term>
                                       <listitem>
                                           <para>
                                            If nonzero, and a spectrum with the
                                            name specified in the file exists, the
                                            existing spectrum is replaced.  If
                                            zero, the default, a new spectrum name will
                                            be derived.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>bind</literal></term>
                                       <listitem>
                                           <para>
                                            If nonzero (the default), the
                                            spectrum will be bound into display
                                            memory.  If zero, it will not
                                            (it can be later bound of course).
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>swrite</methodname>
                                  <methodparam>
                                      <type></type><parameter>filename</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>spectra</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>format</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Write the spectra named in
                                    <parameter>spectra</parameter> to file
                                    named by <parameter>filename</parameter>.
                                    The <parameter>format</parameter> parameter
                                    specifies the file format and defaults to
                                    <literal>ascii</literal> if not supplied.
                                    SpecTcl has two built in spectrum
                                    file formats; <literal>ascii</literal>, which
                                    is most commonly used and
                                    <literal>binary</literal>, which hardly
                                    anyone uses.  Additionally the SpecTcl file format
                                    can be extended at the C++ level.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>shmkey</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns the key of the SYSV shared memory
                                    region
                                    that SpecTcl is using for display  memory.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>shmsize</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns the number of
                                    <varname>DisplayMegabytes</varname>
                                    used by SpecTcl for its shared memory region.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>version</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns the SpecTcl version as a dict
                                    containing the keys
                                    <literal>major</literal>,
                                    <literal>minor</literal> and
                                    <literal>editlevel</literal>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>rootTreeCreate</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>parameterPatterns</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>gate</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Note that this requires the
                                    <literal>rootinterface</literal> package be
                                    pulled into SpecTcl.  Creates a new Root
                                    tree that gets populated by successive data
                                    and written to file.
                                   </para>
                                   <para>
                                    Root Trees are similar to SpecTcl Filters but
                                    have the format of CERN Root trees and are
                                    aware of changes in run state.
                                   </para>
                                   <para>
                                    <parameter>name</parameter> is the name of the
                                    root tree.  <parameter>parameterPatterns</parameter>
                                    specifies a set of patterns that determine the
                                    parameters that are written to the tree.
                                    Finally, if supplied, <parameter>gate</parameter>
                                    specifies the name of a gate. Only events that
                                    pass the gate get added to the file.
                                   </para>
                                   <para>
                                    Note that the <parameter>parameterPatterns</parameter>
                                    is applied statically.  That is if subsequently
                                    a new parameter is created that matches one
                                    of the patterns, it is not added to the tree.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>rootTreeDelete</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Deletes the root tree <parameter>name</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>rootTreeList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Lists the properties of trees who's name
                                    matches <parameter>pattern</parameter>.
                                    If that <parameter>pattern</parameter>
                                    is not provided, it defaults to
                                    <literal>*</literal> matching all trees.
                                   </para>
                                   <para>
                                    The returned value is a list of dicts. Each
                                    dict describes a tree using the keys
                                    <literal>tree</literal> - the name of the
                                    tree, <literal>parameters</literal> the
                                    list of parameter patterns and
                                    <literal>gate</literal> the gate (could
                                    be an empty string).
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>command</methodname>
                                  <methodparam>
                                      <type></type><parameter>script</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Executes an arbitrary command,
                                    <parameter>script</parameter> in the
                                    SpecTcl server.   This allows for access
                                    to user defined commands and other client needs
                                    that have not been foreseen.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>getVars</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns the values of some variables
                                    maintained by the server.  The result is
                                    a dict whose keys are the names of those
                                    variables and whose values are the values of
                                    the variable specified in the key.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term>
                                <methodsynopsis>
                                   <type></type>
                                   <methodname>mirror</methodname>
                                   <methodparam>
                                       <type></type><parameter>list</parameter>
                                   </methodparam>
                                   <methodparam>
                                       <type></type><parameter>pattern</parameter>
                                       <modifier>optional</modifier>
                                   </methodparam>
                                </methodsynopsis>
                               </term>
                               <listitem>
                                   <para>
                                    Returns a list of dicts containing information
                                    about the current SpecTcl display memory
                                    mirrors that are being maintained.  If
                                    the optional <parameter>pattern</parameter>
                                    parameter is provided this list is filtered
                                    to the mirrors that match the pattern as
                                    a host name.   The pattern can contain
                                    glob characters.
                                   </para>
                                   <para>
                                    Each dict in the list describes one
                                    active mirror and contains the following keys:
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>host</literal></term>
                                       <listitem>
                                           <para>
                                            Name of a host on which a mirror
                                            is being maintained.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>shmkey</literal></term>
                                       <listitem>
                                           <para>
                                            The SYS-V shared memory key of that mirrror.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                        
                    </refsect2>

                </refsect1>
                <refsect1>
                    <title>OMISSIONS</title>
                    <para>
                        There is no REST access to the
                        <command>rootexec</command> command as the most common
                        use case is to pop up a <classname>TBrowser</classname>
                        to allow ROOT interaction with the spectrum data and,
                        that could only pop up on any X-11 DISPLAY connection
                        of the SpecTcl server, not the client.
                    </para>
                </refsect1>
            </refentry>
    </appendix>
    
    <appendix>
        <title>Mirror Client</title>
        <para>
            The mirrorclient program for SpecTcl provides a  program that
            automatically maintains a mirror for the SpecTcl shared memory.
            It is automatically started by the
            SpecTclMirrorClient API as needed. It can be run separately, however
            for special applications.  mirrorclient is installed in the
            <filename>bin</filename> sub-directory of the SpecTcl installation
            tree.  Its operation is controlled by command options.
        </para>
        <para>
            The mirror client can, if the NSCLDAQ environment variables have
            been set up by <filename>daqsetup.bash</filename>, do service discovery
            with the port manager.
        </para>
        <para>
            Command line options are:
        </para>
        <variablelist>
            <varlistentry>
               <term><option>--host</option>=<replaceable>spectcl-host</replaceable></term>
               <listitem>
                   <para>
                    DNS name or IP address for the host in which SpecTcl is running.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>--restport</option>=<replaceable>REST-service-or-port</replaceable></term>
               <listitem>
                   <para>
                    Either a service name, if NSCLDAQ Port discovery is being done,
                    or a numbered port if not.  Used to connect with the REST
                    service.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>--mirrorport</option>=<replaceable>Mirror-service-or-port</replaceable></term>
               <listitem>
                   <para>
                    Either a service name, if NSCLDAQ Port discovery is being done,
                    or a numbered port if not.  Used to connect with the Mirror
                    service.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>--user</option>=<replaceable>spectcl-user</replaceable></term>
               <listitem>
                   <para>
                    If service discovery is used, this optional parameter can specify
                    which user is running SpecTcl.   If omitted and service discoveryi
                    is being used, the user running SpecTcl defaults to the same
                    as the user running mirrorclient.
                   </para>
                </listitem>
            </varlistentry>
        </variablelist>
        <para>
            Once the mirror has been set up, the client can use the REST
            service to list the mirrors maintained by SpecTcl to find the key
            to the shared memory region (or,
            if you're lazy like me, just use the SpecTclMirrorClient
            API and let it do all that nonesense for you).
        </para>
        <para>
            The mirrorclient program uses a low level mirror
            API.  While this is not normally intended for use by applications,
            it is documented here for completeness and special applications.
        </para>
        <refentry>
           <refmeta>
              <refentrytitle>MirrorClient</refentrytitle>
              <manvolnum>3spectcl</manvolnum>
           </refmeta>
           <refnamediv>
              <refname>MirrorClient</refname>
              <refpurpose>Mirror SpecTcl Shared memory to the process.</refpurpose>
            </refnamediv>
            <refsynopsisdiv>
                <programlisting>
#include &lt;MirrorClient.h&gt;
class MirrorClient
{
public:
    MirrorClient();
    virtual ~MirrorClient();

    void connect(const char* host, int port, const char* key=nullptr);
    bool update(void* pMemory);
};

                </programlisting>
            </refsynopsisdiv>
            <refsect1>
                     <title>DESCRIPTION</title>
                  <para>
                    This class encapsulates the messaging between mirror client
                    and server to run a mirror between a SpecTcl mirror server
                    and some chunk of process virtual memory.
                  </para>
                  <para>
                    <methodname>connect</methodname> connects to the mirror server of
                    SpecTcl running on <parameter>host</parameter> listening on
                    <parameter>port</parameter>.  If
                    <parameter>key</parameter> is provided it is treated as a
                    four character string that is a key to a SYS-V shared memory
                    region.  On connection the class will send a registration
                    message to the server. SpecTcl will then add this
                    mirror to the set of mirrors that are listed via the SpeTcl
                    <command>mirror list</command> command.
                  </para>
                  <para>
                    If <parameter>key</parameter> is not provided no such message
                    is sent createing an anonymous mirror.
                  </para>
                  <para>
                    Having successfully performed a <methodname>connect</methodname>,
                    each call to <methodname>update</methodname> updates the
                    mirror pointed to by <parameter>pMemory</parameter>.
                    It's the clent's job to ensure there's sufficient memory on the
                    other end of that pointer to satisfy the needs of the mirror.
                  </para>
            </refsect1>
        </refentry>
    </appendix>
</book>