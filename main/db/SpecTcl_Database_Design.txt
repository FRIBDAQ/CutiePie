High level design for C++ encapsulation of the SpecTcl database.

Overview:
  The SpecTcl database is comprised of save sets.
  Each save set is specified by a name and a timestamp (clock time). The
  saveset minimally captures a SpecTcl analysis configuration at the time
  of the timestamp.
  This configuration consists of:
  *  Parameter definitions (which capture tree parameter metadata if present).
  *  Spectrum definitions
  *  Gate definitions
  *  Applications of gates to spectra.
  *  Tree variable definitions and values.

  In addition, a save set can contain:
  *  The contents of one or more spectra.
  *  Decoded event data for a run, including scaler data and the run metadata.

The plan is to build:
  *  A good C++ encapsulation of this database.
  *  Bindings of that encapsulation to other languages with the
     following minimal set planned:
     -   Tcl
     -   Python

Going into this project I have available a C++ encapsulation of Sqlite
written for use in NSCLDAQ dubbed Sqlite++.  Therefore the rough layering of this
structure is:



+----------------------------------+
| SpecTcl::CDatabase               |
+------------------------------+   |    
| SpecTcl::SaveSet             |   |
+-----------------------+      |   |
| Primitive objects     |      |   |
+-----------------------+----------+
|  Sqlite++                        |
+----------------------------------+

These layers provide increasing layers of abstraction as you
travel upwards away from the Sqlite++ library.  With the exception 
of Sqlite++, all classes live in the SpecTcl namespace.

*  Sqlite++ (written and fully tested) provides the ability to:
  - Open databases.
  - Perform queries.
  - Group queries into transactions.
  - Services for constructing WHERE clause elements of retrieval queries.
* Primitive objects (see below for status).  These provide facilities to 
  create and retrieve the primitive objects of a save set including:
  - DBParameter (written fully tested) parameter definitions.
  - DBSpectrum  (written fully tested) spectrum definitions.
  - DBGate      (underway) Gate definitions.
  - DBGateApplication (planned) Application of gates to spectra.
  - DBVariable  (planned) Tree variable definitions and values.
  - DBSpectrumContents (planned) Contents of a spectrum.
  - DBRun (planned) Event store and iterate through event data.
* SaveSet (partially written/fully tested).  This provides the
  ability to create and retrieve save sets.  As an object it provides the
  ability to create and retrieve primitive objects from the database.
  This is written and fully tested for DBParameter and DBSpectrum at this time.
  All SQL associated with primitive object manipulation is delegated to the
  classes themselves so that SaveSet remains unaware of the underlying
  database structure of anything but a save set definition.
  The only SQL SaveSets perform is the creation of an empty save set.
* Database encapsulates a connection to the database.  It provides API
  elements to:
  - Initialize a file as a configuration database.
  - An api to create and retrieve save sets which is layered on
    top of the SaveSet class.  
  The only SQL the database object directly performs is that which
  is needed to create the database schema.

Theoretically once a well structured C++ encapsulation exists, a
Tcl object based an Python encapsulaton of these classes should be
straightforward.
