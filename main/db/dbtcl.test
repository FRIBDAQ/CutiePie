#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}

#    This software is Copyright by the Board of Trustees of Michigan
#    State University (c) Copyright 2014.
#
#    You may use this software under the terms of the GNU public license
#    (GPL).  The terms of this license are described at:
#
#     http://www.gnu.org/licenses/gpl.txt
#
#    Authors:
#             Ron Fox
#             Giordano Cerriza
#	     NSCL
#	     Michigan State University
#	     East Lansing, MI 48824-1321


##
# @file   dbtcl.test
# @brief  Tests of the Tcl bindings to the SpecTcl database.
# @author Ron Fox <fox@nscl.msu.edu>
#

# @note must be run after installation.

package require tcltest
package require sqlite3

package require SpecTclDB

##################################################
## Basic dbtcl tests:

tcltest::test info_1 {Check the existence of the command} \
-body {
    info command DBTcl
} -result DBTcl

tcltest::test dbtcl_1 {Command needs a subcommand} \
-body {
    catch {DBTcl}
} -result 1

tcltest::test dbtcl_2 {Subcommand must be legal } \
-body {
    catch {DBTcl junk}
} -result 1

######################################################
# Dbtcl subcommands.

tcltest::test dbtcl_create_1 {Create needs a filename} \
-body {
    catch {DBTcl create} msg
} -result 1

tcltest::test dbtcl_create_2 {Create makes a new file} \
-setup {
    set chan [file tempfile fname]
    close $chan
    file delete $fname;              # should get remade.
} \
-cleanup {
    file delete $fname
} \
-body {
    DBTcl create $fname
    file exists $fname
} -result 1

tcltest::test dbtcl_create_3 {The database file should have a parameter_defs table} \
-setup {
    set chan [file tempfile fname]
    close $chan
    file delete $fname;              # should get remade.
} \
-cleanup {
    file delete $fname
} \
-body {
    DBTcl create $fname
    sqlite3 db $fname
    set found 0
    db eval {SELECT name FROM sqlite_master WHERE type='table' AND
                    name='parameter_defs'} {
        set found 1        
    }
    db close
    set found
} -result 1


    
tcltest::test dbtcl_connect_1 {The connect command needs a filename} \
-body {
    catch {DBTcl connect}
} -result 1


tcltest::test dbtcl_connect2 {The connect command needs a real database} \
-setup {
    set chan [file tempfile fname]
    close $chan
} \
-cleanup {
    file delete $fname
} \
-body {
    catch {DBTcl connect $fname}
} -result 1

tcltest::test dbtcl_connect3 {If a database was made the command works} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
} \
-cleanup {
    file delete $fname
} \
-body {
    catch {DBTcl connect $fname}
} -result 0

tcltest::test dbtcl_connect4 {If a database was made, I get back a command} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    file delete $fname
} \
-body {
    set cmd [DBTcl connect $fname]
    info command $cmd
    string is space $cmd
} -result 0

###########################
# db instance tests.

tcltest::test dbtcl_instance_1 {database instance commands need a subcommand } \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    file delete $fname
} \
-body {
    catch $cmd
} -result 1

tcltest::test dbtcl_instance_2 {database illegal instance command } \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    file delete $fname
} \
-body {
    catch {$cmd junk}
} -result 1

tcltest::test dbtcl_instance_destroy {database instance destroy wipes cmd} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    file delete $fname
    
} \
-body {
    $cmd destroy
    info command $cmd
} -result ""

tcltest::test dbtcl_instance_crsvset_1 {create saveset needs a name} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    file delete $fname
    $cmd destroy
} \
-body {
    catch $cmd createSaveset
} -result 1

tcltest::test dbtcl_instance_crsvset_2 {create save set returns a command} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    file delete $fname
    $cmd destroy
} \
-body {
    set scmd [$cmd createSaveset testing]
    string is space [info command $scmd]
} -result 0

tcltest::test dbtcl_instance_crsvset_3 {create saveset creates a database saveset} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    $cmd destroy
    file delete $fname
} \
-body {
    set scmd [$cmd createSaveset testing]
    sqlite3 db $fname
    db eval {SELECT COUNT(*) c FROM save_sets WHERE name='testing'} {
        set count $c
    }
    db close 
    set count
} -result 1



tcltest::test dbtcl_instance_get_1 {Get saveset needs a saveset param} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    $cmd destroy
    file delete $fname
} \
-body {
    catch {cmd getSaveset}
} -result 1

tcltest::test dbtcl_instance_get_2 {Get saveset saveset must exist} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    $cmd destroy
    file delete $fname
} \
-body {
    catch  {cmd getSaveset test}
} -result 1

tcltest::test dbtcl_instance_get_3 {Get saveset with existing makes a cmd} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    $cmd destroy
    file delete $fname
} \
-body {
    $cmd createSaveset test
    set svcmd [$cmd getSaveset test]
    
    string is space [info command $svcmd]
} -result 0


tcltest::test dbtcl_instance_list_1 {listSavesets can't have more params} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    $cmd destroy
    file delete $fname
} \
-body {
    catch {$cmd listSavesets junk}
} -result 1

tcltest::test dbtcl_instance_list_2 {empty list if no savesets} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    $cmd destroy
    file delete $fname
} \
-body {
    set l [$cmd listSavesets]
    llength $l
} -result 0

tcltest::test dbtcl_instance_list_3 {single save set lists} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    $cmd destroy
    file delete $fname
} \
-body {
    $cmd createSaveset test
    set l [$cmd listSavesets]
    set n [llength $l]
    lappend n $l
    set n
} -result [list 1 test]

tcltest::test dbtcl_instance_list_4 {several savesets} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    $cmd destroy
    file delete $fname
} \
-body {
    for {set i 0} {$i < 10} {incr i} {
        $cmd createSaveset test_$i
    }
    set l [$cmd listSavesets];  #in definition order.
        
} -result [list test_0 test_1 test_2 test_3 test_4 test_5 test_6 \
           test_7 test_8 test_9]



#########################
# Save set tests

tcltest::test saveset_1 {saveset instance commands need a subcommand} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset test]
} \
-cleanup {
    #$svcmd destroy
    $cmd destroy
    file delete $fname
    
} \
-body {
    catch $svcmd
} -result 1

tcltest::test saveset_2 {saveset instance command illegal subcommand} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset test]
} \
-cleanup {
    #$svcmd destroy
    $cmd destroy
    file delete $fname
    
} \
-body {
    catch {$svcmd junk}
} -result 1

tcltest::test saveset_2 {saveset instance destroy works} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset test]
} \
-cleanup {
    #$svcmd destroy
    $cmd destroy
    file delete $fname
    
} \
-body {
    $svcmd destroy
    info command $svcmd
} -result ""

tcltest::test saveset_info_1 {info does not take arguments} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset test]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
    
} \
-body {
    catch {$svcmd info bad}
    
} -result 1


tcltest::test saveset_info_2 {info value is correct} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset test]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
    
} \
-body {
    set result [$svcmd info]
    set id [dict get $result id]
    set name [dict get $result name]
    
    list $id $name
} -result [list 1 test]

## parameter api

tcltest::test dbtcl_crparam_1 {Create parameter requires more than the subcommand} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    catch {$svcmd createParameter}
} -result 1

tcltest::test dbtcl_crparam_2 {Create simple parameter} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    $svcmd createParameter param.1 1
    sqlite3 db $fname
    db eval {SELECT id, number, low, high, bins, units FROM parameter_defs
             WHERE name = 'param.1'} {
        set result [list $id $number $low $high $bins $units]            
    }
    db close
    set result
} -result [list 1 1 "" ""  "" "" ]

tcltest::test dbtcl_crparam_3 {need at lease 7 params if treeparam} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    catch {$svcmd createParameter param-bad 2 0 100}
} -result 1

tcltest::test dbtcl_crparam4 {tree parameter with no units} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    unset result
    $svcmd createParameter param-tree 12 -10.0 10.0 100
    sqlite3 db $fname
    db eval {SELECT id, number, low, high, bins, units FROM parameter_defs
             WHERE name = 'param-tree'} {
        set result [list $id $number $low $high $bins $units]            
    }
    db close
    set result
} -result [list 1 12 -10.0 10.0 100 ""]

tcltest::test dbtcl_listparams_1 {list empty initially} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    unset result
    set result [$svcmd listParameters]
    
    llength $result
} -result 0

tcltest::test dbtcl_listparams_2 {list a few primitive params} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
    }
    set result [$svcmd listParameters]
    lappend result [llength $result]
    set result
} -result [list                                              \
           [dict create id 1 name param.0 number 1]           \
           [dict create id 2 name param.1 number 2]           \
           [dict create id 3 name param.2 number 3]           \
           [dict create id 4 name param.3 number 4]           \
           [dict create id 5 name param.4 number 5]           \
           [dict create id 6 name param.5 number 6]           \
           [dict create id 7 name param.6 number 7]           \
           [dict create id 8 name param.7 number 8]           \
           [dict create id 9 name param.8 number 9]           \
           [dict create id 10 name param.9 number 10]           \
           10                                                 \
        ]    

tcltest::test dbtcl_listparams_3 {list some params with metadat} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    for {set i 0} {$i < 3} {incr i} {
        set low [expr $i*100]
        $svcmd createParameter name.$i [expr $i+1]  \
            $low [expr {$low+100}] 200 furlongs
    }
    set result [$svcmd listParameters]
} -result [list                                              \
[dict create id 1 name name.0 number 1 low 0.0 high 100.0 bins 200 units furlongs]  \
[dict create id 2 name name.1 number 2 low 100.0 high 200.0 bins 200 units furlongs]  \
[dict create id 3 name name.2 number 3 low 200.0 high 300.0 bins 200 units furlongs]  \
]
  
tcltest::test dbtcl_listparams_3       {Extra command params not allowed} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    catch {$svcmd listParameters junk}
} -result 1
    
tcltest::test dbtcl_findparam_1  {Find a simple parameter} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createParameter testing 1
    $svcmd findParameter testing
} -result [dict create id 1 name testing number 1]

tcltest::test dbtcl_findparam_2 {Find parameter with metadata} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createParameter testing 1 100 200 200 some-units
    $svcmd findParameter testing
} -result \
[dict create id 1 name testing number 1 low 100.0 high 200.0 bins 200 units some-units]

tcltest::test dbtcl_findparam_3 {no such parameter is exception} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    
    catch {$svcmd findParameter testing}
} -result 1

tcltest::test dbtcl_findparam_4  {need a parameter name} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createParameter testing 1 100 200 200 some-units
    catch {$svcmd findParameter}
} -result 1

tcltest::test dbtcl_findparam_5 {too many cmd line params with lisparams} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createParameter testing 1 100 200 200 some-units
    catch {$svcmd findParameter testing bad}
} -result 1

tcltest::test dbtcl_createspec_1 {Create spectrum 1-d} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
    }
        
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createSpectrum spec 1 [list param.0] [list [list -100 100 200]]
    
    # Should be an entry for it in spectrum_defs.
        
    sqlite3 db $fname
    db eval {SELECT COUNT(*) count FROM  spectrum_defs WHERE name='spec'} {
        set n $count
    }
    
    db close
    set n
} -result 1

tcltest::test dbtcl_createspec_2 {Create 2d spectrum} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
    }
        
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createSpectrum spec 2 [list param.0 param.5] [list [list 0 50 100] [list -100 100 200]]
    
    # Should be an entry for it in spectrum_defs.
        
    sqlite3 db $fname
    db eval {SELECT COUNT(*) count FROM  spectrum_defs WHERE name='spec'} {
        set n $count
    }
    
    db close
    set n
} -result 1

tcltest::test dbtcl_createspec_3 {Bad parameter is problem} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
    }
        
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {
        $svcmd createSpectrum spec 2 [list param.0 param.12] \
            [list [list 0 50 100] [list -100 100 200]]
    }
} -result 1

tcltest::test  dbtcl_createspec_4 {Specify data type} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
    }
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createSpectrum spec 2 [list param.0 param.5] [list [list 0 50 100] [list -100 100 200]] word
    
    # Data type should propagate into database.
        
    sqlite3 db $fname
    db eval {SELECT datatype  FROM  spectrum_defs WHERE name='spec'} {
        set dtype $datatype
    }
    
    db close
    set datatype
} -result word

tcltest::test dbtcl_createspec_5 {too few parameters throws } \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
    }
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {
        createSpectrum spec 2 [list param.0 param.5]
    }
} -result 1

tcltest::test dbtcl_createspec_6 {Too many parameters throws} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
    }
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {
        $svcmd createSpectrum spec 2 [list param.0 param.5] \
            [list [list 0 50 100] [list -100 100 200]] word junk
    }
} -result 1
 
        
#############################################################################
#  End of tests - set the exit code to bad if there are failed tests and
#  report the test results to output:

proc tcltest::cleanupTestsHook {} {
    variable numTests
    set ::exitCode [expr {$numTests(Failed) > 0}]
}


tcltest::cleanupTests

exit $::exitCode
