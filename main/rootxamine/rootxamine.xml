<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                      "file:///usr/share/xml/docbook/schema/dtd/4.5/docbookx.dtd
"
>
<book>
    <bookinfo>
      <title>Rootxamine - Attaching CERN Root to SpecTcl's Spectrum Shared Memory</title>
      <author><firstname>Ron</firstname><surname>Fox</surname></author>
      <revhistory>
          <revision>
             <revnumber>1.0</revnumber>
             <date>January 5, 2021</date>
             <authorinitials>RF</authorinitials>
             <revremark>Original Release</revremark>
          </revision>
      </revhistory>
    </bookinfo>
    <chapter>
       <title>Introduction</title>
       <para>
        This manual describes software that was introduced with SpecTcl-5.10-006.
       </para>
       <para>
        With SpecTcl 5.0, SpecTcl's spectra were stored in
        CERN Root histogram
        objects with, if available to e.g. Xamine via
        <command>sbind</command> storage bound into the Spectrum shared memory region.
        A natural desire is to be able to view and operate on those spectra with
        Root commands.  The new <command>Rootexec</command> command provided
        with SpecTcl allows users to execute a Root Macro within SpecTcl.
       </para>
       <para>
        In many cases, users used this to execute commands that perform
        graphical output (e.g. instantiating a TBRowser, displaying and
        fitting spectra).  With the need to be able to run a headless
        SpecTcl (under the experiment manager e.g.) many of the things
        that <command>Rootexec</command> is used for are not possible.
       </para>
       <para>
        Furthermore, errors in Root macros run by <command>Rootexec</command>
        can adversely impact SpecTcl's execution.  As a worst case example of
        this, a segfault in a Root macro will crash SpecTcl.
       </para>
       <para>
        Rootxamine is an attempt to address these problems.  It provides
        the ability to run a fully functional Root interpreter that is
        attached to SpectTcl's display shared memory in which all Spectra
        defined in that shared memory are available to that interpreter.
        Furthermore, as the spectra stored in shared memory change
        the Spectra visible to Root are dyanmically modified as well.
       </para>
       <para>
        The remainder of this document is divided into two additional chapters:
       </para>
       <itemizedlist>
        <listitem>
           <para>
              <link linkend='ch.running' endterm='ch.running.title' />
              describes how to run <command>rootxamine</command>.
              The requirements for SpecTcl to support this are described
              as are the command line options <command>rootxamine</command>
              accepts.
           </para>
        </listitem>
        <listitem>
           <para>
              <link linkend='ch.update' endterm='ch.update.title' />
              Describes how <command>rootxamine</command> maintains the
              root histograms it provides and some of the consequences
              to your Root code of this update process.
           </para>
        </listitem>
       </itemizedlist>
    </chapter>
    <chapter id='ch.running'>
       <title id='ch.running.title'>Running rootxamine</title>
       <section>
          <title>Setting up SpecTcl for use with rootxamine</title>
       <para>
         Prior to running rootxamine, SpecTcl must be started and must
         run both its mirror server and REST server.  Both of these are used
         to map to the shared memory.  If SpecTcl is run remotely, a mirror
         of the shared memory is transparently set up.
        </para>
       <para>
        How you do this depends on the environment in which SpecTcl
        is running.  In the analysis environment where the NSCLDAQ
        servers are not running, you must specify a unique integer port.
        This port must be unique system wide.
       </para>
       <para>
        Here's an example of a chunk of <filename>SpecTclInit.tcl</filename>
        that does this.  Note these lines <emphasis>must</emphasis>
        be placed in <filename>SpecTclInit.tcl</filename>,
        <emphasis>not</emphasis> <filename>SpecTclRC.tcl</filename>:
       </para>
       <example>
        <title>Setting the HTTPD and Mirror ports literally</title>
        <programlisting>
set HTTPDPort 8080
set MirrorPort 8081
        </programlisting>
       </example>
       <para>
        This sets the value of the REST port (<varname>HTTPDPort</varname>)
        to <literal>8080</literal> and the Mirror server port
        (<varname>MirrorPort</varname>) to 8081.  Note again,
        these are sample values and each SpecTcl instance in the system
        that uses a REST server and a Mirror server must use unique port
        vales for both.
       </para>
       <para>
        The NSCLDAQ servers include a <firstterm>port manager</firstterm>
        service.  This service manages a pool of TCP/IP ports.
        On request from a client it can allocate a port and associate
        a name and user with that port.  This allows you to ensure
        your REST and Mirror server ports are unique and can be looked up
        by name (and optionally the name of the user running SpecTcl
        in an experiment).
       </para>
       <para>
        Here's an example fragment from <filename>SpecTclInit.tcl</filename>
        that shows how to use the port manager to allocate a unique
        set of ports and to assign meaningful names to them.
       </para>
       <example>
        <title>Setting the HTTPD and Mirror ports using the port manager</title>
        <programlisting>
lappend auto_path [file join $SpecTclHome TclLibs]  <co id='port.libpath' />
if {[array names env DAQTCLLIBS]  ne ""} {
    lappend auto_path $env(DAQTCLLIBS)             <co id='port.daqlibpath' />
}
package require DAQService                         <co id='port.package' />
set HTTPDPort [SpecTcl::getServicePort SpecTcl_REST] <co id='port.setports' />
set MirrorPort [SpecTcl::getServicePort SpecTcl_MIRROR]
            
        </programlisting>
       </example>
       <calloutlist>
        <callout arearefs='port.libpath' >
            <para>
                We will need to pull in a SpecTcl Tcl library package. This
                line adds the SpecTcl Tcl library directory tree to the
                Tcl package search path list.
            </para>
        </callout>
        <callout arearefs='port.daqlibpath' >
            <para>
                The package we pull in will need the port manager from
                the NSCLDAQ system.  If NSCLDAQ 12 or later is set up,
                via the <filename>daqsetup.bash</filename> script, it will
                define the <literal>DAQTCLLIBS</literal> environment
                variable to point to its Tcl package library tree.
            </para>
            <para>
                If that variable is defined, we append it to the
                package load path.  If you have not set up the
                a version of NSCLDAQ 12 or later, or not set up NSCLDAQ
                at all, this environment variable will not be defined
                and you'll need to set the
                <literal>TCLLIBPATH</literal> environment variable
                to include <literal>$DAQROOT/TclLibs</literal>.
                <literal>TCLLIBPATH</literal> is a space separated set of
                directory tree tops that will also be searched for packages.
            </para>
            <para>
                If you don't add NSCLDAQ Tcl libraries to the search path,
                this <filename>SpecTclInit.tcl</filename> will fail to run
                properly.
            </para>
        </callout>
        <callout arearefs='port.package' >
            <para>
                <literal>DAQService</literal> is a SpecTcl Tcl package
                that is a simplified interface to the port manager.
                Working with the NSCLDAQ <literal>portAllocator</literal>
                package it provides the proc
                <literal>SpecTcl::getServicePort</literal> that
                allocates a TCP/IP service port via the manager,
                advertising a service.
            </para>
        </callout>
        <callout arearefs='port.setports' >
            <para>
                These two lines use <literal>SpecTcl::getServicePort</literal>
                to allocate a unique service port.  The parameter passed
                to that proc is the name of the service that will be
                advertised for that port.
            </para>
            <para>
                Note that service names are qualified by the username
                of the user running the program that allocated the port.
                This means that, unlike using literal port numbers, which must be
                unique system wide, your service names only need to be
                unique within all SpecTcl's you run on that system.
            </para>
        </callout>
       </calloutlist>
       </section>
       <section>
        <title>How to run xamineroot</title>
        <para>
          Given a SpecTcl that's running, either locally, or remotely,
          that has set up the service ports as described in the
          previous section, you can run the program xamineroot
          to bring up a root interpreter that will maintain a set of
          histogram objects that wrap the histograms that have been
          bound the the SpecTcl shared display memory.
        </para>
        <para>
          Note that if SpecTcl is running remotely, if necessary a
          mirror of its shared memory will be created transparently
          in the system in which you run <command>xamineroot</command>.
          The mirroring subsystem is smart enough to only create a single
          mirror for each SpecTcl shared memory source in any remote system.
          This means that if there's already a mirror for the
          SpecTcl you specify, your <command>xamineroot</command>
          will simply map to the shared memory of that mirror rather than
          set up a new mirror.
        </para>
        <para>
          <command>xamineroot</command> accepts all of the Root
          command line options and parameters and adds the following
          additional options:
        </para>
        <variablelist>
            <varlistentry>
               <term><option>--host</option></term>
               <listitem>
                   <para>
                    The value of this option is the host in which the
                    SpecTcl you want <command>xamineroot</command> to
                    attach to.  This is an optional parameter. If
                    omitted it defaults to <literal>localhost</literal>
                    which specifies a SpecTcl running in the same
                    system as <command>xamineroot</command>.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>--rest</option></term>
               <listitem>
                   <para>
                    The value of this option specifies either the
                    number of the port on which SpecTcl's REST
                    server is listening on or, if the port manager was
                    used to allocate a port, the service name advertised
                    by the port manager for that  port.
                   </para>
                   <para>
                    <option>--rest</option> is optional and, if not
                    supplied, defaults to <literal>8080</literal>.
                    In general you should not allow this to default.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>--mirror</option></term>
               <listitem>
                   <para>
                    The value of this option specifies either the
                    number of the port SpecTcl's mirror server is listenin
                    on or, if the port manager was used to allocated a port,
                    the service name advertised by the port manager for that
                    port.
                   </para>
                   <para>
                    <option>--rest</option> is optional and, if not supplied,
                    defaults to <literal>8081</literal>.  In general
                    you should not allow this to default.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>--user</option></term>
               <listitem>
                   <para>
                    This option is only important if either the
                    value of <option>--rest</option> or
                    <option>--mirror</option> are service names
                    advertised by the port manager.  In that case,
                    the value of this option is the username of the account
                    that advertised that service. 
                   </para>
                   <para>
                    If not suppled, <command>rootxamine</command> will
                    determine the username under which it's running
                    and use that to resolve service names to port
                    numbers if needed.
                   </para>
                </listitem>
            </varlistentry>
        </variablelist>
        <para>
            Here are some sample invocations of <command>rootxamine</command>
            they assume at some point you've defined the
            environment variable <literal>SPECBIN</literal> to
            point to the <filename>bin</filename> subdirectory of
            the SpecTcl installation you're using
            (version 5.10-006 or higher).
        </para>

        <example>
            <title>Invoking xamineroot</title>
            <programlisting>
$SPECBIN/rootxamine                             <co id="invoke.bare" />
$SPECBIN/rootxamine --rest=9000 --mirror=9100   <co id='invoke.numericports' />
$SPECBIN/rootxamine --host=somehost.frib.msu.edu \ <co id='invoke.remote1' />
    -rest=SpecTcl_REST --mirror=SpecTcl_MIRROR
$SPECBIN/rootxamine --host=somehost.frib.msu.edu \ <co id='invoke.remote2' />
    -rest=SpecTcl_REST --mirror=SpecTcl_MIRROR --user=someuser
            </programlisting>
        </example>
        <calloutlist>
            <callout arearefs='invoke.bare' >
                <para>
                    This invocation uses all the default connection values:
                    SpecTcl is assumed to run in the same host as us,
                    the REST port is
                    assumed to be 8080 and the mirror port is assumed to be
                    8081. Since the default values are all numeric ports, the
                    user default value is irrelevant.
                </para>
            </callout>
            <callout arearefs='invoke.numericports' >
                <para>
                    This invocation explicitly specifies numeric ports
                    for the REST server (<literal>9000</literal>) and the
                    mirror server (<literal>9100</literal>). By default,
                    SpecTcl is assumed to be running in the same host
                    as <command>rootxamine</command>.
                    The default value of <option>--user</option> is
                    irrelevant because numeric ports don't require
                    resolving service names via the port manager.
                </para>
                <para>
                    Note that this form also <emphasis>does</emphasis>
                    allow <option>--host</option> to be specified and
                    be remote in which case SpecTcl must be running in
                    that host and supplying the services on the ports
                    specified by <option>--rest</option> and
                    <option>--mirror</option>
                </para>
            </callout>
            <callout arearefs='invoke.remote1' >
                <para>
                    Specifies that SpecTcl is running in the host
                    <literal>somehost.frib.msu.edu</literal>.  This
                     could be the local host or remote.
                    <literal>somehost.frib.msu.edu</literal> is,
                    evidently running the NSCLDAQ port manager as
                    the <option>--mirror</option> and
                    <option>--rest</option> values are service names
                    not port numbers.  <command>rootxamine</command>
                    will resolve these services qualifying their names
                    with the name of the user running
                    <command>rootxamine</command> since no
                    explicity <option>--user</option> option
                    was specified.
                </para>
                <para>
                    Note that there's nothing to stop you from specifying
                    a remote host and numeric port numbers.  Note as well
                    that the logic used to determine a host is local,
                    in pretty much all cases will figure that out correctly
                    and not setup up a mirror if that's not necessary.
                </para>
            </callout>
            <callout arearefs='invoke.remote2' >
                <para>
                    Same as the previous example but the service names
                    are resolved for the user <literal>someuser</literal>
                    which may or may not be the user running
                    <command>rootxamine</command>.  This user must be a valid
                    user in the host <literal>somehost.frib.ms.edu</literal>.
                </para>
            </callout>
        </calloutlist>
        <para>
            Note that regardless of how <command>rootxamine</command>
            negotiates attachment with SpecTcl's shared memory (local or
            mirrored), the mapping that's done is
            <emphasis>readonly</emphasis>.  Therefore operations that modify
            contents of the spectra will segfault <command>rootxamine</command>.
            The REST interface can do most things you might want to do
            that modify SpecTcl spectra.  Check out the documentation of
            the REST server and client packages if you have those special needs.
        </para>
       </section>
       
    </chapter>
    <chapter id='ch.update'>
       <title id='ch.update.title'>rootxamine's update and consequences for your scripts.</title>
       <para>
        This chapter describes how <command>rootxamine</command> works
        and soeme of the consequences this has for user code.
       </para>
       <para>
        When <command>rootxamine</command> runs, it creates a recurring
        <classname>TTimer</classname> derived object with a one second
        period.  The <methodname>Notify</methodname> method if this object
        maintains a set of Root histograms in the <filename>/</filename>
        directory that correspond to those in the SpecTcl shared memory it
        is mapped to.
       </para>
       <para>
        The histogram objects are ordinary Root <classname>TH1</classname>
        derived objects but the <varname>fArray</varname> and
        <varname>fN</varname> data members
        of the underlying histogram data are tampered with at creation time
        to point into the mapped shared memory.
        This is possible because  <classname>TH1</classname> is derived
        from a <classname>TArray</classname> and those data attributes
        are public.
       </para>
       <para>
        The immediate consequences of this choice are both positive and
        negative:
       </para>
       <itemizedlist>
        <listitem>
           <para>
              On the plus side, there's never any expensive bulk data
              movement from the shared memory into the histogram's memory,
              this is not compute intensive.
           </para>
        </listitem>
        <listitem>
           <para>
              On the minus side, the spectrum channel data are read-only
              because that's how the shared memory is mapped.
           </para>
        </listitem>
        <listitem>
           <para>
              Since the contents of the histograms did not get there
              via calls to the <methodname>Fill</methodname> method,
              Statistics kept by <classname>THxx</classname> <methodname>Fill</methodname>
              methods are not kept.
           </para>
           <para>
            You can use the <methodname>ResetStats</methodname> method
            of <classname>TH1</classname> to compute those statistics
            from the contents of the histogram  however note that
            these statistics will not update as the spectrum contents change
            and that depending on the size of the spectrum, this can
            be an expensive operation.  This is why we don't do this as
            part of our housekeeping operations.
           </para>
        </listitem>
       </itemizedlist>
       <para>
        Maintaining histograms means looking at entries in the Xamine
        shared memory and:
       </para>
       <itemizedlist>
        <listitem>
           <para>
              If a previously unused spectrum slot becomes used,
              creating a new Root histogram that corresponds to that.
           </para>
        </listitem>
        <listitem>
           <para>
              If a previously used spectrum slot becomes unused,
              deleting the existing Root histogram object that
              jacketed that spectrum.
           </para>
        </listitem>
        <listitem>
           <para>
              If the spectrum in a previously used slot changes,
              The existing Root histogram object that represents the old
              spectrum is deleted and a new one representing the new
              spectrum is created.
           </para>
           <para>
            At this point in time, <firstterm>changed</firstterm> means
            that any of the following is true:
           </para>
           <itemizedlist>
            <listitem>
               <para>
                  The spectrum type has changed. 
               </para>
            </listitem>
            <listitem>
               <para>
                  The spectrum dimensions have changed. 
               </para>
            </listitem>
            <listitem>
               <para>
                  The spectrum axis specifications have changed. 
               </para>
            </listitem>
           </itemizedlist>
        </listitem>
       </itemizedlist>
       <para>
        This update algorithm means that if you create a pointer to
        a spectrum you need to know if that pointer is still valid.
        Unfortunately there is no way to know that at present.
        Here's an example.  Suppose we have a spectrum named
        "myspectrum" that we know is a 1-d long spectrum.  We can get a pointer to
        that histogram in a Root script as follows:
       </para>
       <informalexample>
        <programlisting>
TH1I* pSpectrum = (TH1I*)(gDirectory->FindObject("myspectrum"));
        </programlisting>
       </informalexample>
       <para>
        Suppose at some later time, that spectrum is removed from shared
        memory or the spectrum in its slot is replaced with a different
        spectrum.  The following, seemingly innocuous code will segfault:
       </para>
       <informalexample>
        <programlisting>
pSpectrum->Draw();
        </programlisting>
       </informalexample>
       <para>
        As will, even
       </para>
       <informalexample>
        <programlisting>
delete pSpectrum;               // Double delete.            
        </programlisting>
       </informalexample>
       <para>
        You might think I could tell you if a pointer pointed to
        a currently maintained histogram and you'd be right but even that
        can fail as follows due to the inherent asynchronism between the
        rootxamine and the SpecTcl program maintaining the shared memory
        contents:
       </para>
       <informalexample>
        <programlisting>
TH1I* pSpectrum = (TH1I*)(gDirectory->FindObject("myspectrum"));
if (isMaintained(pSpectrom)) {
   pSpectrum->Draw();  
}
        </programlisting>
       </informalexample>
       <para>
        In the code above if after the hypothetical <function>isMaintained</function>
        is called, the spectrum is killed off by SpecTcl before or during
        the execution of the <methodname>Draw</methodname> method
        the segfault will still occur.  Therefore we don't bother to
        give the illusion of safety.
       </para>
       <para>
        Fortunately in most cases the spectrum definitions in
        the shared memory are relatively stable.  Furthermore, starting up
        <command>rootxamine</command> is relatively cheap.
       </para>
       <para>
        Finally,  If you use <classname>TBrowser</classname>, you'll find the
        spectra created in <filename>/root/ROOT Memory</filename>.
        Sadly, <classname>TBrowser</classname>'s listing of objects on the
        left side is <emphasis>static</emphasis>.  This means that:
       </para>
       <itemizedlist>
        <listitem>
           <para>
              Updating won't  reflect any spectra added to the shared memory.
           </para>
        </listitem>
        <listitem>
           <para>
              Even worse, updating won't reflect any spectra that
              were
              removed from shared memory which allows you to quite happily
              double click on a deleted spectrum to 'display it' and
              make Root segfault
           </para>
        </listitem>
        <listitem>
           <para>
              Replacing a spectrum is the same as above.  The name
              evidently has, associated with it, a static pointer to the
              named object that is not updated and, again, referencing it
              will cause a segfault.
           </para>
        </listitem>
       </itemizedlist>
       <para>
        The only thing you can do is destroy the browser and
        start a new one.  It will query the set of objects anew
        and reflect all changes to the SpecTcl shared display memory.
       </para>
       <para>
        One final caution.  If your
        SpecTcl reads a SpecTcl configuration file that
        matches the current configuration, you might think you're in good shape.
        In fact you are not.  Reading a SpecTcl configuration file means
        destroying all spectra and creating the ones described in the
        configuration file, then binding them into the display memory.
        In this process, spectra could be mapped to different slots, or
        their contents could move around in the shared memory or,
        if the update process runs between the time all spectra are destroyed
        and all spectra have been rebound into the display memory
        any histogram pointers you have are bad.
       </para>
    </chapter>
</book>